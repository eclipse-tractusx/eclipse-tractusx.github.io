{
	"info": {
		"_postman_id": "0ad1b7a6-734c-4289-9221-667fc56a21da",
		"name": "KA Conformity Assessment Scripts (R24.05)",
		"description": "(C) 2021,2023 Contributors to the Eclipse Foundation\n\nSPDX-LICENSE-IDENTIFIER: CC-BY-4.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2757771",
		"_collection_link": "https://www.postman.com/catena-x/workspace/catena-x-knowledge-agents/collection/2757771-0ad1b7a6-734c-4289-9221-667fc56a21da?action=share&source=collection_link&creator=2757771"
	},
	"item": [
		{
			"name": "01_TESTASSETS",
			"item": [
				{
					"name": "I_02_00_01_OPEN_POLICY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Policy?cab=Asset&mode=open\",\n    \"policy\": {\n        \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n        \"@type\": \"Set\",\n        \"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n        \"permission\": [\n            {\n                \"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n                \"action\": \"USE\",\n                \"constraint\": []\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/policydefinitions",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "I_02_00_02_CLOSED_POLICY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"@context\": {\n\t\t\"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n\t\t\"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n\t},\n\t\"@id\": \"Policy?cab=Asset&mode=closed\",\n\t\"policy\": {\n\t\t\"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n\t\t\"@type\": \"Set\",\n\t\t\"uid\": \"https://w3id.org/catenax/ontology/common#Policy?oem=Graph\",\n\t\t\"permission\": [\n\t\t\t{\n\t\t\t\t\"target\": \"https://w3id.org/catenax/ontology/common#GraphAsset?oem=\",\n\t\t\t\t\"action\": \"USE\",\n\t\t\t\t\"constraint\": {\n\t\t\t\t\t\"@type\": \"Constraint\",\n\t\t\t\t\t\"leftOperand\": \"BusinessPartnerNumber\",\n\t\t\t\t\t\"operator\": \"eq\",\n\t\t\t\t\t\"rightOperand\": \"{{cabBPNL}}\"\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/policydefinitions",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "I_02_00_03_OPEN_CONTRACT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?cab=Asset&mode=open\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?cab=Asset&mode=open\",\n    \"contractPolicyId\": \"Policy?cab=Asset&mode=open\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?cab=Asset&mode=open\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/contractdefinitions",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"contractdefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a contract."
					},
					"response": []
				},
				{
					"name": "I_02_00_04_CLOSED_CONTRACT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n         \"cx-common\": \"https://w3id.org/catenax/ontology/common#\"\n    },\n    \"@id\": \"Contract?cab=Asset&mode=closed\",\n    \"@type\": \"ContractDefinition\",\n    \"accessPolicyId\": \"Policy?cab=Asset&mode=closed\",\n    \"contractPolicyId\": \"Policy?cab=Asset&mode=closed\",\n    \"assetsSelector\" : {\n        \"@type\" : \"CriterionDto\",\n        \"operandLeft\": \"https://w3id.org/catenax/ontology/common#publishedUnderContract\",\n        \"operator\": \"=\",\n        \"operandRight\": \"Contract?cab=Asset&mode=closed\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/contractdefinitions",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"contractdefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a contract."
					},
					"response": []
				},
				{
					"name": "I_02_00_05_OPEN_GRAPH_ASSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"GraphAsset?cab=Conforming&mode=open\",\n    \"properties\": {\n        \"cx-common:name\": \"Open Conforming Asset.\",\n        \"cx-common:description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n        \"dct:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=open#> .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {},\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=open\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_06_CLOSED_GRAPH_ASSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"GraphAsset?cab=Conforming&mode=closed\",\n    \"properties\": {\n        \"cx-common:name\": \"Closed Conforming Asset.\",\n        \"cx-common:description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=closed\",\n        \"dct:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=closed#> .\\n\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {},\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=closed\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_07_UNFEDERATED_GRAPH_ASSET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"GraphAsset?cab=Conforming&mode=unfederated\",\n    \"properties\": {\n        \"cx-common:name\": \"Unfederated Conforming Asset.\",\n        \"cx-common:description\": \"A graph asset/offering hosting a conforming agent for testing and conformity checking.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Graph&mode=open\",\n        \"dct:type\": \"cx-taxo:GraphAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/common>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"sh:shapesGraph\": \"@prefix : <GraphAsset?cab=Conforming&mode=unfederated#> .\\n\",\n        \"cx-common:isFederated\": \"false^^xsd:boolean\"\n    },\n    \"privateProperties\": {},\n    \"dataAddress\": {\n        \"id\": \"GraphAsset?cab=Conforming&mode=unfederated\",\n        \"@type\": \"DataAddress\",\n        \"baseUrl\": \"{{cabConformingAgent}}/bind\",\n        \"type\": \"cx-common:Protocol?w3c:http:SPARQL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_08_OPEN_SKILL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vehicle Health Skill Registered\", function () {",
									"    pm.expect(pm.response.code).oneOf([201,200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dopen&isFederated=true",
							"host": [
								"{{cabAgentPlane}}"
							],
							"path": [
								"api",
								"agent",
								"skill"
							],
							"query": [
								{
									"key": "distributionMode",
									"value": "ALL",
									"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
								},
								{
									"key": "contract",
									"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
									"description": "Name of the contract to publish the skill under"
								},
								{
									"key": "asset",
									"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dopen",
									"description": "Id of the skill"
								},
								{
									"key": "isFederated",
									"value": "true"
								}
							]
						},
						"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
					},
					"response": []
				},
				{
					"name": "I_02_00_09_OPEN_SKILL_ALT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"SkillAsset?cab=Conforming&mode=open\",\n    \"properties\": {\n        \"cx-common:name\": \"Open Skill\",\n        \"cx-common:description\": \"A conformity assessment skill.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n        \"dct:type\": \"cx-taxo:SkillAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:query\": \"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n    },\n    \"dataAddress\": {\n        \"id\": \"SkillAsset?cab=Conforming&mode=open\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_10_CLOSED_SKILL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vehicle Health Skill Registered\", function () {",
									"    pm.expect(pm.response.code).oneOf([201,200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=closed> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dclosed&contract=Contract%3Fcab%3DAsset%26mode%3Dclosed&isFederated=false",
							"host": [
								"{{cabAgentPlane}}"
							],
							"path": [
								"api",
								"agent",
								"skill"
							],
							"query": [
								{
									"key": "distributionMode",
									"value": "ALL",
									"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
								},
								{
									"key": "asset",
									"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dclosed",
									"description": "Name of the contract to publish the skill under"
								},
								{
									"key": "contract",
									"value": "Contract%3Fcab%3DAsset%26mode%3Dclosed",
									"description": "Id of the skill"
								},
								{
									"key": "isFederated",
									"value": "false",
									"description": "Whether it is visible in the federated catalogue"
								}
							]
						},
						"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
					},
					"response": []
				},
				{
					"name": "I_02_00_11_CLOSED_SKILL_ALT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"SkillAsset?cab=Conforming&mode=closed\",\n    \"properties\": {\n        \"cx-common:name\": \"Closed Skill\",\n        \"cx-common:description\": \"A conformity assessment skill.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=closed\",\n        \"dct:type\": \"cx-taxo:SkillAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n        \"cx-common:isFederated\": \"false^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:query\": \"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=closed> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n    },\n    \"dataAddress\": {\n        \"id\": \"SkillAsset?cab=Conforming&mode=closed\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_12_PROVIDER_SKILL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vehicle Health Skill Registered\", function () {",
									"    pm.expect(pm.response.code).oneOf([201,200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=PROVIDER&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dprovider&isFederated=true",
							"host": [
								"{{cabAgentPlane}}"
							],
							"path": [
								"api",
								"agent",
								"skill"
							],
							"query": [
								{
									"key": "distributionMode",
									"value": "PROVIDER",
									"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
								},
								{
									"key": "contract",
									"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
									"description": "Name of the contract to publish the skill under"
								},
								{
									"key": "asset",
									"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dprovider",
									"description": "Id of the skill"
								},
								{
									"key": "isFederated",
									"value": "true",
									"description": "Whether it is visible in the federated catalogue"
								}
							]
						},
						"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
					},
					"response": []
				},
				{
					"name": "I_02_00_13_PROVIDER_SKILL_ALT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"SkillAsset?cab=Conforming&mode=provider\",\n    \"properties\": {\n        \"cx-common:name\": \"Provider-Forced Skill\",\n        \"cx-common:description\": \"A conformity assessment skill.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n        \"dct:type\": \"cx-taxo:SkillAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=provider\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:query\": \"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n    },\n    \"dataAddress\": {\n        \"id\": \"SkillAsset?cab=Conforming&mode=provider\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_14_CONSUMER_SKILL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vehicle Health Skill Registered\", function () {",
									"    pm.expect(pm.response.code).oneOf([201,200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=CONSUMER&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dconsumer&isFederated=true",
							"host": [
								"{{cabAgentPlane}}"
							],
							"path": [
								"api",
								"agent",
								"skill"
							],
							"query": [
								{
									"key": "distributionMode",
									"value": "CONSUMER",
									"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
								},
								{
									"key": "contract",
									"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
									"description": "Name of the contract to publish the skill under"
								},
								{
									"key": "asset",
									"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dconsumer",
									"description": "Id of the skill"
								},
								{
									"key": "isFederated",
									"value": "true",
									"description": "Whether it is visible in the federated catalogue"
								}
							]
						},
						"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
					},
					"response": []
				},
				{
					"name": "I_02_00_15_CONSUMER_SKILL_ALT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"SkillAsset?cab=Conforming&mode=consumer\",\n    \"properties\": {\n        \"cx-common:name\": \"Consumer-Forced Skill\",\n        \"cx-common:description\": \"A conformity assessment skill.\",\n        \"cx-common:version\": \"1.12.19\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n        \"dct:type\": \"cx-taxo:SkillAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=consumer\",\n        \"cx-common:isFederated\": \"true^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:query\": \"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n    },\n    \"dataAddress\": {\n        \"id\": \"SkillAsset?cab=Conforming&mode=consumer\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_16_UNFEDERATED_SKILL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vehicle Health Skill Registered\", function () {",
									"    pm.expect(pm.response.code).oneOf([201,200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/sparql-query"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# Sample Skill accessing a graph\n\nSELECT ?subject ?predicate ?object WHERE { \n    SERVICE <{{cabEdcIdsSparql}}> {\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \n            ?subject ?predicate ?object. \n        }\n    } \n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{cabAgentPlane}}/api/agent/skill?distributionMode=ALL&contract=Contract%3Fcab%3DAsset%26mode%3Dopen&asset=SkillAsset%3Fcab%3DConforming%26mode%3Dunfederated&isFederated=false",
							"host": [
								"{{cabAgentPlane}}"
							],
							"path": [
								"api",
								"agent",
								"skill"
							],
							"query": [
								{
									"key": "distributionMode",
									"value": "ALL",
									"description": "Distribution Mode may be ALL, PROVIDER or CONSUMER"
								},
								{
									"key": "contract",
									"value": "Contract%3Fcab%3DAsset%26mode%3Dopen",
									"description": "Name of the contract to publish the skill under"
								},
								{
									"key": "asset",
									"value": "SkillAsset%3Fcab%3DConforming%26mode%3Dunfederated",
									"description": "Id of the skill"
								},
								{
									"key": "isFederated",
									"value": "false"
								}
							]
						},
						"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs."
					},
					"response": []
				},
				{
					"name": "I_02_00_17_UNFEDERATED_SKILL_ALT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([200,204,409]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"cx-common\": \"https://w3id.org/catenax/ontology/common#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"sh\": \"http://www.w3.org/ns/shacl#\",\n        \"cs-taxo\": \"https://w3id.org/catenax/taxonomy#\",\n        \"dct\": \"https://purl.org/dc/terms/\"\n    },\n    \"@id\": \"SkillAsset?cab=Conforming&mode=unfederated\",\n    \"properties\": {\n        \"cx-common:name\": \"Unfederated Skill\",\n        \"cx-common:description\": \"A conformity assessment skill.\",\n        \"cx-common:version\": \"1.9.4-SNAPSHOT\",\n        \"cx-common:contenttype\": \"application/json, application/xml\",\n        \"cx-common:publishedUnderContract\": \"Contract?cab=Asset&mode=open\",\n        \"dct:type\": \"cx-taxo:SkillAsset\",\n        \"rdfs:isDefinedBy\": \"<https://w3id.org/catenax/ontology/core>\",\n        \"cx-common:implementsProtocol\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"cx-common:distributionMode\": \"cx-common:SkillDistribution?run=all\",\n        \"cx-common:isFederated\": \"false^^xsd:boolean\"\n    },\n    \"privateProperties\": {\n        \"cx-common:query\": \"# Sample Skill accessing a graph\\n\\nSELECT ?subject ?predicate ?object WHERE { \\n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\\n        GRAPH <GraphAsset?cab=Conforming&mode=open> { \\n            ?subject ?predicate ?object. \\n        }\\n    } \\n}\"\n    },\n    \"dataAddress\": {\n        \"id\": \"SkillAsset?cab=Conforming&mode=unfederated\",\n        \"@type\": \"DataAddress\",\n        \"type\": \"cx-common:Protocol?w3c:http:SKILL\",\n        \"proxyPath\": \"false\",\n        \"proxyMethod\": \"true\",\n        \"proxyQueryParams\": \"true\",\n        \"proxyBody\": \"true\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/assets",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "I_02_00_18_EDC_OWN_CATALOGUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listing of CAB Catalogue with open assets\", function () {",
									"    var jsonRequest=JSON.parse(pm.request.body.raw);",
									"    pm.expect(pm.response.code).oneOf([200]);",
									"    var jsonResponse=pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property(\"@id\");",
									"    pm.expect(jsonResponse).to.have.property(\"@type\");",
									"    pm.expect(jsonResponse).to.have.property(\"@context\");",
									"    var type=jsonResponse[\"@type\"];",
									"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
									"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
									"    var participant=pm.response.json()[\"edc:participantId\"];",
									"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
									"    var service=jsonResponse[\"dcat:service\"];",
									"    pm.expect(service).to.have.property(\"@id\");",
									"    pm.expect(service).to.have.property(\"@type\");",
									"    var serviceType=service[\"@type\"];",
									"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
									"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
									"    pm.expect(service).to.have.property(\"dct:terms\");",
									"    var serviceTerms=service[\"dct:terms\"];",
									"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
									"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
									"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
									"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
									"                ",
									"    var dataSets=jsonResponse['dcat:dataset'];",
									"    pm.expect(dataSets).to.be.not.null;",
									"    if(!Array.isArray(dataSets)) {",
									"        dataSets=[dataSets];",
									"    }",
									"",
									"    pm.expect(dataSets).to.be.of.length.gte(0);",
									"",
									"    dataSets.map(function(contractOffer) {",
									"        pm.expect(contractOffer).to.have.property(\"@id\");",
									"        pm.expect(contractOffer).to.have.property(\"@type\");",
									"        var contractOfferType=contractOffer[\"@type\"];        ",
									"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
									"",
									"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
									"        var policy=contractOffer[\"odrl:hasPolicy\"];",
									"        pm.expect(policy).to.have.property(\"@id\");",
									"        pm.expect(policy).to.have.property(\"@type\");",
									"        var policyType=policy[\"@type\"];",
									"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
									"        pm.expect(policy).to.have.property(\"odrl:permission\");",
									"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
									"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
									"        pm.expect(policy).to.have.property(\"odrl:target\");",
									"        var policyTarget=policy[\"odrl:target\"];",
									"",
									"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
									"        var distributions=contractOffer[\"dcat:distribution\"];",
									"        pm.expect(distributions).to.be.not.null;",
									"        if(!Array.isArray(distributions)) {",
									"            distributions=[distributions];",
									"        }",
									"        distributions.map( function(distribution) {",
									"            pm.expect(distribution).to.have.property(\"@type\");",
									"            var distributionType=distribution[\"@type\"];",
									"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
									"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
									"            pm.expect(distribution).to.have.property(\"dct:format\");",
									"            var distributionFormat=distribution[\"dct:format\"];",
									"            pm.expect(distributionFormat).to.have.property(\"@id\");",
									"            var distributionFormatId=distributionFormat[\"@id\"];",
									"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
									"        });",
									"",
									"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
									"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
									"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
									"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
									"        var contenttype=contractOffer[\"edc:contenttype\"];",
									"        pm.expect(contenttype).to.contain(\"application/json\");",
									"        pm.expect(contenttype).to.contain(\"application/xml\");",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
									"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
									"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
									"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
									"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
									"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
									"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
									"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
									"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
									"    });",
									"",
									"    pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=open';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									"    pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=open';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									"    pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=consumer';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									"    pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=provider';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									" pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=closed';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									" pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=closed';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									" pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=unfederated';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									" pm.expect(dataSets.some(",
									"        function(contractOffer) {",
									"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=unfederated';",
									"        }   ",
									"    )).to.eq(true);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{cabEdcApiKey}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{cabEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 200,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\"\n    }\n}\n"
						},
						"url": {
							"raw": "{{cabEdcControl}}/management/v2/catalog/request",
							"host": [
								"{{cabEdcControl}}"
							],
							"path": [
								"management",
								"v2",
								"catalog",
								"request"
							]
						},
						"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
					},
					"response": []
				}
			]
		},
		{
			"name": "02_ALL",
			"item": [
				{
					"name": "0201_EDC_CONTROL_PLANE",
					"item": [
						{
							"name": "020101_EDC_CONTROL_TRANSFER",
							"item": [
								{
									"name": "02010100_Transfer Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Transfer Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{transfer-target}}?cx_accept=application/sparql-results+json&asset={{test-asset}}",
											"host": [
												"{{transfer-target}}"
											],
											"query": [
												{
													"key": "cx_accept",
													"value": "application/sparql-results+json"
												},
												{
													"key": "asset",
													"value": "{{test-asset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "02010101_Transfer Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Transfer Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"var1\",\n            \"var2\",\n            \"var3\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"var1\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WHOLYDUMBSHIT\",\n                    \"xml:lang\": \"en\"\n                },\n                \"var2\": {\n                    \"type\": \"literal\",\n                    \"value\": \"4563.0\",\n                    \"datatype\": \"http://www.w3.org/2001/XMLSchema#float\"                }\n            },\n            {\n                \"var1\": {\n                    \"type\": \"literal\",\n                    \"value\": \"KRUZIFIX\",\n                    \"xml:lang\": \"de\"\n                },\n                \"var3\": {\n                    \"type\": \"literal\",\n                    \"dataType\": \"http://schema.json.org/2001/XMLSchema#Array\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            }  \n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{transfer-target}}?cx_accept=application/sparql-results+json&asset={{test-asset}}",
											"host": [
												"{{transfer-target}}"
											],
											"query": [
												{
													"key": "cx_accept",
													"value": "application/sparql-results+json"
												},
												{
													"key": "asset",
													"value": "{{test-asset}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "0202_EDC_DATA_PLANE",
					"item": [
						{
							"name": "020201_EDC_DATA_TRANSFER",
							"item": []
						}
					]
				},
				{
					"name": "0203_MATCHMAKING_AGENT",
					"item": [
						{
							"name": "020301_MATCHMAKING_CALLBACK",
							"item": []
						},
						{
							"name": "020302_MATCHMAKING_GET",
							"item": [
								{
									"name": "02020100_Simple Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{matchmaking-target}}?asset={{test-asset}}",
											"host": [
												"{{matchmaking-target}}"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{test-asset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "02020102_Underspecified Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{matchmaking-target}}",
											"host": [
												"{{matchmaking-target}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "02020101_Get Json With Bound Predicate Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get With Bound Predicate\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"    pm.expect(pm.response.json()).instanceof(Object);",
													"    pm.expect(pm.response.json()).to.haveOwnProperty('head');",
													"    pm.expect(pm.response.json().head).to.haveOwnProperty('vars');",
													"    pm.expect(pm.response.json().head.vars).to.eql(['subject','predicate','object']);",
													"    pm.expect(pm.response.json()).to.haveOwnProperty('results');",
													"    pm.expect(pm.response.json().results).to.haveOwnProperty('bindings');",
													"    pm.response.json().results.bindings.forEach(function(binding) {",
													"        pm.expect(binding).to.haveOwnProperty('subject');",
													"        pm.expect(binding.subject).to.haveOwnProperty('type');",
													"        pm.expect(binding.subject).to.haveOwnProperty('value');",
													"        pm.expect(binding).to.haveOwnProperty('object');        ",
													"        pm.expect(binding.object).to.haveOwnProperty('type');",
													"        pm.expect(binding.object).to.haveOwnProperty('value');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json"
											}
										],
										"url": {
											"raw": "{{matchmaking-target}}?query=SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20{{bound-predicate}}%20%3Fobject.%7D",
											"host": [
												"{{matchmaking-target}}"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20{{bound-predicate}}%20%3Fobject.%7D"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_06_MATCHMAKING_AGENT_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Catalogue Only)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var tieraBPNL=pm.environment.get(\"tieraBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(tieraBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/function') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/behaviour') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_07_MATCHMAKING_AGENT_CATALOGUE_FAILURE_NS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Namespaces\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    var tieraBPNL=pm.environment.get(\"tieraBPNL\");",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.endsWith(tieraBPNL) && binding.predicate.value == 'https://w3id.org/catenax/ontology/common#hasConnector';",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/common') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/core') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/vehicle') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value.startsWith('https://w3id.org/catenax/ontology/reliability') && (binding.predicate.value.startsWith('http://www.w3.org/2000/01/rdf-schema') || binding.predicate.value.startsWith('http://www.w3.org/1999/02/22-rdf-syntax-ns'));",
													"        }   ",
													"    )).to.eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object. FILTER(STRSTARTS(STR(?predicate),\"https://wrongid.org\"))}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_08_MATCHMAKING_AGENT_CATALOGUE_FAILURE_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent With Wrong Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject, ?predicate, ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_09_MATCHMAKING_AGENT_WIKIDATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent (Wikidata Federation)\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"item\");",
													"        pm.expect(binding.item).to.have.property(\"type\");",
													"        pm.expect(binding.item).to.have.property(\"value\");",
													"        pm.expect(binding.item.value.startsWith(\"http://www.wikidata.org\")).to.be.equal(true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT * { SERVICE <https://query.wikidata.org/sparql> {  ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> } }"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							]
						},
						{
							"name": "020303_MATCHMAKING_POST",
							"item": [
								{
									"name": "02020101_Simple Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"var1\",\n            \"var2\",\n            \"var3\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"var1\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WHOLYDUMBSHIT\",\n                    \"xml:lang\": \"en\"\n                },\n                \"var2\": {\n                    \"type\": \"literal\",\n                    \"value\": \"4563.0\",\n                    \"datatype\": \"http://www.w3.org/2001/XMLSchema#float\"                }\n            },\n            {\n                \"var1\": {\n                    \"type\": \"literal\",\n                    \"value\": \"KRUZIFIX\",\n                    \"xml:lang\": \"de\"\n                },\n                \"var3\": {\n                    \"type\": \"literal\",\n                    \"dataType\": \"http://schema.json.org/2001/XMLSchema#Array\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            }  \n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{matchmaking-target}}?asset={{test-asset}}",
											"host": [
												"{{matchmaking-target}}"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{test-asset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "03010102_Underspecified Post Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Post\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"url": {
											"raw": "{{binding-target}}",
											"host": [
												"{{binding-target}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_12_MATCHMAKING_AGENT_CLOSED_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against a Closed CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"    pm.expect(pm.response.json()).to.have.property(\"status\");",
													"    pm.expect(pm.response.json().status).to.be.equal(pm.response.code);",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"    pm.expect(/^[+-\\d]+$/.test(pm.response.json().message)).to.be.equal(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dclosed"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "I_02_01_11_MATCHMAKING_AGENT_OPEN_GRAPH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Matchmaking Agent Against an Open CAB Asset\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { \n    ?subject ?predicate ?object. \n}"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{cabEdcIdsUrlEncode}}%23GraphAsset%3Fcab%3DConforming%26mode%3Dopen"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							]
						},
						{
							"name": "020304_MATCHMAKING_SKILL",
							"item": []
						}
					]
				},
				{
					"name": "0204_FEDERATED_CATALOGUE",
					"item": [
						{
							"name": "020401_FEDERATED_CATALOGUE_MODEL",
							"item": [
								{
									"name": "I_02_01_01_EDC_OWN_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of Own Catalogue\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{oemEdcProviderControl}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/catalog/request",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "I_02_01_10_EDC_CAB_CATALOGUE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listing of CAB Catalogue with open assets\", function () {",
													"    var jsonRequest=JSON.parse(pm.request.body.raw);",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    var jsonResponse=pm.response.json();",
													"    pm.expect(jsonResponse).to.have.property(\"@id\");",
													"    pm.expect(jsonResponse).to.have.property(\"@type\");",
													"    pm.expect(jsonResponse).to.have.property(\"@context\");",
													"    var type=jsonResponse[\"@type\"];",
													"    pm.expect(type).to.be.equal(\"dcat:Catalog\");",
													"    pm.expect(jsonResponse).to.have.property(\"edc:participantId\");",
													"    var participant=pm.response.json()[\"edc:participantId\"];",
													"    pm.expect(jsonResponse).to.have.property(\"dcat:service\");",
													"    var service=jsonResponse[\"dcat:service\"];",
													"    pm.expect(service).to.have.property(\"@id\");",
													"    pm.expect(service).to.have.property(\"@type\");",
													"    var serviceType=service[\"@type\"];",
													"    pm.expect(serviceType).to.be.equal(\"dcat:DataService\");",
													"    pm.expect(pm.response.json()).to.have.property(\"dcat:dataset\");",
													"    pm.expect(service).to.have.property(\"dct:terms\");",
													"    var serviceTerms=service[\"dct:terms\"];",
													"    pm.expect(serviceTerms).to.be.equal(\"connector\");",
													"    pm.expect(service).to.have.property(\"dct:endpointUrl\");",
													"    var serviceEndpoint=service[\"dct:endpointUrl\"];",
													"    pm.expect(jsonRequest.providerUrl).to.contain(serviceEndpoint);",
													"                ",
													"    var dataSets=jsonResponse['dcat:dataset'];",
													"    pm.expect(dataSets).to.be.not.null;",
													"    if(!Array.isArray(dataSets)) {",
													"        dataSets=[dataSets];",
													"    }",
													"",
													"    pm.expect(dataSets).to.be.of.length.gte(0);",
													"",
													"    dataSets.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"@id\");",
													"        pm.expect(contractOffer).to.have.property(\"@type\");",
													"        var contractOfferType=contractOffer[\"@type\"];        ",
													"        pm.expect(contractOfferType).to.be.equal(\"dcat:Dataset\");",
													"",
													"        pm.expect(contractOffer).to.have.property(\"odrl:hasPolicy\");",
													"        var policy=contractOffer[\"odrl:hasPolicy\"];",
													"        pm.expect(policy).to.have.property(\"@id\");",
													"        pm.expect(policy).to.have.property(\"@type\");",
													"        var policyType=policy[\"@type\"];",
													"        pm.expect(policyType).to.be.equal(\"odrl:Set\");",
													"        pm.expect(policy).to.have.property(\"odrl:permission\");",
													"        pm.expect(policy).to.have.property(\"odrl:obligation\");",
													"        pm.expect(policy).to.have.property(\"odrl:prohibition\");",
													"        pm.expect(policy).to.have.property(\"odrl:target\");",
													"        var policyTarget=policy[\"odrl:target\"];",
													"",
													"        pm.expect(contractOffer).to.have.property(\"dcat:distribution\");",
													"        var distributions=contractOffer[\"dcat:distribution\"];",
													"        pm.expect(distributions).to.be.not.null;",
													"        if(!Array.isArray(distributions)) {",
													"            distributions=[distributions];",
													"        }",
													"        distributions.map( function(distribution) {",
													"            pm.expect(distribution).to.have.property(\"@type\");",
													"            var distributionType=distribution[\"@type\"];",
													"            pm.expect(distributionType).to.be.equal(\"dcat:Distribution\");",
													"            pm.expect(distribution).to.have.property(\"dcat:accessService\");",
													"            pm.expect(distribution).to.have.property(\"dct:format\");",
													"            var distributionFormat=distribution[\"dct:format\"];",
													"            pm.expect(distributionFormat).to.have.property(\"@id\");",
													"            var distributionFormatId=distributionFormat[\"@id\"];",
													"            pm.expect(distributionFormatId).oneOf([\"HttpProxy\",\"AmazonS3\"]);",
													"        });",
													"",
													"        pm.expect(contractOffer).to.have.property(\"edc:version\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:id\");",
													"        pm.expect(contractOffer[\"edc:id\"]).to.be.equal(policyTarget);",
													"        pm.expect(contractOffer).to.have.property(\"edc:name\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:description\");",
													"        pm.expect(contractOffer).to.have.property(\"edc:contenttype\");",
													"        var contenttype=contractOffer[\"edc:contenttype\"];",
													"        pm.expect(contenttype).to.contain(\"application/json\");",
													"        pm.expect(contenttype).to.contain(\"application/xml\");",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\");",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#implementsProtocol\");",
													"        var protocol=contractOffer[\"https://w3id.org/catenax/ontology/common#implementsProtocol\"];",
													"        pm.expect(protocol).to.be.oneOf([\"cx-common:Protocol?w3c:http:SPARQL\",\"cx-common:Protocol?w3c:http:SKILL\"]);",
													"        pm.expect(contractOffer).to.have.property(\"https://w3id.org/catenax/ontology/common#isFederated\");",
													"        var isFederated=contractOffer[\"https://w3id.org/catenax/ontology/common#isFederated\"];",
													"        pm.expect(isFederated).to.be.oneOf([\"true\",\"false\",\"true^^xsd:boolean\",\"false^^xsd:boolean\"]);",
													"        pm.expect(contractOffer).to.have.property(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");",
													"        var assetType=contractOffer[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"];",
													"        pm.expect(assetType).to.be.oneOf([\"cx-common:GraphAsset\",\"cx-common:SkillAsset\"]);",
													"    });",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=open';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=consumer';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													"    pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=provider';",
													"        }   ",
													"    )).to.eq(true);",
													"",
													" pm.expect(dataSets.some(",
													"        function(contractOffer) {",
													"            return contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=closed' || contractOffer[\"edc:id\"] == 'GraphAsset?cab=Conforming&mode=unfederated' || contractOffer[\"edc:id\"] == 'SkillAsset?cab=Conforming&mode=unfederated';",
													"        }   ",
													"    )).to.eq(false);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"@context\": {\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"protocol\": \"dataspace-protocol-http\",\n    \"providerUrl\": \"{{cabEdcIds}}/api/v1/dsp\",\n    \"querySpec\": {\n         \"offset\": 0,\n         \"limit\": 10,\n         \"sort\": \"DESC\",\n         \"sortField\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n         \"filterExpression\": [\n             {\n                \"operandLeft\": \"https://w3id.org/catenax/ontology/common#isFederated\",\n                \"operator\":\"=\",\n                \"operandRight\":\"true^^xsd:boolean\"\n             }\n         ]\n    }\n}\n"
										},
										"url": {
											"raw": "{{oemEdcProviderControl}}/management/v2/catalog/request",
											"host": [
												"{{oemEdcProviderControl}}"
											],
											"path": [
												"management",
												"v2",
												"catalog",
												"request"
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								}
							]
						},
						{
							"name": "020402_FEDERATED_CATALOGUE_COMMON",
							"item": []
						},
						{
							"name": "020403_FEDERATED_CATALOGUE_SYNC",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "03_PROVIDER",
			"item": [
				{
					"name": "0301_PROVIDER_DATA",
					"item": [
						{
							"name": "030101_PROVIDER_DATA_SPARQL",
							"item": [
								{
									"name": "03010100_Underspecified Get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Get\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{binding-target}}",
											"host": [
												"{{binding-target}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "03010101_Get Json With Bound Predicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get With Bound Predicate\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([200,203]);",
													"    pm.expect(pm.response.json()).instanceof(Object);",
													"    pm.expect(pm.response.json()).to.haveOwnProperty('head');",
													"    pm.expect(pm.response.json().head).to.haveOwnProperty('vars');",
													"    pm.expect(pm.response.json().head.vars).to.eql(['subject','predicate','object']);",
													"    pm.expect(pm.response.json()).to.haveOwnProperty('results');",
													"    pm.expect(pm.response.json().results).to.haveOwnProperty('bindings');",
													"    pm.response.json().results.bindings.forEach(function(binding) {",
													"        pm.expect(binding).to.haveOwnProperty('subject');",
													"        pm.expect(binding.subject).to.haveOwnProperty('type');",
													"        pm.expect(binding.subject).to.haveOwnProperty('value');",
													"        pm.expect(binding).to.haveOwnProperty('object');        ",
													"        pm.expect(binding.object).to.haveOwnProperty('type');",
													"        pm.expect(binding.object).to.haveOwnProperty('value');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json"
											}
										],
										"url": {
											"raw": "{{binding-target}}?query=SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20{{bound-predicate}}%20%3Fobject.%7D",
											"host": [
												"{{binding-target}}"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20{{bound-predicate}}%20%3Fobject.%7D"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "03010101_Get Json With Unbound Predicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get With Bound Predicate\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json"
											}
										],
										"url": {
											"raw": "{{binding-target}}?query=SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20%3Fpredicate%20%3Fobject.%7D",
											"host": [
												"{{binding-target}}"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT%20%3Fsubject%20%3Fpredicate%20%3Fobject%20WHERE%20%7B%20%3Fsubject%20%3Fpredicate%20%3Fobject.%7D"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "03010102_Underspecified Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Underspecified Post\", function () {",
													"    let warnings=pm.response.headers.find(function(header) { return header.key=='cx_warnings';});",
													"    if(warnings) {",
													"        var warningsJson = JSON.parse(warnings.value);",
													"        pm.expect(warningsJson).instanceOf(Array);",
													"        warningsJson.forEach(function(warning) {",
													"            pm.expect(warning).to.haveOwnProperty('source-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-tenant');",
													"            pm.expect(warning).to.haveOwnProperty('target-asset');",
													"            pm.expect(warning).to.haveOwnProperty('problem');",
													"            pm.expect(warning).to.haveOwnProperty('context');",
													"        });",
													"    }    ",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"url": {
											"raw": "{{binding-target}}",
											"host": [
												"{{binding-target}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_02_PROVISIONING_AGENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(17);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_type\");",
													"        pm.expect(binding.ls_type).to.have.property(\"type\");",
													"        pm.expect(binding.ls_type).to.have.property(\"value\");",
													"        pm.expect(binding.ls_type.value).to.be.oneOf([\"GearOil\",\"GearSet\"]);",
													"        pm.expect(binding).to.have.property(\"ls_name\");",
													"        pm.expect(binding.ls_name).to.have.property(\"type\");",
													"        pm.expect(binding.ls_name).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_value\");",
													"        pm.expect(binding.ls_value).to.have.property(\"type\");",
													"        pm.expect(binding.ls_value).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_unit\");",
													"        pm.expect(binding.ls_unit).to.have.property(\"type\");",
													"        pm.expect(binding.ls_unit).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_method\");",
													"        pm.expect(binding.ls_method).to.have.property(\"type\");",
													"        pm.expect(binding.ls_method).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_channels\");",
													"        pm.expect(binding.ls_channels).to.have.property(\"type\");",
													"        pm.expect(binding.ls_channels).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_classes\");",
													"        pm.expect(binding.ls_classes).to.have.property(\"type\");",
													"        pm.expect(binding.ls_classes).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"ls_values\");",
													"        pm.expect(binding.ls_values).to.have.property(\"type\");",
													"        pm.expect(binding.ls_values).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_03_PROVISIONING_AGENT_FAIL_NAMESPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Incorrect Namespaces\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(17);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://wrongid.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://wrongid.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://wrongid.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://wrongid.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_04_PROVISIONING_AGENT_FAIL_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Invalid Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle, ?van, ?aggregate, ?assembly, ?supplier, ?teleAnalysis, ?operatingTime, ?mileage, ?recordDate, ?ls_type, ?ls_name, ?ls_value, ?ls_unit, ?ls_method, ?ls_channels, ?ls_classes, ?ls_values {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_01_05_PROVISIONING_AGENT_FAIL_PROFILE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Reliablity Graph With Invalid Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://query.wikidata.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-common:       <https://w3id.org/catenax/ontology/common#>\nPREFIX cx-core:         <https://w3id.org/catenax/ontology/core#>\nPREFIX cx-vehicle:      <https://w3id.org/catenax/ontology/vehicle#>\nPREFIX cx-reliability:  <https://w3id.org/catenax/ontology/reliability#>\nPREFIX rdf:             <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:            <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd:             <http://www.w3.org/2001/XMLSchema#>\nPREFIX json:            <https://json-schema.org/draft/2020-12/schema#> \n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?teleAnalysis ?operatingTime ?mileage ?recordDate ?ls_type ?ls_name ?ls_value ?ls_unit ?ls_method ?ls_channels ?ls_classes ?ls_values WHERE {\n\n    VALUES (?van ?aggregate) { \n        (\"{{sampleVAN}}\"^^xsd:string \"{{sampleAssembly}}\"^^xsd:string) \n    }\n\n    VALUES (?ls_type) { \n        (\"GearOil\"^^xsd:string) (\"GearSet\"^^xsd:string) \n    }\n\n    SERVICE <https://query.wikidata.org/sparql> {  \n        ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> \n    }\n\n    ?vehicle rdf:type cx-vehicle:Vehicle;\n        cx-vehicle:vehicleIdentificationNumber ?van.\n\n    ?assembly rdf:type cx-vehicle:Part;\n        cx-vehicle:name ?aggregate;\n        cx-vehicle:isPartOf ?vehicle;\n        cx-vehicle:supplier ?supplier.\n        \n    ?teleAnalysis rdf:type cx-reliability:Analysis;\n        cx-reliability:analysedObject ?assembly;\n        cx-reliability:operatingHoursOfVehicle ?operatingTime;\n        cx-reliability:mileageOfVehicle ?mileage;\n        cx-core:startDateTime ?recordDate;\n        cx-reliability:result [\n            cx-core:id ?ls_type;\n            cx-core:name ?ls_name;\n            cx-reliability:countingValue ?ls_value;\n            cx-reliability:countingUnit ?ls_unit;\n            cx-reliability:countingMethod ?ls_method;\n            cx-reliability:channels ?ls_channels;\n            cx-reliability:classes ?ls_classes;\n            cx-reliability:values ?ls_values\n        ].\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/{{reliabilityPath}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"{{reliabilityPath}}",
												"sparql"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "0302_PROVIDER_FUNCTION",
					"item": [
						{
							"name": "030201_PROVIDER_FUNCTION_SPARQL",
							"item": [
								{
									"name": "I_02_02_02_BACKEND_SERVICE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Asynchronous Prognosis Service\", function () {",
													"    pm.expect(pm.response.code).oneOf([200,202]);",
													"    pm.expect(pm.response.json()).to.have.property(\"timestamp\");",
													"    pm.expect(pm.response.json()).to.have.property(\"result\");",
													"    pm.expect(pm.response.json()).to.have.property(\"message\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "{{tieraAuthorization}}",
												"value": "{{tieraToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"header\": {\n    \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"senderBPN\": \"BPN0000SUPPLIER\",\n    \"senderAddress\": \"edcs://supplier.com/edc\",\n    \"recipientAddress\": \"https://supplier.com/edc\",\n    \"recipientBPN\": \"BPN0000SUPPLIER\",\n    \"severity\": \"MINOR\",\n    \"status\": \"SENT\",\n    \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n    \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n    \"classification\": \"RemainingUsefulLifePredictor\",\n    \"respondAssetId\": \"{{remotingAgent}}/callback\"\n  },\n  \"content\": {\n    \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"endurancePredictorInputs\": [\n      {\n        \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n        \"classifiedLoadSpectrumGearOil\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearOil\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        },\n        \"classifiedLoadSpectrumGearSet\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"GearSet\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierAAsynchronBackend}}/api/v1/routine/notification",
											"host": [
												"{{tierAAsynchronBackend}}"
											],
											"path": [
												"api",
												"v1",
												"routine",
												"notification"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "I_02_02_03_BACKEND_SERVICE_FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wrongly Invoking the Asynchronous Prognosis Service\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "{{tieraAuthorization}}",
												"value": "{{tieraToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"header\": {\n    \"notificationID\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"senderBPN\": \"BPN0000SUPPLIER\",\n    \"senderAddress\": \"edcs://supplier.com/edc\",\n    \"recipientAddress\": \"https://supplier.com/edc\",\n    \"recipientBPN\": \"BPN0000SUPPLIER\",\n    \"severity\": \"MINOR\",\n    \"status\": \"SENT\",\n    \"targetDate\": \"2022-11-24T22:07:02.611048800Z\",\n    \"timeStamp\": \"2022-11-24T11:24:36.744320Z\",\n    \"classification\": \"RemainingUsefulLifePredictor\",\n    \"respondAssetId\": \"{{remotingAgent}}/callback\"\n  },\n  \"content\": {\n    \"requestRefId\": \"98f507d5-175d-4945-8d06-6aa1fcef9a0c\",\n    \"endurancePredictorInputs\": [\n      {\n        \"componentId\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n        \"classifiedLoadSpectrumClutch\": {\n          \"targetComponentID\": \"urn:uuid:b43a1fab-f460-4d24-b078-e58a0247ad1e\",\n          \"metadata\": {\n            \"projectDescription\": \"pnr_76543\",\n            \"componentDescription\": \"Clutch\",\n            \"routeDescription\": \"logged\",\n            \"status\": {\n              \"date\": \"2023-02-19T10:42:14.213+01:00\",\n              \"operatingHours\": 32137.9,\n              \"mileage\": 865432\n            }\n          },\n          \"header\": {\n            \"countingValue\": \"Time\",\n            \"countingUnit\": \"unit:secondUnitOfTime\",\n            \"countingMethod\": \"TimeAtLevel\",\n            \"channels\": [\n              {\n                \"channelName\": \"TC_SU\",\n                \"unit\": \"unit:degreeCelsius\",\n                \"lowerLimit\": 0,\n                \"upperLimit\": 640,\n                \"numberOfBins\": 128\n              }\n            ]\n          },\n          \"body\": {\n            \"classes\": [\n              {\n                \"className\": \"TC_SU-class\",\n                \"classList\": [\n                  14,\n                  15,\n                  16,\n                  17,\n                  18,\n                  19,\n                  20,\n                  21,\n                  22\n                ]\n              }\n            ],\n            \"counts\": {\n              \"countsName\": \"Time\",\n              \"countsList\": [\n                34968.93,\n                739782.51,\n                4013185.15,\n                46755055.56,\n                25268958.35,\n                8649735.95,\n                9383635.35,\n                19189260.77,\n                1353867.54\n              ]\n            }\n          },\n          \"bammId\": \"urn:bamm:io.openmanufacturing.digitaltwin:1.0.0#ClassifiedLoadSpectrum\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tierAAsynchronBackend}}/api/v1/routine/notification",
											"host": [
												"{{tierAAsynchronBackend}}"
											],
											"path": [
												"api",
												"v1",
												"routine",
												"notification"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "I_02_02_04_REMOTING_AGENT_CALLBACK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invoking the Remoting Agent Callback\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"referencedNotificationID\":\"DUMMY\",\n        \"sender\":\"TESTMANAGEMENT\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{remotingAgent}}/callback",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"callback"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_02_05_REMOTING_AGENT_CALLBACK_FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wrongly Invoking the Remoting Agent Callback\", function () {",
													"    pm.expect(pm.response.code).oneOf([400,500]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"shitID\":\"DUMMY\"\n        \"sender\":\"TESTMANAGEMENT\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{remotingAgent}}/callback",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"callback"
											]
										}
									},
									"response": []
								},
								{
									"name": "I_02_02_06_REMOTING_AGENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(4);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"invocation\");",
													"        pm.expect(binding.invocation).to.have.property(\"type\");",
													"        pm.expect(binding.invocation).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"component\");",
													"        pm.expect(binding.component).to.have.property(\"type\");",
													"        pm.expect(binding.component).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"timeHours\");",
													"        pm.expect(binding.timeHours).to.have.property(\"type\");",
													"        pm.expect(binding.timeHours).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"distanceKm\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"type\");",
													"        pm.expect(binding.distanceKm).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component ?ls_type) { (<urn:uuid:1> \"GearOil\"^^xsd:string) (<urn:uuid:1> \"GearSet\"^^xsd:string) (<urn:uuid:2> \"GearSet\"^^xsd:string) (<urn:uuid:2> \"GearOil\"^^xsd:string)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:observationType ?ls_type;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_07_REMOTING_AGENT_FAIL_LACKING_ARGUMENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With a Lacking Argument\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(4);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(2);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"invocation\");",
													"        pm.expect(binding.invocation).to.have.property(\"type\");",
													"        pm.expect(binding.invocation).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"component\");",
													"        pm.expect(binding.component).to.have.property(\"type\");",
													"        pm.expect(binding.component).to.have.property(\"value\");",
													"        pm.expect(binding).not.to.have.property(\"timeHours\");",
													"        pm.expect(binding).not.to.have.property(\"distanceKm\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://w3id.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_08_REMOTING_AGENT_FAIL_NAMESPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Wrong Namespace\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://w3id.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation ?component ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_09_REMOTING_AGENT_FAIL_SYNTAX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Incorrect Syntax\", function () {",
													"    pm.expect(pm.response.code).oneOf([400]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?invocation, ?component, ?timeHours, ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "I_02_02_10_REMOTING_AGENT_FAIL_PROFILE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent With Wrong Namespace\", function () {",
													"    pm.expect(pm.response.code).oneOf([500]);",
													"    pm.expect(pm.response.text()).to.contain(\"https://query.wikidata.org\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-behaviour: <https://wrongid.org/catenax/ontology/behaviour#>\n\nSELECT ?timeHours ?distanceKm\nWHERE { \n  VALUES (?component) { (<urn:uuid:1>) (<urn:uuid:2>)}\n\n  SERVICE <https://query.wikidata.org/sparql> {  \n        ?item <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q146> \n  }\n\n  ?invocation a cx-behaviour:RemainingUsefulLife;\n              cx-behaviour:sender <bpn:legal:BPNLOEM>;\n              cx-behaviour:senderConnector <edc://sender>;\n              cx-behaviour:recipient <bpn:legal:BPNLSUPPLIER>;\n              cx-behaviour:recipientConnector <edc://recipient>;\n              cx-behaviour:targetDate \"2022-11-24T22:07:02.611048800Z\"^^xsd:dateTime;\n              cx-behaviour:timeStamp \"2022-11-24T11:24:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:component ?component;\n              cx-behaviour:statusDate \"2023-02-19T10:42:36.744320Z\"^^xsd:dateTime;\n              cx-behaviour:statusOperatingHours \"32137.9\"^^xsd:float;\n              cx-behaviour:statusMileage \"865432\"^^xsd:int;\n              cx-behaviour:countingValue \"Time\"^^xsd:string;\n              cx-behaviour:countingUnit <unit:secondUnitOfTime>;\n              cx-behaviour:countingMethod \"TimeAtLevel\"^^xsd:string;\n              cx-behaviour:headerChannels \"[ { \\\"channelName\\\": \\\"TC_SU\\\", \\\"unit\\\": \\\"unit:degreeCelsius\\\", \\\"lowerLimit\\\": 0, \\\"upperLimit\\\": 640, \\\"numberOfBins\\\": 128 }  ]\"^^json:Object;\n              cx-behaviour:bodyClasses \"[ { \\\"className\\\": \\\"TC_SU-class\\\", \\\"classList\\\": [ 14, 15, 16, 17, 18, 19, 20, 21, 22 ] }]\"^^json:Object;\n              cx-behaviour:bodyCountsList \"[34968.93,739782.51,4013185.15,46755055.56,25268958.35,8649735.95,9383635.35,19189260.77,1353867.54]\"^^json:Object;\n              cx-behaviour:remainingOperatingHours ?timeHours;\n              cx-behaviour:remainingRunningDistance ?distanceKm\n              . \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/rul",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"rul"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "04_CONSUMER",
			"item": [
				{
					"name": "0401_CONSUMER_APPLICATION",
					"item": [
						{
							"name": "040101_CONSUMER_APPLICATION_SPARQL",
							"item": [
								{
									"name": "04010100_Login to Consumer Application",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://knowledge.dev.demo.catena-x.net/:path",
											"protocol": "https",
											"host": [
												"knowledge",
												"dev",
												"demo",
												"catena-x",
												"net"
											],
											"path": [
												":path"
											],
											"variable": [
												{
													"key": "path",
													"value": "consumer-frontend/static/js/main.31177f6b.js"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "05_CORE",
			"item": [
				{
					"name": "0501_CORE_ONTOLOGY",
					"item": [
						{
							"name": "050101_CORE_ONTOLOGY_MANAGEMENT",
							"item": [
								{
									"name": "05010100_Access Ontology Details",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/:model",
											"protocol": "https",
											"host": [
												"raw",
												"githubusercontent",
												"com"
											],
											"path": [
												"catenax-ng",
												"product-knowledge",
												"main",
												"ontology",
												":model"
											],
											"variable": [
												{
													"key": "model",
													"value": "cx_ontology.ttl"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "05010101_List Ontologies from Repo",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.github.com/repos/catenax-ng/product-knowledge/contents/ontology?ref=release/v0.7.4",
											"protocol": "https",
											"host": [
												"api",
												"github",
												"com"
											],
											"path": [
												"repos",
												"catenax-ng",
												"product-knowledge",
												"contents",
												"ontology"
											],
											"query": [
												{
													"key": "ref",
													"value": "release/v0.7.4"
												},
												{
													"key": "ref",
													"value": "main",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "050102_CORE_ONTOLOGY_EDITOR",
							"item": []
						}
					]
				}
			]
		}
	]
}