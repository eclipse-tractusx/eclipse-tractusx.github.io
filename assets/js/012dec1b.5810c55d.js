"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[12444],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"TRG 4.03 - Non-root container"},i=void 0,l={unversionedId:"release/trg-4/trg-4-03",id:"release/trg-4/trg-4-03",title:"TRG 4.03 - Non-root container",description:"| Status | Created      | Post-History                     |",source:"@site/docs/release/trg-4/trg-4-03.md",sourceDirName:"release/trg-4",slug:"/release/trg-4/trg-4-03",permalink:"/docs/release/trg-4/trg-4-03",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/release/trg-4/trg-4-03.md",tags:[],version:"current",frontMatter:{title:"TRG 4.03 - Non-root container"},sidebar:"docs",previous:{title:"TRG 4.02 - Base Images",permalink:"/docs/release/trg-4/trg-4-02"},next:{title:"TRG 4.04 - Image signing",permalink:"/docs/release/trg-4/trg-4-04"}},s={},c=[{value:"Why",id:"why",level:2},{value:"Description",id:"description",level:2},{value:"Implementation",id:"implementation",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Status"),(0,a.kt)("th",{parentName:"tr",align:null},"Created"),(0,a.kt)("th",{parentName:"tr",align:null},"Post-History"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Active"),(0,a.kt)("td",{parentName:"tr",align:null},"04-Jan-2024"),(0,a.kt)("td",{parentName:"tr",align:null},"Adjust user ids")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Active"),(0,a.kt)("td",{parentName:"tr",align:null},"29-Dec-2022"),(0,a.kt)("td",{parentName:"tr",align:null},"Initial Release")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Draft"),(0,a.kt)("td",{parentName:"tr",align:null},"14-Sept-2022"),(0,a.kt)("td",{parentName:"tr",align:null},"Draft")))),(0,a.kt)("h2",{id:"why"},"Why"),(0,a.kt)("p",null,"Normally containers do not need root permission but if a container image runs as root, a compromised container has potentially root permissions on the underlying node."),(0,a.kt)("p",null,"For security reasons this is ",(0,a.kt)("strong",{parentName:"p"},"must")," be followed."),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"The container's ",(0,a.kt)("strong",{parentName:"p"},"Dockerfile")," and the ",(0,a.kt)("strong",{parentName:"p"},"Pod resource file (yaml)")," has to be modified to be able to run as a non-root user."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First it is recommended to check how the base image is built to see if it\nmight already have a non-root user defined and used. In this case it is enough\nto specify that user in the Dockerfile with the ",(0,a.kt)("inlineCode",{parentName:"li"},"USER")," instruction."),(0,a.kt)("li",{parentName:"ul"},"Otherwise modify the image's Dockerfile with a ",(0,a.kt)("inlineCode",{parentName:"li"},"RUN")," command that adds a non-root user\nand a ",(0,a.kt)("inlineCode",{parentName:"li"},"USER")," command that specifies which user runs the container on startup.\nThe example below can be modified for specific needs/requirements.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"#Pull the base image as Ubuntu\nFROM ubuntu:latest\n\n#Add a user with userid 1000 and name nonroot\nRUN useradd \u2212u 1000 nonroot\n\n#Run Container as nonroot\nUSER nonroot\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Modify the ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container"},"Pod's or Deployment's configuration")," by adding ",(0,a.kt)("inlineCode",{parentName:"li"},"runAsUser")," field for both the pod's and container's securityContext section. Also set the ",(0,a.kt)("inlineCode",{parentName:"li"},"allowPrivilegeEscalation")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," on the container's securityContext. See the example below:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  securityContext:\n    runAsUser: 1000 # SPECIFY USER ID HERE\n  containers:\n  - name: example-container\n    image: gcr.io/google-samples/node-hello:1.0\n    securityContext:\n      allowPrivilegeEscalation: false # SET THIS TO FALSE\n")))}p.isMDXComponent=!0}}]);