"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[9561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},47335:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l="How-To run two connectors and a DAPS",s={unversionedId:"kits/tractusx-edc/docs/samples/example-dataspace/README",id:"version-23.12/kits/tractusx-edc/docs/samples/example-dataspace/README",title:"How-To run two connectors and a DAPS",description:"1. Prepare environment",source:"@site/docs-kits_versioned_docs/version-23.12/kits/tractusx-edc/docs/samples/example-dataspace/README.md",sourceDirName:"kits/tractusx-edc/docs/samples/example-dataspace",slug:"/kits/tractusx-edc/docs/samples/example-dataspace/",permalink:"/docs-kits/23.12/kits/tractusx-edc/docs/samples/example-dataspace/",draft:!1,tags:[],version:"23.12",frontMatter:{},sidebar:"kits",previous:{title:"tractusx-connector-memory",permalink:"/docs-kits/23.12/kits/tractusx-edc/charts/tractusx-connector-memory/"},next:{title:"Endpoint Data Reference API Overview",permalink:"/docs-kits/23.12/kits/tractusx-edc/docs/samples/edr-api-overview/"}},i={},c=[{value:"1. Prepare environment",id:"1-prepare-environment",level:2},{value:"1.1 Create secrets for both runtimes",id:"11-create-secrets-for-both-runtimes",level:3},{value:"1.2 Obtain configuration for MiW and KeyCloak",id:"12-obtain-configuration-for-miw-and-keycloak",level:3},{value:"2. Prepare Connectors",id:"2-prepare-connectors",level:2},{value:"3 Install the connectors",id:"3-install-the-connectors",level:2},{value:"3.1 Optional Verify the correct installation",id:"31-optional-verify-the-correct-installation",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-run-two-connectors-and-a-daps"},"How-To run two connectors and a DAPS"),(0,r.kt)("h2",{id:"1-prepare-environment"},"1. Prepare environment"),(0,r.kt)("p",null,'This guide will bring up two connectors named "Sokrates" and "Plato", each alongside their dependencies (Hashicorp\nVault, PostgreSQL) and a DAPS instance that both share.'),(0,r.kt)("p",null,"We've tested this setup with ",(0,r.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io/"},"KinD"),", but other runtimes such\nas ",(0,r.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"Minikube")," may work as well, we just haven't tested them."),(0,r.kt)("p",null,"This version of Tractus-X EDC ",(0,r.kt)("em",{parentName:"p"},"requires")," a running instance of the Managed Identity Wallet and KeyCloak, a connector\nwill not be able to communicate to another connector without it."),(0,r.kt)("p",null,"Installation instructions for those are beyond the scope of this document, please refer to the respective manuals and\nguides for information on how to set them up."),(0,r.kt)("p",null,"Furthermore, this guide assumes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the Tractus-X EDC repository is checked out, the working directory for this guide is ",(0,r.kt)("inlineCode",{parentName:"li"},"docs/samples/example-dataspace")),(0,r.kt)("li",{parentName:"ul"},"a Kubernetes runtime (e.g. KinD) is already installed and ready-to-use"),(0,r.kt)("li",{parentName:"ul"},"basic knowledge about ",(0,r.kt)("inlineCode",{parentName:"li"},"helm")," and Kubernetes"),(0,r.kt)("li",{parentName:"ul"},"the following tools are available: ",(0,r.kt)("inlineCode",{parentName:"li"},"yq"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"openssl"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"base64")),(0,r.kt)("li",{parentName:"ul"},"a POSIX-compliant shell, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"bash")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"zsh")," unless stated otherwise")),(0,r.kt)("h3",{id:"11-create-secrets-for-both-runtimes"},"1.1 Create secrets for both runtimes"),(0,r.kt)("p",null,"We'll need a x509 certificate in order to communicate with DAPS, as well as a private key and a Data Encryption signing\nkey."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# SOKRATES aes encryption key\necho "aes_enckey_test" | base64 > sokrates.aes.key\n\n# PLATO aes encryption key\necho "aes_enckey_test" | base64 > plato.aes.key\n')),(0,r.kt)("p",null,"Any arbitrary string can be used for the AES key, but it has to be 16, 24, or 32 characters in length, assuming UTF-8\nencoding."),(0,r.kt)("h3",{id:"12-obtain-configuration-for-miw-and-keycloak"},"1.2 Obtain configuration for MiW and KeyCloak"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The following information is ",(0,r.kt)("em",{parentName:"p"},"required"),", your connectors will ",(0,r.kt)("strong",{parentName:"p"},"not")," work properly unless you\nmodify the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssi:")," section of ",(0,r.kt)("inlineCode",{parentName:"p"},"sokrates-values.yaml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"plato-values.yaml")," accordingly!")),(0,r.kt)("p",null,"For communication with KeyCloak we need the following information"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"tokenurl"),": URL where access tokens can be obtained"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"client.id"),": KeyCloak identifier of the connector")),(0,r.kt)("p",null,"Note that the OAuth2 client secret will be stored in the vault under the alias ",(0,r.kt)("inlineCode",{parentName:"p"},"client-secret"),"."),(0,r.kt)("p",null,"In order to use MiW as credential backend we need the following information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"url"),": a URL where MiW is reachable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"authorityId"),": this is the ",(0,r.kt)("inlineCode",{parentName:"li"},"issuerIdentifier")," for MiW REST requests, please refer to the respective documentation.")),(0,r.kt)("p",null,"Furthermore, we need the ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint.audience"),", which is used to verify the ",(0,r.kt)("inlineCode",{parentName:"p"},"aud")," claim of incoming requests. This does ",(0,r.kt)("strong",{parentName:"p"},"not")," have to be set explicitly, it defaults to each connector's callback address."),(0,r.kt)("h2",{id:"2-prepare-connectors"},"2. Prepare Connectors"),(0,r.kt)("p",null,"Next, the certificates and private keys we created previously must be stored in each connector's vault by injecting\na ",(0,r.kt)("inlineCode",{parentName:"p"},"postStart")," element to the chart's configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# for sokrates\nVALUES_FILE=sokrates-values.yaml\nCLIENT_SECRET=<sokrates-oauth-client-secret>\nAES_KEY=$(cat sokrates.aes.key)\nyq -i ".vault.server.postStart |= [\\"sh\\",\\"-c\\",\\"{\\nsleep 5\\n\n/bin/vault kv put secret/client-secret content=$CLIENT_SECRET\\n\n/bin/vault kv put secret/aes-keys content=$AES_KEY\\n}\\"]" "$VALUES_FILE"\n\n# for plato\nVALUES_FILE=plato-values.yaml\nCLIENT_SECRET=<plato-oauth-client-secret>\nAES_KEY=$(cat plato.aes.key)\nyq -i ".vault.server.postStart |= [\\"sh\\",\\"-c\\",\\"{\\nsleep 5\\n\n/bin/vault kv put secret/client-secret content=$CLIENT_SECRET\\n\n/bin/vault kv put secret/aes-keys content=$AES_KEY\\n}\\"]" "$VALUES_FILE"\n')),(0,r.kt)("h2",{id:"3-install-the-connectors"},"3 Install the connectors"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"helm")," to install the Tractus-X EDC Helm charts. In this example we are using the ",(0,r.kt)("em",{parentName:"p"},"local")," charts, assuming you have\nTractus-X EDC checked out in your local filesystem at ",(0,r.kt)("inlineCode",{parentName:"p"},"<YOUR_PATH>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# install sokrates\nhelm install tx-sokrates <YOUR_PATH>/charts/tractusx-connector \\\n            -f sokrates-values.yaml \\\n            --dependency-update\n            \n# install plato \nhelm install tx-plato <YOUR_PATH>/charts/tractusx-connector \\\n            -f plato-values.yaml \\\n            --dependency-update\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: if you prefer to use the published version of the ",(0,r.kt)("inlineCode",{parentName:"em"},"tractusx-connector")," chart, please add the Tractus-X Helm repo\nfirst:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add tractusx-edc https://eclipse-tractusx.github.io/charts/dev\nhelm install tx-[sokrates|plato] tractusx-edc/tractusx-connector \\\n     -f [sokrates|plato]-values.yaml \\\n     --dependency-update\n")),(0,r.kt)("h2",{id:"31-optional-verify-the-correct-installation"},"3.1 ","[Optional]"," Verify the correct installation"),(0,r.kt)("p",null,"There is several ways of making sure everything worked out well:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"simply look at the logs of the Helm releases, e.g. with a tool\nlike ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/blog/2016/10/tail-kubernetes-with-stern/"},"stern")," and look out for a log line similar to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"stern tx-sokrates\n")),(0,r.kt)("p",{parentName:"li"},"then look out for something similar to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"tx-sokrates-controlplane-b9456f97b-s5jts tractusx-connector INFO 2023-05-31T07:24:53.020975888 tx-sokrates-controlplane ready\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"wait for the Kubernetes rollout to be successful, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl rollout status deployment tx-plato-controlplane"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use ",(0,r.kt)("inlineCode",{parentName:"p"},"helm test")," to execute tests: ",(0,r.kt)("inlineCode",{parentName:"p"},"helm test tx-plato")))))}u.isMDXComponent=!0}}]);