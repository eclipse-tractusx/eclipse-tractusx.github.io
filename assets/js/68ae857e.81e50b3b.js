"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[1722,9556],{28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>o});var n=i(96540);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}},33438:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/industry-core-kit-logo-3d08fb630d6aee1f3c31ce2f65fa4dac.svg"},53555:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/unique_id_push_notifications-ad503a92dd1953815ebd97be22c277ad.svg"},78597:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"kits/industry-core-kit/software-development-view/digital-twins","title":"Digital Twins","description":"Industry Core KIT","source":"@site/docs-kits_versioned_docs/version-24.12/kits/industry-core-kit/software-development-view/digital-twins.mdx","sourceDirName":"kits/industry-core-kit/software-development-view","slug":"/kits/industry-core-kit/software-development-view/digital-twins","permalink":"/docs-kits/24.12/kits/industry-core-kit/software-development-view/digital-twins","draft":false,"unlisted":false,"tags":[],"version":"24.12","sidebarPosition":1,"frontMatter":{"id":"digital-twins","title":"Digital Twins","description":"Industry Core KIT","sidebar_position":1},"sidebar":"kits","previous":{"title":"future-concepts","permalink":"/docs-kits/24.12/kits/industry-core-kit/parts/future-concepts"},"next":{"title":"Aspect Models","permalink":"/docs-kits/24.12/kits/industry-core-kit/software-development-view/aspect-models"}}');var s=i(74848),r=i(28453),a=i(89080);const o={id:"digital-twins",title:"Digital Twins",description:"Industry Core KIT",sidebar_position:1},d=void 0,l={},c=[{value:"Register Digital Twins",id:"register-digital-twins",level:3},{value:"Regulatory Compliance and Security",id:"regulatory-compliance-and-security",level:4},{value:"Handling of Digital Twins at Contract Manufacturing",id:"handling-of-digital-twins-at-contract-manufacturing",level:4},{value:"Unique ID for Parts",id:"unique-id-for-parts",level:4},{value:"Conventions for Creating Digital Twins",id:"conventions-for-creating-digital-twins",level:4},{value:"Property specificAssetIds",id:"property-specificassetids",level:4},{value:"Submodel Descriptors",id:"submodel-descriptors",level:4},{value:"Submodel Descriptors",id:"submodel-descriptors-1",level:5},{value:"Option 1: Same Connector Asset Structure as in Release 3.1",id:"option-1-same-connector-asset-structure-as-in-release-31",level:5},{value:"Option 2: Connector Asset Structure on Catalog Part Level",id:"option-2-connector-asset-structure-on-catalog-part-level",level:5},{value:"Data Consumption with AAS Submodel Descriptor Endpoints",id:"data-consumption-with-aas-submodel-descriptor-endpoints",level:5},{value:"Lookup in the Digital Twin Registry",id:"lookup-in-the-digital-twin-registry",level:3},{value:"Lookup up a Digital Twin with Local IDs",id:"lookup-up-a-digital-twin-with-local-ids",level:4},{value:"Implicit Connection Between a Part Type Twin and the Corresponding Part Instance Twins",id:"implicit-connection-between-a-part-type-twin-and-the-corresponding-part-instance-twins",level:4},{value:"Unique ID Push",id:"unique-id-push",level:3},{value:"Query a Digital Twin Registry to find the digital twin for this built-in part",id:"query-a-digital-twin-registry-to-find-the-digital-twin-for-this-built-in-part",level:4},{value:"Publish Traceability Data Offers in the Connector",id:"publish-traceability-data-offers-in-the-connector",level:4},{value:"Data Provider Tasks",id:"data-provider-tasks",level:4},...a.toc,{value:"NOTICE",id:"notice",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Industry Core kit banner",src:i(33438).A+"",width:"264",height:"245"})}),"\n",(0,s.jsxs)(t.p,{children:["Industry Core uses digital twins to make a company's data available to other Catena-X partners. Basics about digital twins with which you should be familiar to understand this section are described in the ",(0,s.jsx)(t.a,{href:"../../../../../docs-kits/category/digital-twin-kit",children:"Digital Twin KIT"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"register-digital-twins",children:"Register Digital Twins"}),"\n",(0,s.jsx)(t.p,{children:"In Industry Core, different types of parts, e. g. serialized parts, batches, JIS parts or catalog part, are registered in a company's DTR as digital twins."}),"\n",(0,s.jsx)(t.h4,{id:"regulatory-compliance-and-security",children:"Regulatory Compliance and Security"}),"\n",(0,s.jsxs)(t.p,{children:["To enforce a strict need-to-know principle (and to prevent data from being exposed to non-authorized partners in the Catena-X network), the visibility of digital twins and the content of the attribute ",(0,s.jsx)(t.code,{children:"specificAssetIds"})," of digital twins must be restricted to authorized partners only. The actual implemenetation depends on the DTR product used by the Catena-X partner. More details can be found in the ",(0,s.jsx)(t.a,{href:"../../../../../docs-kits/category/digital-twin-kit",children:"Digital Twin KIT"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"handling-of-digital-twins-at-contract-manufacturing",children:"Handling of Digital Twins at Contract Manufacturing"}),"\n",(0,s.jsx)(t.p,{children:"Contract manufacturing refers to the practice of outsourcing the production of vehicles or components to external manufacturers through formal agreements. This is a common business model and process in the automotive industry and therefore needs to be considered within Catena-X."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The creation of a DT has to be agreed first between the contracting authority and the contracting manufacturer. Regardless of who of the two parties creates the digital twin, it must always be created in the contracting authority's DTR. This in turn means that the contracting authority is always the owner of the digital twin of a part that is manufactured by a contract manufacturer."}),"\n",(0,s.jsx)(t.li,{children:"The contract manufacturer does not necessarily need to be a member of Catena-X, as it is often intended to remain confidential if a part is produced by a contract manufacturer. The contracting authority bears responsibility for the externally manufactured parts towards their customers, and therefore all communication, such as Quality Notifications, takes place via the contracting authority."}),"\n",(0,s.jsx)(t.li,{children:"If the contract manufacturer is not part of Catena-X, the required data are provided by the contractor outside of Catena-X, and the contracting authority creates the digital twin and performs the Look-up of the child parts to ensure traceability."}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"unique-id-for-parts",children:"Unique ID for Parts"}),"\n",(0,s.jsx)(t.p,{children:"In the Industry Core, a Unique ID uniquely identifies a particular real-world asset. Currently, these are: serialized parts (including vehicles), batches, JIS parts (Just-in-Sequence) and also catalog parts."}),"\n",(0,s.jsxs)(t.p,{children:["A Unique ID is a URN and has the following format: ",(0,s.jsx)(t.code,{children:"urn:uuid:<UUIDv4>"}),', i.e., the NID is "uuid" and the NSS is a UUID Version 4 (as described here: ',(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"https://en.wikipedia.org/wiki/Universally_unique_identifier"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"The Unique ID mus be created by the manufacturer of the part. At the latest, it must be created when the digital twin for this part is created as the Unique ID is part of the digital twin information."}),"\n",(0,s.jsxs)(t.p,{children:["Unique IDs are used in several places in the Industry Core, e.g., as ",(0,s.jsx)(t.code,{children:"globalAssetId"})," for digital twins or as ",(0,s.jsx)(t.code,{children:"catenaXId"})," in aspect models."]}),"\n",(0,s.jsx)(t.h4,{id:"conventions-for-creating-digital-twins",children:"Conventions for Creating Digital Twins"}),"\n",(0,s.jsx)(t.p,{children:"The following general conventions apply for all digital twins:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["id: The AAS ID must be a UUIDv4 in URN format: ",(0,s.jsx)(t.code,{children:"urn:uuid:<UUIDv4>"}),";"]}),"\n",(0,s.jsx)(t.li,{children:"globalAssetId: the Unique ID of the real-world part for which a digital twin is created."}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u26a0\ufe0f"," AAS ID and Unique ID are different identifiers, although they share the same format (UUID) and therefore look the same. A Unique ID identifies real-world assets, whereas a AAS ID identifies a digital twin of such an asset. Do not use the same value for Unique ID and AAS ID for a digital twin."]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u270b"," ",(0,s.jsx)(t.strong,{children:"Unique ID Push:"})," Once a digital twin was registered (initially created), optionally a Unique ID Push notification can be send from the manufacturer (creator of the digital twin) to the customer of the part to inform it that a new digital twin is available."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"property-specificassetids",children:"Property specificAssetIds"}),"\n",(0,s.jsx)(t.p,{children:"Specific asset IDs are used to identify digital twins when looking up or searching for these digital twins. This is a required step by a customer of a part to connect the digital twins of their parts with the digital twins of the suppliers' child parts. To a customer, only the information printed on a real-world part is available and can be used for the lookup. Mandatory specific asset IDs ensure that at least this information is available for the digital twin."}),"\n",(0,s.jsx)(t.p,{children:"The following conventions for specific asset IDs apply to all digital twins:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Key"}),(0,s.jsx)(t.th,{children:"Availability"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"manufacturerId"}),(0,s.jsx)(t.td,{children:"Mandatory"}),(0,s.jsx)(t.td,{children:"The Business Partner Number (BPNL) of the manufacturer of the part."}),(0,s.jsx)(t.td,{children:"BPNL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"manufacturerPartId"}),(0,s.jsx)(t.td,{children:"Mandatory"}),(0,s.jsx)(t.td,{children:"The ID of the type/catalog part from the manufacturer."}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"customerPartId"}),(0,s.jsx)(t.td,{children:"Optional"}),(0,s.jsxs)(t.td,{children:["The ID of the type/catalog part from the customer.The main reason why this propertiy is optional is that it cannot be guaranteed that every manufacturer knows the customerPartId for their parts. In case the manufacturer knows the customer and the corresponding CustomerPartID of its part though, it is required to add this information for easier lookup and to enable further processes.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{})]}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"digitalTwinType"}),(0,s.jsx)(t.td,{children:"Mandatory"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)("br",{}),"      The type of the digital twin:",(0,s.jsx)("br",{}),'      "PartInstance" for serialized parts, batches, and JIS parts"PartType" for catalog parts',(0,s.jsx)("br",{}),'      digitalTwinType was added to allow data consumers to search for all digital twins of a particular type, e.g, only for catalog parts by using digitalTwinType="PartType" as filter. Without this filter, a search for a particular  manufacturer part ID would not only return the digital twin of the catalog part, but also all digital twins of instances of this catalog part, i.e., of the corresponding serial parts.',(0,s.jsx)("br",{})]}),(0,s.jsx)(t.td,{children:"String x"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"For serialized parts, additionally the following conventions apply:"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Key"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Availability"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"partInstanceId"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The serial number of the part from the manufacturer."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"intrinsicId"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["This the unified technical key for searching a digital twin of a part. In this case the",(0,s.jsx)("br",{})," partInstanceId is used as the intrinsicId."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"van"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Optional"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.strong,{children:"Only for vehicles:"})," The pseudonymized vehicle identification number (VIN) of the vehicle."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"For batches, additionally the following conventions apply:"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Key"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Availability"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"batchId"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The number of the batch from the manufacturer."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"intrinsicId"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["This the unified technical key for searching a digital twin of a batch. In this case the",(0,s.jsx)("br",{})," batchId is used as the intrinsicId."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"For just-in-sequence (JIS) parts, additionally the following conventions apply:"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Key"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Availability"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"parentOrderNumber"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Optional"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A number identifying the just-in-sequence- part's destination parent part. The parent part is typically known upfront to the supplier for just-in-sequence parts."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"jisNumber"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A number that is used to identify the call-off that can be assumed unique within the specific just-in-sequence process. This is typically not the sequence number, but the call-off number."}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"jisCallDate"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Optional"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["The date of the just-in-sequence call-off as stated on the call-off document itself. ",(0,s.jsx)("br",{}),"The value must be compliant to ISO 8601: ",(0,s.jsx)(t.code,{children:"YYYY-MM-DD"})," or ",(0,s.jsx)(t.code,{children:"YYYY-MM-DDThh:mm:ss"})," or ",(0,s.jsx)(t.code,{children:"YYYY-MM-DDThh:mm:ss\xb1hh:mm"})]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Date"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"intrinsicId"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Mandatory"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["This the unified technical key for searching a digital twin of a just-in-sequence (JIS) part. In this case a composition of ",(0,s.jsx)(t.code,{children:"jisNumber"}),", ",(0,s.jsx)(t.code,{children:"parentOrderNumber"})," (if available), ",(0,s.jsx)(t.code,{children:"jisCallDate"})," (if available) is used as the intrinsicId. This information is typically known upfront to the supplier ",(0,s.jsx)(t.code,{children:"jisNumber"}),", ",(0,s.jsx)(t.code,{children:"partOrderNumber"})," and ",(0,s.jsx)(t.code,{children:"jisCallDate"})," for just-in-sequence parts."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"String"})]})]})]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u270b"," ",(0,s.jsx)(t.strong,{children:"Lookup of Digital Twins"}),"\nThe lookup for parts can use the customerPartId or the manufacturerPartId. Both, manufacturer and customer must agree upon what part ID will be used for the lookup. Otherwise, when the customer would use the customerPartId for the lookup, but the manufacturer would only provide the manufacturerPartId in its digital twins, the lookup would fail every time. ",(0,s.jsx)(t.strong,{children:"This is decision that a customer must agree upon with each of their suppliers individually."}),"\nIn order to provide a standardised way to look-up digital twins, the specificAssetIDs are extended by a unified technical key, the intrinsicId. This ensures a correct semantic filling of all other existing attributes in the specificAssetIDs, as the partInstanceId was previously used as an overarching search field, which resulted in the partInstanceId being filled with a batch number for a batch, for example.\nNevertheless, a search for digital twins can still be used via the corresponding the primary fields from a business point of view, such as partInstanceId or batchId."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"standardised identification of a digital twin based on technical key attributes\nCorrect semantic filling of all existing fields in the specificAssetIDs (e.g. filling of the partInstanceIDs attribute for JisParts)"}),"\n",(0,s.jsx)(t.h4,{id:"submodel-descriptors",children:"Submodel Descriptors"}),"\n",(0,s.jsxs)(t.p,{children:["To enforce a strict need-to-know (and prevent data from being exposed to non-authorized parties), the visibility of entries in the attribute ",(0,s.jsx)(t.code,{children:"specificAssetIds"})," must be protected, i.e.,their visibility must be restricted to authorized parties only. For that, the attribute ",(0,s.jsx)(t.code,{children:"externalSubjectId"})," must be used. Detailed information about this can be found in the ",(0,s.jsx)(t.a,{href:"../../../../kits/digital-twin-kit/software-development-view",children:"Digital Twin KIT"}),"."]}),"\n",(0,s.jsx)(t.h5,{id:"submodel-descriptors-1",children:"Submodel Descriptors"}),"\n",(0,s.jsxs)(t.p,{children:["Submodel descriptors must be compliant with the guildeines from the ",(0,s.jsx)(t.a,{href:"../../../../../docs-kits/category/digital-twin-kit",children:"Digital Twin KIT"})," as well as the following additional conventions:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"id"}),': The submodel ID must be a UUIDv4 in URN format: "urn:uuid:<UUIDv4>";']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"idShort"}),': the name of the aspect model in camel case, e.g. for aspect SerialPart: "serialPart".']}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The actual access information for the Connector is part of the endpoint attribute in the submodel descriptor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "interface": "SUBMODEL-3.0",\n    "protocolInformation": {\n        "href": "https://connector.data.plane/{publicContextPath}/{providerPath}/submodel",\n        "endpointProtocol": "HTTP",\n        "endpointProtocolVersion": ["1.1"],\n        "subprotocol": "DSP",\n        "subprotocolBody": "dspEndpoint=https://connector.control.plane/{catalogPath};id=123",\n        "subprotocolBodyEncoding": "plain",\n        "securityAttributes": [\n          { "type": "NONE", "key": "NONE", "value": "NONE" }\n        ]\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The following conventions apply for the endpoint:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"interface"}),", ",(0,s.jsx)(t.code,{children:"endpointProtocol"}),", ",(0,s.jsx)(t.code,{children:"endpointProtocolVersion"}),", ",(0,s.jsx)(t.code,{children:"subprotocol"}),", ",(0,s.jsx)(t.code,{children:"subprotocolBodyEncoding"}),", and ",(0,s.jsx)(t.code,{children:"securityAttributes"})," are set as defined in the CX-0002 standard."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"href"}),": The endpoint address for the logical operation GetSubmodel that is invoked by a data consumer to get the submodel. It must have the following format:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"https://connector.data.plane/{publicContextPath}"}),": Address of the Connector data plane that is providing the submodel. ",(0,s.jsx)(t.code,{children:"{publicContextPath}"})," is configured in the Connector settings and defaults to ",(0,s.jsx)(t.code,{children:"/api/public"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"{providerPath}"}),": This string is forwarded to the backend data service by the Connector data plane. Together with the Connector asset information (see below) it must contain all information for the backend data service to return the requested submodel. The actual path depends on the type of backend data service that the data provider uses to handle the request. More details follow below."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"submodel"}),": This ",(0,s.jsx)(t.code,{children:"submodel"})," string is also forwarded to the backend data service. As AAS Profile SSP-003 of the Submodel Service Specification is mandatory for this release, ",(0,s.jsx)(t.code,{children:"href"})," must have the suffix ",(0,s.jsx)(t.code,{children:"/submodel"})," representing the invokation of the GetSubmodel operation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"subprotocolBody"}),": a semicolon-separated list of parameters used to negotiate the required contract agreement.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dspEndpoint"}),": Base URL of the ",(0,s.jsx)(t.a,{href:"https://docs.internationaldataspaces.org/ids-knowledgebase/v/dataspace-protocol/catalog/catalog.binding.https#id-2.1-prerequisites",children:"catalog service"})," endpoint of a DSP Connector. The consumer Connector can use:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog/request"})," to fetch the full catalog and search for the dataset in the catalog or"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog/datasets/{id}"})," to only fetch offers for the dataset with a particular dataset ID."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"id"}),": The ID of the Connector asset for which a contract negotiation should be intiated. This ID is also called dataset ID as it is stored as ",(0,s.jsx)(t.code,{children:"https://www.w3.org/ns/dcat/dataset.@id"})," in a catalog entry. This ID must be set by the data provider when creating the asset. Do not confuse this Connector asset ID (dataset ID) with other IDs that might be defined additionally for a Connector asset, e.g., ",(0,s.jsx)(t.code,{children:"https://w3id.org/edc/v0.0.1/ns/id"})," (often refered to as ",(0,s.jsx)(t.code,{children:"edc:id"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:['With this approach, the Connector asset structure must no longer follow the "one asset per submodel" rule (as in Release 3.1 and before), but gives data providers more flexibility how to create assets for their digital twins and submodels based on how they use ',(0,s.jsx)(t.code,{children:"{providerPath}"}),"."]}),"\n",(0,s.jsx)(t.h5,{id:"option-1-same-connector-asset-structure-as-in-release-31",children:"Option 1: Same Connector Asset Structure as in Release 3.1"}),"\n",(0,s.jsx)(t.p,{children:"Submodels of digital twins are registered in the Connector the same way as for release 3.1: One asset is created for every submodel of a digital twin."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"href"})," must have the following format: ",(0,s.jsx)(t.code,{children:"https://connector.data.plane/{publicContextPath}/submodel"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"subprotocolBody"})," must have the following format: ",(0,s.jsx)(t.code,{children:"dspEndpoint=https://connector.control.plane/{catalogPath};id={datasetId}"})," with ",(0,s.jsx)(t.code,{children:"{datasetId}"})," the ID of the Connector asset for the submodel."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Here's an example how such a submodel descriptor could look like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"submodelDescriptors": [\n  {\n    "idShort": "serialPart",\n    "id": "urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0",\n    "semanticId": {\n      "type": "ExternalReference",\n      "keys": [\n        {\n          "type": "GlobalReference",\n          "value": "urn:samm:io.catenax.serial_part:3.0.0#SerialPart"\n        }\n      ]\n    },\n    "endpoints": [\n      {\n        "interface": "SUBMODEL-3.0",\n        "protocolInformation": {\n          "href": "https://connector.data.plane/api/public/submodel",\n          "endpointProtocol": "HTTP",\n          "endpointProtocolVersion": ["1.1"],\n          "subprotocol": "DSP",\n          "subprotocolBody": "dspEndpoint=https://connector.control.plane/api/v1/dsp;id=urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0",\n          "subprotocolBodyEncoding": "plain",\n          "securityAttributes": [\n            { "type": "NONE", "key": "NONE", "value": "NONE" }\n          ]\n        }\n      }\n    ]\n  }\n]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, the ",(0,s.jsx)(t.code,{children:"{providerPath}"})," part in the ",(0,s.jsx)(t.code,{children:"href"})," is empty, as the Connector asset referenced in ",(0,s.jsx)(t.code,{children:"subprotocolBody"})," directly points to a service returning the correct submodel (set up correctly with its dataAddress in the data provider's Connector)."]}),"\n",(0,s.jsx)(t.h5,{id:"option-2-connector-asset-structure-on-catalog-part-level",children:"Option 2: Connector Asset Structure on Catalog Part Level"}),"\n",(0,s.jsx)(t.p,{children:"A data provider can link several submodel endpoints to the same Connector asset (referenced by its ID). This allows to create only one asset (per aspect model) for a catalog part and link all submodels (of the same aspect model) for serialized parts of the catalog part to the same asset. The data provider would still need to create separate assets per aspect model as in most cases different usage policies are used for aspect models."}),"\n",(0,s.jsx)(t.p,{children:"If a data provider no longer creates assets on the level of submodels, the Connector can no longer authorize a request on a submodel-level. For example: If assets are created per catalog part, the Connector can only authorize if the requestor is allowed to see parts of these type in general; if the requestor is allowed to see a actual serialized part, must be authorized by the backend data service executing the request."}),"\n",(0,s.jsx)(t.p,{children:"Here's an example how such a submodel descriptor could look like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"submodelDescriptors": [\n  {\n    "idShort": "serialPart",\n    "id": "urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0",\n    "semanticId": {\n      "type": "ExternalReference",\n      "keys": [\n        {\n          "type": "GlobalReference",\n          "value": "urn:samm:io.catenax.serial_part:3.0.0#SerialPart"\n        }\n      ]\n    },\n    "endpoints": [\n      {\n        "interface": "SUBMODEL-3.0",\n        "protocolInformation": {\n          "href": "https://connector.data.plane/api/public/urn%3Auuid%3A7effd7f4-6353-4401-9547-c54b420a22a0/submodel",\n          "endpointProtocol": "HTTP",\n          "endpointProtocolVersion": ["1.1"],\n          "subprotocol": "DSP",\n          "subprotocolBody": "dspEndpoint=https://connector.control.plane/api/v1/dsp;id=urn:uuid:1475f313-0a83-4e2b-b705-a100eebcb7d7",\n          "subprotocolBodyEncoding": "plain",\n          "securityAttributes": [\n            { "type": "NONE", "key": "NONE", "value": "NONE" }\n          ]\n        }\n      }\n    ]\n  }\n]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The the ",(0,s.jsx)(t.code,{children:"{providerPath}"})," part of the ",(0,s.jsx)(t.code,{children:"href"})," property contains the information for the backend data service which digital twin's submodel to return while the asset ID is used for several endpoints. The path part here is just an example as it depends on the type of backend data service the data provider uses."]}),"\n",(0,s.jsx)(t.p,{children:"The above options are only two examples how a submodel's endpoint can be created. As long as it's compliant with the above conventions (including CX-0002) a data provider can also use any other asset structure."}),"\n",(0,s.jsx)(t.h5,{id:"data-consumption-with-aas-submodel-descriptor-endpoints",children:"Data Consumption with AAS Submodel Descriptor Endpoints"}),"\n",(0,s.jsxs)(t.p,{children:["A data consumer must first identify the correct submodel descriptor for a Catena-X data transfer. For Catena-X submodel descriptors, the ",(0,s.jsx)(t.code,{children:"subprotocol"}),' attribute must have the value "DSP". Then, the data consumer must use the information in the ',(0,s.jsx)(t.code,{children:"subprotocolBody"})," to perform a contract negotiation for the asset referenced by ",(0,s.jsx)(t.code,{children:"id"})," with the Connector of the data provider specified by ",(0,s.jsx)(t.code,{children:"dspEndpoint"})," and afterwards initiate the data transfer."]}),"\n",(0,s.jsxs)(t.p,{children:["Further information about the data transfer of submodels can be found in the ",(0,s.jsx)(t.a,{href:"../../../../../docs-kits/category/digital-twin-kit",children:"Digital Twin KIT"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"lookup-in-the-digital-twin-registry",children:"Lookup in the Digital Twin Registry"}),"\n",(0,s.jsx)(t.p,{children:"For a data provider, there are currently the following steps where they have to lookup digital twins of other partners in the Catena-X network."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The data provider must use the local IDs for a serialized part or batch (manufacturer, part number, serial or batch number) and for a just-in-sequence part (manufacturer, parentOrderNumber, jisNumber, jisCallDate) to lookup the AAS ID of the digital twin of this serialized part, batch or just-in-sequence part. The AAS descriptor with this ID contains the Unique ID of the serialized part, batch or just-in-sequence (as globalAssetId) that is used to create SingleLevelBomAsBuilt submodel."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The data provider must use the local IDs for a catalog part (manufacturer, part number) to lookup the AAS ID of the digital twin of this catalog part. The AAS descriptor with this ID contains the Unique ID of the catalog part (as globalAssetId) that is used to create the SingleLevelBoMAsPlanned submodel."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For a data consumer, there are currently the following steps where they have to lookup digital twins of other partners in the Catena-X network."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The data consumer in the Traceability use case in most cases will use the Unique ID of a part to lookup the digital twin (more precisely, its AAS ID) of this part."}),"\n",(0,s.jsx)(t.li,{children:"The data consumer from another use case (e.g., Circular Economy), might either use the Unique ID of a part (if known) or the local IDs of a part to lookup the part's digital twin (AAS ID) depending on what is available in the use case."}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"lookup-up-a-digital-twin-with-local-ids",children:"Lookup up a Digital Twin with Local IDs"}),"\n",(0,s.jsxs)(t.p,{children:["The local IDs of a serialized part (manufacturer, part number, serial number) are stored as specific asset IDs in the AAS descriptor of the digital twin. From the Digital Twin Registry API, the following function can be used for this lookup ",(0,s.jsx)(t.code,{children:"GET /lookup/shells"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["All Asset identifier key-value-pairs used as parameter to this lookup function are passed to the API separately via the parameter ",(0,s.jsx)(t.code,{children:"assetIds"})," in Base64 format. An example query would look like this: ",(0,s.jsx)(t.code,{children:"/lookup/shells?assetIds=ewogICJuYW1lIjogIm1hbnVmYWN0dXJlcklkIiwKICAidmFsdWUiOiAiQlBOTDc1ODg3ODc4NDlWUSIKfQ==&assetIds=ewogICJuYW1lIjogIm1hbnVmYWN0dXJlclBhcnRJZCIsCiAgInZhbHVlIjogIjk1NjU3MzYyLTgzIgp9&assetIds=ewogICJuYW1lIjogInBhcnRJbnN0YW5jZUlkIiwKICAidmFsdWUiOiAiTk8tNTc0ODY4NjM5NDI5NTUyNTM1NzY4NTI2Igp9"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"The assetIds value looks like this unencoded (but with additional spaces and linebreaks):"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["First ",(0,s.jsx)(t.code,{children:"assetIds"})," parameter:","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "manufacturerId",\n  "value": "BPNL7588787849VQ"\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Second ",(0,s.jsx)(t.code,{children:"assetIds"})," parameter:","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "manufacturerPartId",\n  "value": "95657362-83"\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Third ",(0,s.jsx)(t.code,{children:"assetIds"})," parameter:","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "partInstanceId",\n  "value": "NO-574868639429552535768526"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The lookup (for serialized parts/batches as well as catalog parts) can use the customer or the manufacturer part ID (manufacturerPartId or manufacturerPartId)."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"For a digital twin, adding the customer part ID to the specific asset IDs is optional. The main reason for this is that it cannot be guaranteed that every manufacturer knows the customer part ID for their parts. But, if they know it, it is recommended to always add the customer part ID to the specifiAssetId property for easier lookup (by customers)."}),"\n",(0,s.jsxs)(t.li,{children:["A customer that wants to do a lookup for a supplier's digital twin, must first decide what ID they want to use for the lookup. This depends on the information that is available to them.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If the customer knows the manufacturer part id, they should use the manufacturer part ID for the lookup as the manufacturer part ID is guaranteed to be available in the digital twin (as the manufacturer part ID is a mandatory property)."}),"\n",(0,s.jsx)(t.li,{children:"If the customer does not know the manufacturer part id, they must use the customer part ID (i.e., their own part id). In that case they must make sure that their suppliers register their digital twins with this information (as the customer part ID is optional) as part of the specific asset IDs. This is decision that a customer must agree upon with each of their suppliers individually."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"As a result, the AAS ID of the digital twin with this local IDs is returned. The AAS ID can then be used to retrieve details about the digital twin, i.e. the digital twin's AAS descriptor including submodel descriptors."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example result for looking up a digital twin with local IDs:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'["urn:uuid:c227a880-b82b-40f7-846c-3942ddf26c29"]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Note that this query can return more than one AAS ID depending on the local IDs uniquely identifying a digital twin or not."}),"\n",(0,s.jsx)(t.p,{children:"Currently, even if more than one digital twin is returned in a lookup, these digital twins should have different submodels assigned to them. These submodels should be disjunct and not overlap. This means that you can use the submodel to filter out the correct digital twin."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If there are returned more than one digital twin with the same submodel (based on their semanticId), this is considered an error. Processing should be canceled and an error message should be reported."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The next section describes to modify the lookup to additionally restrict the results to digital twins with a specific submodel type based on it's semanticId."}),"\n",(0,s.jsx)(t.h4,{id:"implicit-connection-between-a-part-type-twin-and-the-corresponding-part-instance-twins",children:"Implicit Connection Between a Part Type Twin and the Corresponding Part Instance Twins"}),"\n",(0,s.jsxs)(t.p,{children:["To find the corresponding part instance twins to a given part type twin, it is possible to use the lookup functionality. Searching for the specific asset IDs ",(0,s.jsx)(t.code,{children:"manufacturerId"})," and ",(0,s.jsx)(t.code,{children:"manufacturerPartId"})," and ",(0,s.jsx)(t.code,{children:'digitalTwinType = "PartInstance"'})," of the given part type twin will find all corresponding part instance twins."]}),"\n",(0,s.jsxs)(t.p,{children:["To find the corresponding part type twin to a given part instance twin, it is possible to search for the specific asset IDs ",(0,s.jsx)(t.code,{children:"manufacturerId"}),", ",(0,s.jsx)(t.code,{children:"manufacturerPartId"})," and ",(0,s.jsx)(t.code,{children:'digitalTwinType = "PartType"'})," of the given part instance twin."]}),"\n",(0,s.jsxs)(t.p,{children:["To find the corresponding part instance twins to a given part instance twin, it is possible to search for the specific asset IDs ",(0,s.jsx)(t.code,{children:"manufacturerId"}),", ",(0,s.jsx)(t.code,{children:"manufacturerPartId"})," and ",(0,s.jsx)(t.code,{children:'digitalTwinType = "PartInstance"'})," of the given part instance twin."]}),"\n",(0,s.jsx)(t.h3,{id:"unique-id-push",children:"Unique ID Push"}),"\n",(0,s.jsx)(t.p,{children:"Once the digital twin was created, optionally a Unique ID Push notification can be send by the manufacturer of the part to the customer of the serialized part of batch to inform the customer that information about a serialized part or batch is available as a digital twin. This is an optional process and both, the manufacturer of a part as well as the customer of the part must support Unique ID Push notifications."}),"\n",(0,s.jsxs)(t.p,{children:["For more information, see ",(0,s.jsx)(t.a,{href:"#unique-id-push-notifications",children:"Unique ID Push Notifications"})]}),"\n",(0,s.jsx)(t.h4,{id:"query-a-digital-twin-registry-to-find-the-digital-twin-for-this-built-in-part",children:"Query a Digital Twin Registry to find the digital twin for this built-in part"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Querying digital twins is described in ",(0,s.jsx)(t.a,{href:"#lookup-in-the-digital-twin-registry",children:"Lookup in the Digital Twin Registry"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Note that the query parameters differ depending on what type of digital twin is looked up.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Regardless of whether you want to search for serialised parts, batches or just-in-sequence (JIS) parts, you can currently use the intrinsicId as a standardised technical key to look up digital twins. You can find the corresponding filling of this attribute in the tables above, depending on which specification is involved."}),"\n",(0,s.jsxs)(t.li,{children:["However, if you already know the specification of the digital twin you are looking for before the look up, you can also carry out a search using the corresponding key attributes, like partInstanceId, batchId or a composition of ",(0,s.jsx)(t.code,{children:"jisNumber"}),", ",(0,s.jsx)(t.code,{children:"parentOrderNumber"})," (if available), ",(0,s.jsx)(t.code,{children:"jisCallDate"})," (if available). The partInstanceId with search parameter value serial number should be used for serialised parts, the batchId with search parameter value batch number for batches and a composition of ",(0,s.jsx)(t.code,{children:"jisNumber"}),", ",(0,s.jsx)(t.code,{children:"parentOrderNumber"})," (if available), ",(0,s.jsx)(t.code,{children:"jisCallDate"})," (if available) with their corresponding search parameter values for JIS parts."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["To understand why, take a look at how these digital twins are created, especially their ",(0,s.jsx)(t.a,{href:"#property-specificassetids",children:"specific asset IDs"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"The result of this query will be the AAS ID of the digital twin."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Use this AAS ID to get the AAS Descriptor including all Submodel Descriptors of this digital twin. The AAS Descriptor contains the Submodel Descriptor SerialPart or Batch (depending on the digital twin type)."}),"\n",(0,s.jsx)(t.li,{children:"Fetch the submodel SerialPart or Batch (depending on the digital twin type) from the Connector that is referenced in the corresponding Submodel Descriptor."}),"\n",(0,s.jsx)(t.li,{children:"The submodel then contains the Unique ID of the built-in part in its catenaXId attribute."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"These steps have to be repeated for all built-in parts by the manufacturer. After that, the manufacturer has all information to create the SingleLevelBomAsBuilt."}),"\n",(0,s.jsx)(t.h4,{id:"publish-traceability-data-offers-in-the-connector",children:"Publish Traceability Data Offers in the Connector"}),"\n",(0,s.jsx)(t.p,{children:"With the flexible approach described above, the actual asset structure for submodels in the Connector is no longer restricted by use case conventions and can be decided by the data provider."}),"\n",(0,s.jsx)(t.h4,{id:"data-provider-tasks",children:"Data Provider Tasks"}),"\n",(0,s.jsx)(t.p,{children:"Basically, as a data provider you have to do the following"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Implement a Backend Data Service (BDS) for every asset that is provided via the Connector. It does not have to be a different BDS for each asset - you can use the same BDS for several assets (to be verified)."}),"\n",(0,s.jsx)(t.li,{children:"The BDS must support the Asset Administration Shell Profile SSP-003 of the Submodel Service Specification (see standard CX-0002 for more details)."}),"\n",(0,s.jsx)(t.li,{children:"The BDS must use the REST API data plan for data transmission."}),"\n",(0,s.jsx)(t.li,{children:"The BDS must verify that it only returns data to the data consumer that is compliant to the asset and data offer for which data is queried and authorize the request accordingly."}),"\n"]}),"\n",(0,s.jsx)(a.default,{components:e.components}),"\n",(0,s.jsx)(t.h2,{id:"notice",children:"NOTICE"}),"\n",(0,s.jsxs)(t.p,{children:["This work is licensed under the ",(0,s.jsx)(t.a,{href:"https://creativecommons.org/licenses/by/4.0/legalcode",children:"CC-BY-4.0"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"SPDX-License-Identifier: CC-BY-4.0"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 BASF SE"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. (represented by Fraunhofer ISST & Fraunhofer IML)"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 German Edge Cloud GmbH & Co. KG"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Mercedes Benz AG"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Robert Bosch Manufacturing Solutions GmbH"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 SAP SE"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Siemens AG"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 T-Systems International GmbH"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 ZF Friedrichshafen AG"}),"\n",(0,s.jsx)(t.li,{children:"SPDX-FileCopyrightText: 2023 Contributors to the Eclipse Foundation"}),"\n",(0,s.jsxs)(t.li,{children:["Source URL: ",(0,s.jsx)(t.a,{href:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs-kits/kits/industry-core-kit",children:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs-kits/kits/industry-core-kit"})," (latest version)"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},89080:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"kits/industry-core-kit/software-development-view/parts/uniqueidpush","title":"uniqueidpush","description":"\x3c!--","source":"@site/docs-kits_versioned_docs/version-24.12/kits/industry-core-kit/software-development-view/parts/uniqueidpush.mdx","sourceDirName":"kits/industry-core-kit/software-development-view/parts","slug":"/kits/industry-core-kit/software-development-view/parts/uniqueidpush","permalink":"/docs-kits/24.12/kits/industry-core-kit/software-development-view/parts/uniqueidpush","draft":false,"unlisted":false,"tags":[],"version":"24.12","frontMatter":{"sidebar_class_name":"hidden"},"sidebar":"kits","previous":{"title":"aspect-model-overview","permalink":"/docs-kits/24.12/kits/industry-core-kit/software-development-view/parts/aspect-model-overview"},"next":{"title":"Knowledge Agents KIT","permalink":"/docs-kits/24.12/category/knowledge-agents-kit"}}');var s=i(74848),r=i(28453);const a={sidebar_class_name:"hidden"},o=void 0,d={},l=[{value:"Unique ID Push",id:"unique-id-push",level:3},{value:"Connect to Parent",id:"connect-to-parent",level:5},{value:"Connect to Child",id:"connect-to-child",level:5},{value:"Prerequisites and Constraints",id:"prerequisites-and-constraints",level:4},{value:"Unique ID Push Process Overview",id:"unique-id-push-process-overview",level:4},{value:"Connect to Parent",id:"connect-to-parent-1",level:5},{value:"Connect to Child",id:"connect-to-child-1",level:5},{value:"Schema of Unique ID Push Notifications",id:"schema-of-unique-id-push-notifications",level:4},{value:"Connect to Parent",id:"connect-to-parent-2",level:5},{value:"Connect to Child",id:"connect-to-child-2",level:5},{value:"Notification Receiver",id:"notification-receiver",level:4},{value:"EDC Asset",id:"edc-asset",level:5},{value:"EDC Policies",id:"edc-policies",level:5},{value:"Backend Data Service to Process Unique ID Push Notifications",id:"backend-data-service-to-process-unique-id-push-notifications",level:5},{value:"Notification Sender",id:"notification-sender",level:4},{value:"Connect to Parent (Sender = Supplier)",id:"connect-to-parent-sender--supplier",level:5},{value:"Connect to Child (Sender = Customer)",id:"connect-to-child-sender--customer",level:5},{value:"Mapping BPN to EDC URL with EDC Discovery API",id:"mapping-bpn-to-edc-url-with-edc-discovery-api",level:5}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"unique-id-push",children:"Unique ID Push"}),"\n",(0,s.jsx)(t.p,{children:"Unique ID Push notifications provide the possibility to push specific information to a business partner in the value chain (one level up or one level down). This can help to provide faster information to reduce necessary information collection activities (connect-to-parent) or to provide information that is not available at all at the receiver side (connect-to-child)."}),"\n",(0,s.jsx)(t.p,{children:"The solution is based on notification assets in the EDC (which is the same approach that is used for quality incidents). The notification receiver creates a notification asset in the EDC and the notification sender sends his notifications to this notification asset. As this notification asset is a general EDC asset - as for all EDC assets - access policies, usage policies and contract definitions must be created."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u270b"," It is important to understand that the receiver creates EDC asset and policies, and thus, the sender of the Unique ID push notification must check during the EDC negotiation process if the conditions the receiver offers are acceptable for the sender."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:'Currently there are two types of Unique ID Push Notifications available: "Connect to Parent" and "Connect to Child":'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Unique ID Push Notifications",src:i(53555).A+""})}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-parent",children:"Connect to Parent"}),"\n",(0,s.jsx)(t.p,{children:'Unique ID Push notifications of type "connect-to-parent" are a way for a manufacturer to notify a customer as soon as possible when a new digital twin for a part is available.'}),"\n",(0,s.jsx)(t.p,{children:"The sender of the notification is the supplier of a part item and the receiver of the notification is the customer of that part item. The Unique ID of that part is sent in the notification."}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-child",children:"Connect to Child"}),"\n",(0,s.jsx)(t.p,{children:"Unique ID Push notifications of type \"connect-to-child\" are a way for a manufacturer to notify a supplier when the supplier's part has been used (or is to be used in the case of part type) in the assembly or production of the manufacturer's product. This will result in an update of the corresponding SingleLevelUsage aspect at the supplier side."}),"\n",(0,s.jsx)(t.p,{children:"The sender of the notification is the customer of a part item or type and the receiver of the notification is the supplier of that part item or type. The Unique ID of that part, quantity and dates are sent in the notification."}),"\n",(0,s.jsx)(t.p,{children:"Connect to Parent and Connect to Child notifications can be applied to Digital Twins for part instances and for part types."}),"\n",(0,s.jsx)(t.h4,{id:"prerequisites-and-constraints",children:"Prerequisites and Constraints"}),"\n",(0,s.jsx)(t.p,{children:"In order to be able to push Unique ID(s) of part(s) to the correct partner, it is required that the sender pushing the Unique ID notification is aware of the BPN of the receiver of the notification or has enough data in its context to use BPDM functions to determine the BPN Number of the receiver."}),"\n",(0,s.jsx)(t.p,{children:"For actively pushing Unique ID notifications, an EDC is required and the data provider needs to be enabled to execute the complete process including EDC communication and HTTP Push (i.e., HTTP POST) of the payload."}),"\n",(0,s.jsx)(t.p,{children:"Secondly, EDCs are being used for the exchange and it is currently required to offer a HTTP POST API to receive the Unique ID notifications push at the receiver's side. This API needs to be registered in the EDC Catalog as a data offer and requires specific properties to be set to standardized values, as this allows discoverability. Details still tbd."}),"\n",(0,s.jsx)(t.h4,{id:"unique-id-push-process-overview",children:"Unique ID Push Process Overview"}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-parent-1",children:"Connect to Parent"}),"\n",(0,s.jsx)(t.p,{children:"How the actual process is triggered is application specific. It is recommended to trigger the push of Unique IDs towards the customer after the Goods Issue has been booked, since commonly at that point the serial numbers/batch numbers of the parts being delivered are fixed in the logistics process and shall be contained in delivery documents, EDI Messages and/or any internal representation of the received items (non-Catena-X communication)."}),"\n",(0,s.jsx)(t.p,{children:"The Unique ID push is initiated by the supplier (acting as sender) towards their customer (acting as receiver). Since the Unique ID of the asset (i.e., serial unit / batch) is unknown in the logistics process, the message needs to include local identifiers to be matched towards the information from the delivery documents and furthermore the internal data of the recipient's traceability solution."}),"\n",(0,s.jsx)(t.p,{children:"Upon receipt of the message, the customer needs to match the local identifiers with its internal traceability records and attach each Unique ID to the respective data set. How this is done is depending on the customer's internal systems:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If there is an object for incoming deliveries, this event could be updated.\nAlternatively, if only production events are tracked, the data could be integrated at this point into the data provisioning pipeline's data structure for consumed materials."}),"\n",(0,s.jsx)(t.li,{children:"In the end this enables the customer to integrate the child parts into the SingleLevelBomAsBuilt aspect."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Unique ID Push Process",src:i(93659).A+"",width:"1310",height:"562"})}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-child-1",children:"Connect to Child"}),"\n",(0,s.jsx)(t.p,{children:'How the actual process is triggered is application specific. It is recommended to trigger the push of "connect-to-child" towards the supplier earliest after the singleLevelBom aspect (AsBuilt oder AsPlanned) has been created, since at that point all relevant information is available. It is also possible to collect "connect-to-child" notification content at customer side and send this in a list to the supplier, e.g. once a day or once a week.'}),"\n",(0,s.jsx)(t.p,{children:"The Unique ID push is initiated by the customer (acting as sender) towards their supplier (acting as receiver). The body information comes from the corresponding singleLevelBom aspect."}),"\n",(0,s.jsx)(t.p,{children:"Upon receipt of the message, the supplier needs to update the corresponding singleLevelUsageAspect(s) at his side. All information required can be taken from the body in the notification."}),"\n",(0,s.jsx)(t.h4,{id:"schema-of-unique-id-push-notifications",children:"Schema of Unique ID Push Notifications"}),"\n",(0,s.jsxs)(t.p,{children:["The Unique ID Push notifications have a standardized format. Schemas of these notifications are described in detail in the Unique ID Push Open API specification. The standardized version of this API is ",(0,s.jsx)(t.a,{href:"https://eclipse-tractusx.github.io/api-hub/eclipse-tractusx.github.io/kit-industry-core-unique-id-push-openAPI-2.0.0/swagger-ui/",children:"2.0.0"}),". Version ",(0,s.jsx)(t.a,{href:"https://eclipse-tractusx.github.io/api-hub/eclipse-tractusx.github.io/kit-industry-core-unique-id-push-openAPI-2.1.0/swagger-ui/",children:"2.1.0"})," is not (yet) standardized, but backwards compatible, and extends v2.0.0 with the Connect-to-Child feature."]}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-parent-2",children:"Connect to Parent"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["For the ",(0,s.jsx)(t.code,{children:"context"})," field in the notification header, use the following string for Unique ID Push notifications as described in this KIT: ",(0,s.jsx)(t.code,{children:"IndustryCore-UniqueIDPush-ConnectToParent:<API version>"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Adding the customer part ID to the notification is optional. The main reason for this is that it cannot be guaranteed that every manufacturer knows the customer part ID for their parts. But, in case the manufacturer knows the customer and the corresponding customer part ID of its part though, it is required to always add the customer part ID to the notification."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-child-2",children:"Connect to Child"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["For the ",(0,s.jsx)(t.code,{children:"context"})," field in the notification header, use the following string for Unique ID Push notifications as described in this KIT: ",(0,s.jsx)(t.code,{children:"IndustryCore-UniqueIDPush-ConnectToChild:<API version>"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"notification-receiver",children:"Notification Receiver"}),"\n",(0,s.jsx)(t.p,{children:"Here is a short overview what the receiver has to do when they want to support Unique ID Push notifications. This is an optional feature."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"** Connect to Parent ** The receiver in this scenario is the customer of a part."}),"\n",(0,s.jsx)(t.li,{children:"** Connect to Child ** The receiver in this scenario is the supplier of a part."}),"\n",(0,s.jsx)(t.li,{children:"The receiver must create a EDC asset in their EDC that works as the endpoint for receiving notifications. Also, access & usage policies as described below must be configured."}),"\n",(0,s.jsx)(t.li,{children:"The EDC in which the notification EDC asset was created must be registered at the EDC Discovery (so that the sender can find the partner's EDC which should receive notifications)"}),"\n",(0,s.jsx)(t.li,{children:"When the Receiver receives a Unique ID Push notification, it must process this notification after it was received by the EDC (in a Backend Data Service)"}),"\n",(0,s.jsxs)(t.li,{children:["How the Receiver processes the notification is up to them, but the following steps are recommended:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Verify the correctness of the data in the notification (i.e., the receiver is actually the customer of this part)."}),"\n",(0,s.jsx)(t.li,{children:"Store the notification data for later."}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Connect to Parent"})," Use this data when the digital twin for the part into which the delivered part is built into is created instead of doing a lookup to a supplier's Digital Twin Registry."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Connect to Child"})," Use this data to update the corresponding singleLevelUsage aspect"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"edc-asset",children:"EDC Asset"}),"\n",(0,s.jsx)(t.p,{children:"For the EDC asset for receiving Unique ID Push notifications, the following properties must be set:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "@context": {\n    "edc": "https://w3id.org/edc/v0.0.1/ns/",\n    "cx-common": "https://w3id.org/catenax/ontology/common#",\n    "cx-taxo": "https://w3id.org/catenax/taxonomy#",\n    "dct": "https://purl.org/dc/terms/"\n  },\n  "@id": "{{ _.assetId }}",\n  "properties": {\n    "dct:type": { "@id": "cx-taxo:{{ _.notificationType }}" },\n    "cx-common:version": "2.1"\n  }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Properties ",(0,s.jsx)(t.code,{children:"https://purl.org/dc/terms/type"})," and ",(0,s.jsx)(t.code,{children:"https://w3id.org/catenax/ontology/common#version"})," are used to classify the asset and are explained in the ",(0,s.jsx)(t.a,{href:"https://eclipse-tractusx.github.io/docs-kits/kits/digital-twin-kit/software-development-view#registration-at-edc",children:"Digital Twin KIT"})," in more detail."]}),"\n",(0,s.jsxs)(t.p,{children:["For ",(0,s.jsx)(t.code,{children:"{{ _.notificationType }}"}),", use"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"UniqueIdPushConnectToParentNotification"})," for the Connect-To-Parent notification asset and"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"UniqueIdPushConnectToChildNotification"})," for the Connect-To-Child notification asset."]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u270b"," Note that the API version can be different depending on what Unique ID Push API version your company supports."]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"edc-policies",children:"EDC Policies"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Access Policies"}),"\nA data provider can decide on its own what access policies they want to define for their notification asset. Based on the purpose of the asset, all suppliers of the data provider should in general be allowed to send notifications to this asset. Therefore, either a public access policy or a BPN-based access policy (allowing all suppliers) should be used."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Usage Policies"}),"\nIn general, a data provider is free to decide which usage policies to define for its assets. For notifications, though, the data provider is actually the receiver of notifications, i.e., the usage policy here has the purpose to define what the data provider does or is allowed to do with the notifications. It's something the sender of the notification has to rely on and accept when sending its notification."]}),"\n",(0,s.jsx)(t.p,{children:"Keep in mind that usage policies currently aren't technically enforced by the EDC or other components."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u270b"," ",(0,s.jsx)(t.strong,{children:"Usage Policy for Unique ID Push"}),'\nThe Unique ID push notification endpoints are protected with a purpose-based usage policy and "cx.core.industrycore:1" as purpose.']}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"backend-data-service-to-process-unique-id-push-notifications",children:"Backend Data Service to Process Unique ID Push Notifications"}),"\n",(0,s.jsxs)(t.p,{children:["The receiver must setup a backend data service that provides an HTTP Endpoint for notifications. All endpoints are described in detail in the Unique ID Push Open API specification. The standardized version of this API is ",(0,s.jsx)(t.a,{href:"https://eclipse-tractusx.github.io/api-hub/eclipse-tractusx.github.io/kit-industry-core-unique-id-push-openAPI-2.0.0/swagger-ui/",children:"2.0.0"}),". Version ",(0,s.jsx)(t.a,{href:"https://eclipse-tractusx.github.io/api-hub/eclipse-tractusx.github.io/kit-industry-core-unique-id-push-openAPI-2.1.0/swagger-ui/",children:"2.1.0"})," is not (yet) standardized, but backwards compatible, and extends v2.0.0 with the Connect-to-Child feature."]}),"\n",(0,s.jsx)(t.h4,{id:"notification-sender",children:"Notification Sender"}),"\n",(0,s.jsx)(t.p,{children:"Here is a short overview what the sender has to do when they want to support Unique ID Push notifications. This is an optional feature."}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-parent-sender--supplier",children:"Connect to Parent (Sender = Supplier)"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The Sender in this scenario is the manufacturer or supplier of a part."}),"\n",(0,s.jsx)(t.li,{children:"When a new digital twin for a part was created, the manufacturer is responsible to send a Unique ID Push notification for this twin to the customer of this part."}),"\n",(0,s.jsx)(t.li,{children:"It is recommended to send this notification as soon as possible, i.e., directly after the digital twin was created."}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"connect-to-child-sender--customer",children:"Connect to Child (Sender = Customer)"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The Sender in this scenario is the consumer of the supplied part."}),"\n",(0,s.jsx)(t.li,{children:"When the supplied part is used in the production or assembly at the customer side, the customer is responsible to send a Unique ID Push notification for the twin of the used part to the supplier of this part. This is known by the customer when the singleLevelBom aspect is created or updated."}),"\n",(0,s.jsx)(t.li,{children:"This notification can be sent immediately or collected to be sent when convenient, e.g. once a day or once a week, depending on the use case."}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"mapping-bpn-to-edc-url-with-edc-discovery-api",children:"Mapping BPN to EDC URL with EDC Discovery API"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Connect to Parent"})," The sender must first find the EDC of the customer (receiver) to which the notification should be sent to. For this, the BPN of the customer is required."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Connect to Child"})," After creating the singleLevelBom aspect the sender should already know the BPN of the supplier (receiver)."]}),"\n",(0,s.jsx)(t.p,{children:"With this, the EDC Discovery can be used to query for all EDCs of the receiver. After that, the data catalog of each of these EDCs must be queried for the notification EDC asset as described above. If this notification EDC asset is found in one of these EDCs, the notification can be sent."}),"\n",(0,s.jsx)(t.p,{children:"There should only be one EDC which provides the notification EDC asset for Unique ID Push. If more than one EDC (for the same BPN/partner) are found, this is considered a misconfiguration of the corresponding partner."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},93659:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/unique_id_push_process-f39f701d98ca8a7046544c95e1dc6d14.png"}}]);