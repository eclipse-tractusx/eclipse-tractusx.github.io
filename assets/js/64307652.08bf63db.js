"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[37058],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?i.createElement(f,r(r({ref:t},d),{},{components:n})):i.createElement(f,r({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68e3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const o={id:"Notifications Development View Industry Core Kit",title:"Notifications",description:"Industry Core KIT",sidebar_position:3},r=void 0,s={unversionedId:"kits/Industry Core Kit/Software Development View/Notifications Development View Industry Core Kit",id:"kits/Industry Core Kit/Software Development View/Notifications Development View Industry Core Kit",title:"Notifications",description:"Industry Core KIT",source:"@site/docs-kits/kits/Industry Core Kit/Software Development View/page_notifications.mdx",sourceDirName:"kits/Industry Core Kit/Software Development View",slug:"/kits/Industry Core Kit/Software Development View/Notifications Development View Industry Core Kit",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/Notifications Development View Industry Core Kit",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"Notifications Development View Industry Core Kit",title:"Notifications",description:"Industry Core KIT",sidebar_position:3},sidebar:"kits",previous:{title:"Aspect Models",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/Aspect Models Development View Industry Core Kit"},next:{title:"Policies",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/Policies Development View Industry Core Kit"}},l={},c=[{value:"Process",id:"process",level:3},{value:"Notification Data Format",id:"notification-data-format",level:3},{value:"Aspect Model &quot;MessageHeaderAspect&quot;",id:"aspect-model-messageheaderaspect",level:3},{value:"Example: Aspect Model <code>MessageHeaderAspect 3.0.0</code>",id:"example-aspect-model-messageheaderaspect-300",level:4},{value:"Notification API",id:"notification-api",level:3},{value:"Preconditions and Dependencies",id:"preconditions-and-dependencies",level:4},{value:"API Specification",id:"api-specification",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Connector Asset Structure",id:"connector-asset-structure",level:4},{value:"Versioning",id:"versioning",level:4},{value:"Notification API Documentation",id:"notification-api-documentation",level:3}],d={toc:c};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Industry Core covers the foundation for message-based data sharing using notifications. Notifications are already used in several use cases, but their implementation is not yet standardized. Most use cases, although, based their implementation on the first implementation, Traceability Quality Alerts & Investigations (on which Industry Core notifications are also based). Industry Core now defines an interoperable solution for sending and receiving notifications via connectors in Catena-X. "),(0,a.kt)("p",null,"A general descriptions of notifications is given in the ",(0,a.kt)("a",{parentName:"p",href:"/docs-kits/next/kits/Industry%20Core%20Kit/Architecture%20View%20Industry%20Core%20Kit"},"Architecture View")," of this KIT."),(0,a.kt)("h3",{id:"process"},"Process"),(0,a.kt)("p",null,"A notification is sent from one Catena-X partner - called sender - to another Catena-X partner - called receiver - using simple messages in JSON format via Catena-X connector, as shown in the following figure:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Notifications Flow",src:n(66331).Z,width:"1252",height:"532"})),(0,a.kt)("p",null,"The data sharing is done via standardized connectors:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The receiver provides an asset in the connector to which notifications can be sent."),(0,a.kt)("li",{parentName:"ul"},"The sender initiates a contract negotiation for this asset to get a contract agreement and dataplane endpoint."),(0,a.kt)("li",{parentName:"ul"},"After a successful contract negotiation, the sender sends the notification via a HTTP POST request to the receiver via the dataplane endpoint from the contract agreement. "),(0,a.kt)("li",{parentName:"ul"},"All notification operations are sent via the same asset using the same contract agreement.")),(0,a.kt)("h3",{id:"notification-data-format"},"Notification Data Format"),(0,a.kt)("p",null,"This section defines the data format for notifications:"),(0,a.kt)("p",null,"Notifications must be compliant to the following JSON data format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "header": {\n      "messageId": "urn:uuid:f9a97301-a000-44dd-b9d8-78488a40c6bb",\n      "context": "IndustryCore-DigitalTwinEventAPI-ConnectToParent:2.0.0",\n      "sentDateTime": "2024-07-05T08:13:33.20733Z",\n      "senderBpn": "BPNL000000000AAA",\n      "receiverBpn": "BPNL000000000ZZZ",\n      "expectedResponseBy": "2024-07-08T08:13:33.20733Z",\n      "version": "3.0.0"\n    },\n    "content": {}\n  }\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The JSON schema for this schema is available ",(0,a.kt)("a",{target:"_blank",href:n(2797).Z},"here"),"."),(0,a.kt)("li",{parentName:"ul"},"The property ",(0,a.kt)("inlineCode",{parentName:"li"},"header")," must be compliant to the aspect model ",(0,a.kt)("a",{parentName:"li",href:"#aspect-model-messageheaderaspect"},"MessageHeaderAspect"),". ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"messageId")," of a notification must uniquely identify a single message, therefore it must not be reused. No two notifications must share the same ",(0,a.kt)("inlineCode",{parentName:"li"},"messageId"),". Only if a notification could not be sent because of data transfer errors, it MAY be re-sent with the same ",(0,a.kt)("inlineCode",{parentName:"li"},"messageId"),"."),(0,a.kt)("li",{parentName:"ul"},"It is recommended to use the following format (defined in the MessageHeaderAspect aspect model) for property ",(0,a.kt)("inlineCode",{parentName:"li"},"context"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"<domain>-<subdomain>-<object>:<[major] version>"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<domain>")," should be the name of the use case that defines the notification, e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"IndustryCore"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<subdomain>")," should be the name of the notification API, e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"DigitalTwinEventAPI"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<object>")," should be the name of the operation for which the notification is used, e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"ConnectToParent"),"."),(0,a.kt)("li",{parentName:"ul"},"Versioning only refers to major versions in both default and fallback cases. "),(0,a.kt)("li",{parentName:"ul"},"This is recommended as it allows the notification receiver to freely choose what technology to use for the backend service. If this information is not encoded into the notifcation's ",(0,a.kt)("inlineCode",{parentName:"li"},"context")," propoerty, a backend service like a message-queue technology will not know which notification operation was invoked by the sender as the endpoint information is not available in this case (compared to a REST API backend service)."))))),(0,a.kt)("li",{parentName:"ul"},"Content and structure of the property ",(0,a.kt)("inlineCode",{parentName:"li"},"content")," are not stanardized and must be defined by the use case defining the notifications API. A schema for this property must be defined as part of the OpenAPI specification of the notification API of the use case.")),(0,a.kt)("h3",{id:"aspect-model-messageheaderaspect"},'Aspect Model "MessageHeaderAspect"'),(0,a.kt)("p",null,"The Catena-X Message Header contains standardized attributes for message processing that are common across several use cases. It targets a minimal set of aspects that are required for overall message handling, but not for the processing of the business related payload part. By standardizing the message header structure, we support a harmonized modelling approach and re-use of concepts."),(0,a.kt)("p",null,"Identifier of Aspect Model:  ",(0,a.kt)("inlineCode",{parentName:"p"},"urn:samm:io.catenax.shared.message_header:3.0.0#MessageHeaderAspect")," "),(0,a.kt)("p",null,"Aspect model in GitHub:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Version 3.0.0: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/eclipse-tractusx/sldt-semantic-models/tree/main/io.catenax.shared.message_header/3.0.0"},"https://github.com/eclipse-tractusx/sldt-semantic-models/tree/main/io.catenax.shared.message_header/3.0.0"))),(0,a.kt)("h4",{id:"example-aspect-model-messageheaderaspect-300"},"Example: Aspect Model ",(0,a.kt)("inlineCode",{parentName:"h4"},"MessageHeaderAspect 3.0.0")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "header": {\n    "messageId": "urn:uuid:f9a97301-a000-44dd-b9d8-78488a40c6bb",\n    "context": "IndustryCore-DigitalTwinEventAPI-ConnectToParent:3.0.0",\n    "sentDateTime": "2024-07-05T08:13:33.20733Z",\n    "senderBpn": "BPNL000000000AAA",\n    "receiverBpn": "BPNL000000000ZZZ",\n    "expectedResponseBy": "2024-07-08T08:13:33.20733Z",\n    "version": "3.0.0"\n  },\n}\n')),(0,a.kt)("h3",{id:"notification-api"},"Notification API"),(0,a.kt)("p",null,"The notification API of a use case must be defined with an OpenAPI specification. In this specification, all artefacts of the API are defined, e.g., name of the API, operation names, and notification data formats."),(0,a.kt)("h4",{id:"preconditions-and-dependencies"},"Preconditions and Dependencies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The use case must standardize the notification API's name see ",(0,a.kt)("a",{parentName:"li",href:"#notification-api-documentation"},"Notification API Documentation")),(0,a.kt)("li",{parentName:"ul"},"For a notification API, only the HTTP method POST is allowed.")),(0,a.kt)("h4",{id:"api-specification"},"API Specification"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Notification operations are modelled as endpoints (resources). For every operation, exactly one endpoint must be defined. This endpoint only supports the HTTP POST method."),(0,a.kt)("li",{parentName:"ul"},'The path URL should be the operation name with optional "-" as word separator. '),(0,a.kt)("li",{parentName:"ul"},"The operationId must be the notification operation name. The same name should be used as ",(0,a.kt)("inlineCode",{parentName:"li"},"<object>")," in the ",(0,a.kt)("inlineCode",{parentName:"li"},"context")," property of the notification header. This redundancy is recommended to allow the notification receiver to freely choose what technology to use for the backend service, e.g, a REST API or message-queue technology."),(0,a.kt)("li",{parentName:"ul"},"The notification is the actual request body of the HTTP POST method. Its schema must also be defined in the specification.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")," ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/api-hub/eclipse-tractusx.github.io/3.0.0/example-digital-twin-event-api.yaml"},"OpenAPI specification for Digital Twin Event API")," "),(0,a.kt)("h4",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"The following HTTP response codes should be defined for all notification operations:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Code"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"200"),(0,a.kt)("td",{parentName:"tr",align:null},"OK"),(0,a.kt)("td",{parentName:"tr",align:null},"Indicates that the request has succeeded.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"4xx"),(0,a.kt)("td",{parentName:"tr",align:null},"ERROR"),(0,a.kt)("td",{parentName:"tr",align:null},"The notification cannot be processed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"5xx"),(0,a.kt)("td",{parentName:"tr",align:null},"ERROR"),(0,a.kt)("td",{parentName:"tr",align:null},"The notification cannot be processed.")))),(0,a.kt)("p",null,"A response body MAY also be defined (e.g., see Feedback notification operation in the example above)."),(0,a.kt)("p",null,"These error codes are currently optional as the Catena-X connector does not yet return correct error messages from backend services. These error codes will become mandatory once the connector returns correct error messages from backend services."),(0,a.kt)("h4",{id:"connector-asset-structure"},"Connector Asset Structure"),(0,a.kt)("p",null,"For a notification API, exactly one asset in the connector must be defined. All notifications operations of the API must be invoked through this asset. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The property ",(0,a.kt)("inlineCode",{parentName:"li"},"http://purl.org/dc/terms/type")," must reference the name of the notification API as defined in the Catena-X taxonomy published under ",(0,a.kt)("a",{parentName:"li",href:"https://w3id.org/catenax/taxonomy"},"https://w3id.org/catenax/taxonomy"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example of an asset definition for a notification API:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@id": "DigitalTwinEventAPI",\n  "@type": "Asset",\n  "properties": {\n    "dct:type": {\n      "@id": "cx-taxo:DigitalTwinEventAPI"\n    },\n    "cx-common:version": "3.0",\n  },\n  "dataAddress": {},\n  "@context": {\n    "dct": "http://purl.org/dc/terms/",\n    "cx-taxo": "https://w3id.org/catenax/taxonomy#",\n    "cx-common": "https://w3id.org/catenax/ontology/common#"\n  }\n}\n')),(0,a.kt)("h4",{id:"versioning"},"Versioning"),(0,a.kt)("p",null,"Versioning of the notification API must follow the Catena-X guidelines for versioning. For every new major version of a notification API, a new connector asset must be created. If, e.g., a REST API is used as backend notification receiver, the incoming notifications can be fowarded to the correct REST API version via the corresponding connector asset, as depicted in the following figure:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Notifications Flow",src:n(58802).Z,width:"921",height:"321"})),(0,a.kt)("p",null,"The API's version is not only documented in the notification's connector asset (property ",(0,a.kt)("inlineCode",{parentName:"p"},"https://w3id.org/catenax/ontology/common#version"),"), but also in the OpenAPI specification as well as in a notification's ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," property."),(0,a.kt)("h3",{id:"notification-api-documentation"},"Notification API Documentation"),(0,a.kt)("p",null,"A use case defining a notification API as part of its standard must document the following artifacts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All notification data formats must be documented either as separate JSON schema or (also in JSON schema) as part of the notification API's OpenAPI specification."),(0,a.kt)("li",{parentName:"ul"},"The notification API must be documented with an OpenAPI specification and must be published according to ",(0,a.kt)("a",{parentName:"li",href:"/docs/release/trg-1/trg-1-08/"},"TRG 1.08 - Interface documentation (APIs)"),"."),(0,a.kt)("li",{parentName:"ul"},"For a standardized use case, the name of the notification API (used in property ",(0,a.kt)("inlineCode",{parentName:"li"},"http://purl.org/dc/terms/type"),") must be defined in the Catena-X taxonomy published under ",(0,a.kt)("a",{parentName:"li",href:"https://w3id.org/catenax/taxonomy"},"https://w3id.org/catenax/taxonomy"),"."),(0,a.kt)("li",{parentName:"ul"},"The notification API asset in the connector must define necessary properties as defined in ",(0,a.kt)("a",{parentName:"li",href:"#connector-asset-structure"},"Connector Asset Structure"),".")))}p.isMDXComponent=!0},2797:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/files/notification.schema-df6bb61eb370c7e68405876073adc9a9.json"},58802:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/notifications_connector_versioning-67a26e076a057e8c7ee54dfa4f16f7f8.svg"},66331:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/notifications_process-f76c1cca4481f3adbbfaddbd255025b7.svg"}}]);