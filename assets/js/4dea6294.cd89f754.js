"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[5492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(m,l(l({ref:t},s),{},{components:n})):a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},92265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},l="Setting up a local EDC Data Plane",i={unversionedId:"kits/tractusx-edc/docs/kit/operation-view/page04_local_setup_dataplane",id:"version-23.12/kits/tractusx-edc/docs/kit/operation-view/page04_local_setup_dataplane",title:"Setting up a local EDC Data Plane",description:"Basics",source:"@site/docs-kits_versioned_docs/version-23.12/kits/tractusx-edc/docs/kit/operation-view/page04_local_setup_dataplane.md",sourceDirName:"kits/tractusx-edc/docs/kit/operation-view",slug:"/kits/tractusx-edc/docs/kit/operation-view/page04_local_setup_dataplane",permalink:"/docs-kits/23.12/kits/tractusx-edc/docs/kit/operation-view/page04_local_setup_dataplane",draft:!1,tags:[],version:"23.12",frontMatter:{},sidebar:"kits",previous:{title:"Setting up a local EDC Control Plane",permalink:"/docs-kits/23.12/kits/tractusx-edc/docs/kit/operation-view/page03_local_setup_controlplane"},next:{title:"Helm Charts",permalink:"/docs-kits/23.12/kits/tractusx-edc/charts/"}},p={},c=[{value:"Basics",id:"basics",level:2},{value:"Building",id:"building",level:2},{value:"Example Configuration",id:"example-configuration",level:2},{value:"Example configuration.properties",id:"example-configurationproperties",level:3},{value:"Example logging.properties",id:"example-loggingproperties",level:3},{value:"Example opentelemetry.properties",id:"example-opentelemetryproperties",level:3},{value:"Running",id:"running",level:2}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-a-local-edc-data-plane"},"Setting up a local EDC Data Plane"),(0,r.kt)("h2",{id:"basics"},"Basics"),(0,r.kt)("p",null,"The EDC is split into control and data plane.\nThe data plane handles the actual data transfer between parties.\nThe control plane manages the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Resource Management (e.g. Assets, Policies & Contract Definitions CRUD)"),(0,r.kt)("li",{parentName:"ul"},"Contract Offering & Contract Negotiation"),(0,r.kt)("li",{parentName:"ul"},"Data Transfer Coordination / Management")),(0,r.kt)("p",null,"The EDC data plane can run as a single container on your local machine.\nThe following is a short overview of the necessary steps to start up the default configuration."),(0,r.kt)("h2",{id:"building"},"Building"),(0,r.kt)("p",null,"Tractus-X EDC is build with Gradle. The following command creates the default data plane as a docker container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./gardlew :edc-dataplane:edc-dataplane-hashicorp-vault:dockerize\n")),(0,r.kt)("h2",{id:"example-configuration"},"Example Configuration"),(0,r.kt)("p",null,"The following commands can be used to create the necessary configuration files for the EDC container.\nThey assume sane - but unsafe - defaults. An explanation of the respective parameters can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-tractusx/tractusx-edc/blob/main/edc-dataplane/edc-dataplane-hashicorp-vault/README.md"},"here"),"."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The following configuration is for testing purposes only. Do not use it in production.")),(0,r.kt)("h3",{id:"example-configurationproperties"},"Example configuration.properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Create configuration.properties\nexport CONFIGURATION_PROPERTIES_FILE=$(mktemp /tmp/configuration.properties.XXXXXX)\ncat << 'EOF' > ${CONFIGURATION_PROPERTIES_FILE}\n\nweb.http.default.port=8080\nweb.http.default.path=/api\nweb.http.public.port=8185\nweb.http.public.path=/public\nweb.http.control.port=9999\nweb.http.control.path=/api/dataplane/control\n\n# Validation endpoint of controlplane\nedc.dataplane.token.validation.endpoint=http://controlplane:9999/api/controlplane/control/token\n\n# EDC hostname\nedc.hostname=localhost\n\n# HashiCorp vault related configuration\nedc.vault.hashicorp.url=http://vault\nedc.vault.hashicorp.token=55555555-6666-7777-8888-999999999999\nedc.vault.hashicorp.timeout.seconds=30\nEOF\n")),(0,r.kt)("h3",{id:"example-loggingproperties"},"Example logging.properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Create logging.properties\nexport LOGGING_PROPERTIES_FILE=$(mktemp /tmp/logging.properties.XXXXXX)\ncat << 'EOF' > ${LOGGING_PROPERTIES_FILE}\n.level=INFO\norg.eclipse.edc.level=ALL\nhandlers=java.util.logging.ConsoleHandler\njava.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter\njava.util.logging.ConsoleHandler.level=ALL\njava.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n\nEOF\n")),(0,r.kt)("h3",{id:"example-opentelemetryproperties"},"Example opentelemetry.properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Create opentelemetry.properties\nexport OPENTELEMETRY_PROPERTIES_FILE=$(mktemp /tmp/opentelemetry.properties.XXXXXX)\ncat << 'EOF' > ${OPENTELEMETRY_PROPERTIES_FILE}\notel.javaagent.enabled=true\notel.javaagent.debug=false\nEOF\n")),(0,r.kt)("h2",{id:"running"},"Running"),(0,r.kt)("p",null,"Once the configuration is created, the container can be run directly via docker."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run \\\n  -p 8080:8080 -p 8185:8185 -p 9999:9999 -p 9090:9090 \\\n  -v ${CONFIGURATION_PROPERTIES_FILE:-/dev/null}:/app/configuration.properties \\\n  -v ${LOGGING_PROPERTIES_FILE:-/dev/null}:/app/logging.properties \\\n  -v ${OPENTELEMETRY_PROPERTIES_FILE:-/dev/null}:/app/opentelemetry.properties \\\n  -i edc-dataplane-hashicorp-vault:latest\n")))}u.isMDXComponent=!0}}]);