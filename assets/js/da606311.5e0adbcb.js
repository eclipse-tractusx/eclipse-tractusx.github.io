"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[52518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||a;return n?i.createElement(m,l(l({ref:t},d),{},{components:n})):i.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:o,l[1]=r;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},44087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(87462),o=(n(67294),n(3905));const a={id:"irs_admin_guide",title:"Administration Guide",description:"Administration Guide",sidebar_position:3},l=void 0,r={unversionedId:"kits/Data Chain Kit/Documentation/irs_admin_guide",id:"version-24.03/kits/Data Chain Kit/Documentation/irs_admin_guide",title:"Administration Guide",description:"Administration Guide",source:"@site/docs-kits_versioned_docs/version-24.03/kits/Data Chain Kit/Documentation/admin_guide.md",sourceDirName:"kits/Data Chain Kit/Documentation",slug:"/kits/Data Chain Kit/Documentation/irs_admin_guide",permalink:"/docs-kits/24.03/kits/Data Chain Kit/Documentation/irs_admin_guide",draft:!1,tags:[],version:"24.03",sidebarPosition:3,frontMatter:{id:"irs_admin_guide",title:"Administration Guide",description:"Administration Guide",sidebar_position:3},sidebar:"kits",previous:{title:"Updates an existing policy with new validUntil value.",permalink:"/docs-kits/24.03/kits/Data Chain Kit/Software Development View/Job Api/update-allowed-policy"},next:{title:"Architecture documentation (arc42)",permalink:"/docs-kits/24.03/kits/Data Chain Kit/Documentation/irs_arc42"}},s={},c=[{value:"Data Chain KIT",id:"data-chain-kit",level:3},{value:"System Overview",id:"system-overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Deployment using Helm",id:"deployment-using-helm",level:3},{value:"Deployment using ArgoCD",id:"deployment-using-argocd",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Spring Configuration",id:"spring-configuration",level:2},{value:"Helm configuration IRS (values.yaml)",id:"helm-configuration-irs-valuesyaml",level:3},{value:"Values explained",id:"values-explained",level:4},{value:"irs-url",id:"irs-url",level:5},{value:"ingress",id:"ingress",level:4},{value:"digital-twin-registry-url",id:"digital-twin-registry-url",level:5},{value:"discovery-finder-url",id:"discovery-finder-url",level:5},{value:"semantics-hub-url",id:"semantics-hub-url",level:5},{value:"bpdm-url",id:"bpdm-url",level:5},{value:"oauth2-token-uri",id:"oauth2-token-uri",level:5},{value:"oauth2-jwkset-uri",id:"oauth2-jwkset-uri",level:5},{value:"grafana-url",id:"grafana-url",level:5},{value:"edc-controlplane-endpoint-data",id:"edc-controlplane-endpoint-data",level:5},{value:"connectorEndpointService.cacheTTL",id:"connectorendpointservicecachettl",level:5},{value:"OAuth2 Configuration",id:"oauth2-configuration",level:3},{value:"Semantic Model Provisioning",id:"semantic-model-provisioning",level:4},{value:"Policy store configuration",id:"policy-store-configuration",level:4},{value:"Use existing EDC consumer",id:"use-existing-edc-consumer",level:3},{value:"EDC consumer configuration",id:"edc-consumer-configuration",level:3},{value:"Secrets",id:"secrets",level:3},{value:"common-client-id",id:"common-client-id",level:4},{value:"common-client-secret",id:"common-client-secret",level:4},{value:"minio-username",id:"minio-username",level:4},{value:"minio-password",id:"minio-password",level:4},{value:"edc-api-key",id:"edc-api-key",level:4},{value:"vault-token",id:"vault-token",level:4},{value:"grafana-username",id:"grafana-username",level:4},{value:"grafana-password",id:"grafana-password",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Proxy support",id:"proxy-support",level:3},{value:"Troubleshooting FAQ",id:"troubleshooting-faq",level:3},{value:"Minio",id:"minio",level:4},{value:"Error: &quot;The specified bucket does not exist&quot;",id:"error-the-specified-bucket-does-not-exist",level:5},{value:"Different Job model versions maintenance",id:"different-job-model-versions-maintenance",level:4}],d={toc:c};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Datachain kit banner",src:n(62870).Z,width:"285",height:"244"})),(0,o.kt)("h3",{id:"data-chain-kit"},"Data Chain KIT"),(0,o.kt)("h2",{id:"system-overview"},"System Overview"),(0,o.kt)("p",null,"The deployment contains the components required to connect the IRS to an existing Catena-X network. This includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'IRS with Minio - part of the "irs-helm" Helm chart'),(0,o.kt)("li",{parentName:"ul"},'EDC Consumer (controlplane & dataplane) - part of the "irs-edc-consumer" Helm chart')),(0,o.kt)("p",null,"Everything else needs to be provided externally."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://eclipse-tractusx.github.io/item-relationship-service/docs/assets/adminguide/adminguide_000.png",alt:"adminguide_000"})),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"The IRS Helm repository can be found here:\n",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/item-relationship-service/index.yaml"},"https://eclipse-tractusx.github.io/item-relationship-service/index.yaml")),(0,o.kt)("p",null,'Use the latest release of the "irs-helm" chart.\nIt contains all required dependencies.'),(0,o.kt)("p",null,"If you also want to set up your own EDC consumer, use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-tractusx/tractusx-edc/tree/main/charts/tractusx-connector"},"tractusx-connector")," chart."),(0,o.kt)("p",null,"Supply the required configuration properties (see chapter ",(0,o.kt)("a",{parentName:"p",href:"configuration.adoc#_configuration"},"Configuration"),") in a values.yaml file or override the settings directly."),(0,o.kt)("h3",{id:"deployment-using-helm"},"Deployment using Helm"),(0,o.kt)("p",null,"Add the IRS Helm repository:"),(0,o.kt)("p",null,"$ helm repo add irs ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/item-relationship-service"},"https://eclipse-tractusx.github.io/item-relationship-service")),(0,o.kt)("p",null,"Then install the Helm chart into your cluster:"),(0,o.kt)("p",null,"$ helm install -f your-values.yaml irs-app irs/irs-helm"),(0,o.kt)("h3",{id:"deployment-using-argocd"},"Deployment using ArgoCD"),(0,o.kt)("p",null,"Create a new Helm chart and use the IRS as a dependency."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  - name: irs-helm\n    repository: https://eclipse-tractusx.github.io/item-relationship-service\n    version: 6.x.x\n  - name: tractusx-connector # optional\n    repository: https://eclipse-tractusx.github.io/tractusx-edc\n    version: 0.5.x\n\n")),(0,o.kt)("p",null,"Then provide your configuration as the values.yaml of that chart."),(0,o.kt)("p",null,"Create a new application in ArgoCD and point it to your repository / Helm chart folder."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Take the following template and adjust the configuration parameters (","<","placeholders> mark the relevant spots).\nYou can define the URLs as well as most of the secrets yourself."),(0,o.kt)("p",null,"The OAuth2, MIW and Vault configuration / secrets depend on your setup and might need to be provided externally."),(0,o.kt)("h2",{id:"spring-configuration"},"Spring Configuration"),(0,o.kt)("p",null,"The IRS application is configured using the Spring configuration mechanism. The main configuration file is the ",(0,o.kt)("inlineCode",{parentName:"p"},"application.yaml"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'server:\n  port: 8080 # The port the main application API listens on\n  trustedPort: ${SERVER_TRUSTED_PORT:} # The port used for the unsecured, internal API - if empty, the main port is used\n\nspring:\n  application:\n    name: item-relationship-service\n  security:\n    oauth2:\n      client:\n        registration:\n          common:\n            authorization-grant-type: client_credentials\n            client-id: ${OAUTH2_CLIENT_ID} # OAuth2 client ID used to authenticate with the IAM\n            client-secret: ${OAUTH2_CLIENT_SECRET} # OAuth2 client secret used to authenticate with the IAM\n          portal:\n            authorization-grant-type: client_credentials\n            client-id: ${PORTAL_OAUTH2_CLIENT_ID} # OAuth2 client ID used to authenticate with the IAM\n            client-secret: ${PORTAL_OAUTH2_CLIENT_SECRET} # OAuth2 client secret used to authenticate with the IAM\n        provider:\n          common:\n            token-uri: ${OAUTH2_CLIENT_TOKEN_URI:https://default} # OAuth2 endpoint to request tokens using the client credentials\n          portal:\n            token-uri: ${PORTAL_OAUTH2_CLIENT_TOKEN_URI:https://default} # OAuth2 endpoint to request tokens using the client credentials\n      resourceserver:\n        jwt:\n          jwk-set-uri: ${OAUTH2_JWK_SET_URI:https://default} # OAuth2 endpoint to request the JWK set\n\nmanagement: # Spring management API config, see https://spring.io/guides/gs/centralized-configuration/\n  endpoints:\n    web:\n      exposure:\n        include: health, threaddump, loggers, prometheus, info, metrics\n  endpoint:\n    health:\n      probes:\n        enabled: true\n      group:\n        readiness:\n          include: readinessState, diskSpace\n      show-details: always\n  health:\n    livenessstate:\n      enabled: true\n    readinessstate:\n      enabled: true\n    dependencies:\n      enabled: false\n      urls: { }\n  metrics:\n    distribution:\n      percentiles-histogram:\n        http: true\n    tags:\n      application: ${spring.application.name}\n  server:\n    port: 4004\n\nlogging:\n  pattern:\n    console: "%d %-5level %logger : %msg%n"\n  level:\n    root: WARN\n    org.springframework: INFO\n    org.eclipse.tractusx.irs: INFO\n\nspringdoc: # API docs configuration\n  api-docs:\n    path: /api/api-docs\n  swagger-ui:\n    path: /api/swagger-ui\n  writer-with-order-by-keys: true\n\nirs: # Application config\n  apiUrl: "${IRS_API_URL:http://localhost:8080}" # Public URL of the application, used in Swagger UI\n  job:\n    callback:\n      timeout:\n        read: PT90S # HTTP read timeout for the Job API callback\n        connect: PT90S # HTTP connect timeout for the Job API callback\n    cleanup: # Determines how often the JobStore is being cleaned up. Different schedulers for completed and failed jobs.\n      scheduler:\n        #          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 second (0-59)\n        #          \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n        #          \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n        #          \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n        #          \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12) (or JAN-DEC)\n        #          \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 7)\n        #          \u2502 \u2502 \u2502 \u2502 \u2502 \u2502          (or MON-SUN -- 0 or 7 is Sunday)\n        #          \u2502 \u2502 \u2502 \u2502 \u2502 \u2502\n        completed: 0 0 * * * * # every hour\n        failed: 0 0 * * * * # every hour\n    jobstore:\n      ttl: # Determines how long jobs are stored in the respective state. After the TTL has expired, the job will be removed by the cleanup scheduler.\n        failed: P7D # ISO 8601 Duration\n        completed: P7D # ISO 8601 Duration\n      cron:\n        expression: "*/10 * * * * ?" # Determines how often the number of stored jobs is updated in the metrics API.\n\nblobstore:\n  endpoint: "${MINIO_URL}" # S3 compatible API endpoint (e.g. Minio)\n  accessKey: "${MINIO_ACCESS_KEY}" # S3 access key\n  secretKey: "${MINIO_SECRET_KEY}" # S3 secret key\n  bucketName: irsbucket # the name of the S3 bucket to be created / used by the IRS\n\npolicystore:\n  persistence:\n    endpoint: "${MINIO_URL}" # S3 compatible API endpoint (e.g. Minio)\n    accessKey: "${MINIO_ACCESS_KEY}" # S3 access key\n    secretKey: "${MINIO_SECRET_KEY}" # S3 secret key\n    bucketName: irs-policy-bucket # the name of the S3 bucket to be created / used by the policy store\n    daysToLive: -1 # number of days to keep policies in the store, use -1 to disable cleanup\n\nresilience4j:\n  retry: # REST client retry configuration\n    configs:\n      default:\n        maxAttempts: 3 # How often failed REST requests will be retried\n        waitDuration: 10s # How long to wait between each retry\n        enableExponentialBackoff: true # Whether subsequent retries will delay exponentially or not\n        exponentialBackoffMultiplier: 2 # Multiplier for the exponential delay\n        ignore-exceptions: # Do not retry on the listed exceptions\n          - org.springframework.web.client.HttpClientErrorException.NotFound\n          - org.eclipse.tractusx.irs.edc.client.ItemNotFoundInCatalogException\n    instances:\n      registry:\n        baseConfig: default\n\nirs-edc-client:\n  callback-url: ${EDC_TRANSFER_CALLBACK_URL:} # The URL where the EDR token callback will be sent to.\n  controlplane:\n    request-ttl: ${EDC_CONTROLPLANE_REQUEST_TTL:PT10M} # How long to wait for an async EDC negotiation request to finish, ISO 8601 Duration\n    endpoint:\n      data: ${EDC_CONTROLPLANE_ENDPOINT_DATA:} # URL of the EDC consumer controlplane data endpoint\n      catalog: ${EDC_CONTROLPLANE_ENDPOINT_CATALOG:/v2/catalog/request} # EDC consumer controlplane catalog path\n      contract-negotiation: ${EDC_CONTROLPLANE_ENDPOINT_CONTRACT_NEGOTIATION:/v2/contractnegotiations} # EDC consumer controlplane contract negotiation path\n      transfer-process: ${EDC_CONTROLPLANE_ENDPOINT_TRANSFER_PROCESS:/v2/transferprocesses} # EDC consumer controlplane transfer process path\n      state-suffix: ${EDC_CONTROLPLANE_ENDPOINT_DATA:/state} # Path of the state suffix for contract negotiation and transfer process\n    provider-suffix: ${EDC_CONTROLPLANE_PROVIDER_SUFFIX:/api/v1/dsp} # Suffix to add to data requests to the EDC provider controlplane\n    catalog-limit: ${EDC_CONTROLPLANE_CATALOG_LIMIT:1000} # Max number of items to fetch from the EDC provider catalog\n    catalog-page-size: ${EDC_CONTROLPLANE_CATALOG_PAGE_SIZE:50} # Number of items to fetch at one page from the EDC provider catalog when using pagination\n    api-key:\n      header: ${EDC_API_KEY_HEADER:} # API header key to use in communication with the EDC consumer controlplane\n      secret: ${EDC_API_KEY_SECRET:} # API header secret to use in communication with the EDC consumer controlplane\n    datareference:\n      storage:\n        duration: PT1H # Time after which stored data references will be cleaned up, ISO 8601 Duration\n\n  submodel:\n    request-ttl: ${EDC_SUBMODEL_REQUEST_TTL:PT10M} # How long to wait for an async EDC submodel retrieval to finish, ISO 8601 Duration\n    urn-prefix: ${EDC_SUBMODEL_URN_PREFIX:/urn} # A prefix used to identify URNs correctly in the submodel endpoint address\n    timeout:\n      read: PT90S # HTTP read timeout for the submodel client\n      connect: PT90S # HTTP connect timeout for the submodel client\n\n  catalog:\n    # IRS will only negotiate contracts for offers with a policy as defined in the acceptedPolicies list.\n    # If a requested asset does not provide one of these policies, a tombstone will be created and this node will not be processed.\n    acceptedPolicies:\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: "ID 3.0 Trace"\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: "ID 3.1 Trace"\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: R2_Traceability\n      - leftOperand: "FrameworkAgreement.traceability"\n        operator: "eq"\n        rightOperand: "active"\n      - leftOperand: "Membership"\n        operator: "eq"\n        rightOperand: "active"\n  connectorEndpointService:\n    cacheTTL: PT24H  # Time to live for ConnectorEndpointService for fetchConnectorEndpoints method cache\n\ndigitalTwinRegistry:\n  type: ${DIGITALTWINREGISTRY_TYPE:decentral} # The type of DTR. This can be either "central" or "decentral". If "decentral", descriptorEndpoint, shellLookupEndpoint and oAuthClientId is not required.\n  descriptorEndpoint: ${DIGITALTWINREGISTRY_DESCRIPTOR_URL:} # The endpoint to retrieve AAS descriptors from the DTR, must contain the placeholder {aasIdentifier}\n  shellLookupEndpoint: ${DIGITALTWINREGISTRY_SHELL_LOOKUP_URL:} # The endpoint to lookup shells from the DTR, must contain the placeholder {assetIds}\n  shellDescriptorTemplate: ${DIGITALTWINREGISTRY_SHELL_DESCRIPTOR_TEMPLATE:/shell-descriptors/{aasIdentifier}} # The path to retrieve AAS descriptors from the decentral DTR, must contain the placeholder {aasIdentifier}\n  lookupShellsTemplate: ${DIGITALTWINREGISTRY_QUERY_SHELLS_PATH:/lookup/shells?assetIds={assetIds}} # The path to lookup shells from the decentral DTR, must contain the placeholder {assetIds}\n  oAuthClientId: common # ID of the OAuth2 client registration to use, see config spring.security.oauth2.client\n  discoveryFinderUrl: ${DIGITALTWINREGISTRY_DISCOVERY_FINDER_URL:} # The endpoint to discover EDC endpoints to a particular BPN.\n  timeout:\n    read: PT90S # HTTP read timeout for the digital twin registry client\n    connect: PT90S # HTTP connect timeout for the digital twin registry client\n\nsemanticshub:\n  # The endpoint to retrieve the json schema of a model from the semantic hub. If specified, must contain the placeholder {urn}.\n  modelJsonSchemaEndpoint: "${SEMANTICSHUB_URL:}"\n  url: ""\n\n  # Path to directory on filesystem where semantic models can be loaded from.\n  # The filenames inside the directory must match the Base64 encoded URNs of the models.\n  localModelDirectory: ""\n  cleanup:\n    #          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 second (0-59)\n    #          \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #          \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #          \u2502 \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #          \u2502 \u2502 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12) (or JAN-DEC)\n    #          \u2502 \u2502 \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 7)\n    #          \u2502 \u2502 \u2502  \u2502 \u2502 \u2502          (or MON-SUN -- 0 or 7 is Sunday)\n    #          \u2502 \u2502 \u2502  \u2502 \u2502 \u2502\n    scheduler: 0 0 23 * * * # How often to clear the semantic model cache\n  defaultUrns: "${SEMANTICSHUB_DEFAULT_URNS:urn:bamm:io.catenax.serial_part:1.0.0#SerialPart}" # IDs of models to cache at IRS startup\n  oAuthClientId: common # ID of the OAuth2 client registration to use, see config spring.security.oauth2.client\n  timeout:\n    read: PT90S # HTTP read timeout for the semantic hub client\n    connect: PT90S # HTTP connect timeout for the semantic hub client\n  pageSize: "${SEMANTICSHUB_PAGE_SIZE:100}"\n\nbpdm:\n  bpnEndpoint: "${BPDM_URL:}" # Endpoint to resolve BPNs, must contain the placeholders {partnerId} and {idType}\n  oAuthClientId: common # ID of the OAuth2 client registration to use, see config spring.security.oauth2.client\n  timeout:\n    read: PT90S # HTTP read timeout for the bpdm client\n    connect: PT90S # HTTP connect timeout for the bpdm client\n\n# ESS Module specific properties\ness:\n  localBpn: ${ESS_LOCAL_BPN:} # BPN value of product - used during EDC notification communication\n  localEdcEndpoint: ${ESS_EDC_URL:} # EDC base URL - used for creation of EDC assets for ESS notifications and as sender EDC for sent notifications\n  assetsPath: ${EDC_MANAGEMENT_PATH:/management/v3/assets} # EDC management API "assets" path - used for notification asset creation\n  policydefinitionsPath: ${EDC_MANAGEMENT_PATH:/management/v2/policydefinitions} # EDC management API "policydefinitions" path - used for notification policy definition creation\n  contractdefinitionsPath: ${EDC_MANAGEMENT_PATH:/management/v2/contractdefinitions} # EDC management API "contractdefinitions" path - used for notification contract definitions creation\n  irs:\n    url: "${IRS_URL:}" # IRS Url to connect with\n  discovery:\n    oAuthClientId: portal # ID of the OAuth2 client registration to use, see config spring.security.oauth2.client\n    timeout:\n      read: PT90S # HTTP read timeout for the discovery client\n      connect: PT90S # HTTP connect timeout for the discovery client\n    mockEdcResult: { } # Mocked BPN Investigation results\n    mockRecursiveEdcAsset: # Mocked BPN Recursive Investigation results\n\napiAllowedBpn: ${API_ALLOWED_BPN:BPNL00000001CRHK} # BPN value that is allowed to access IRS API\n\n# OAuth2 JWT token parse config. This configures the structure IRS expects when parsing the IRS role of an access token.\noauth:\n  resourceClaim: "resource_access" # Name of the JWT claim for roles\n  irsNamespace: "Cl20-CX-IRS" # Namespace for the IRS roles\n  roles: "roles" # Name of the list of roles within the IRS namespace\n')),(0,o.kt)("h3",{id:"helm-configuration-irs-valuesyaml"},"Helm configuration IRS (values.yaml)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'#####################\n# IRS Configuration #\n#####################\nirsUrl:  # "https://<irs-url>"\nbpn:  # BPN for this IRS instance; only users with this BPN are allowed to access the API\ningress:\n  enabled: false\n\nmanagement:\n  health:\n    dependencies:\n      enabled: false  # Flag to determine if external service healthcheck endpoints should be checked\n      urls: {}  # Map of services with corresponding healthcheck endpoint url\'s. Example:\n        # service_name: http://service_name_host.com/health\n\ndigitalTwinRegistry:\n  type: decentral  # The type of DTR. This can be either "central" or "decentral". If "decentral", descriptorEndpoint, shellLookupEndpoint and oAuthClientId is not required.\n  url:  # "https://<digital-twin-registry-url>"\n  descriptorEndpoint: >-\n    {{ tpl (.Values.digitalTwinRegistry.url | default "") . }}/shell-descriptors/{aasIdentifier}\n  shellLookupEndpoint: >-\n    {{ tpl (.Values.digitalTwinRegistry.url | default "") . }}/lookup/shells?assetIds={assetIds}\n  shellDescriptorTemplate: /shell-descriptors/{aasIdentifier}  # The path to retrieve AAS descriptors from the decentral DTR, must contain the placeholder {aasIdentifier}\n  lookupShellsTemplate: /lookup/shells?assetIds={assetIds}  # The path to lookup shells from the decentral DTR, must contain the placeholder {assetIds}\n  discoveryFinderUrl:  # "https://<discovery-finder-url>\nsemanticshub:\n  url:  # https://<semantics-hub-url>\n  pageSize: "100"  # Number of aspect models to retrieve per page\n  modelJsonSchemaEndpoint: >-\n    {{- if .Values.semanticshub.url }}\n    {{- tpl (.Values.semanticshub.url | default "" ) . }}/{urn}/json-schema\n    {{- end }}\n  defaultUrns: >-\n  #    urn:bamm:io.catenax.serial_part:1.0.0#SerialPart\n  #    ,urn:bamm:com.catenax.single_level_bom_as_built:1.0.0#SingleLevelBomAsBuilt\n  localModels:\n#   Map of Base64 encoded strings of semantic models. The key must be the Base64 encoded full URN of the model.\n#   Example for urn:bamm:io.catenax.serial_part:1.0.0#SerialPart:\n#    dXJuOmJhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoxLjAuMCNTZXJpYWxQYXJ0: \nbpdm:\n  url:  # https://<bpdm-url>\n  bpnEndpoint: >-\n    {{- if .Values.bpdm.url }}\n    {{- tpl (.Values.bpdm.url | default "") . }}/api/catena/legal-entities/{partnerId}?idType={idType}\n    {{- end }}\nminioUser: "minio"  # <minio-username>\nminioPassword:  # <minio-password>\nminioUrl: "http://{{ .Release.Name }}-minio:9000"\noauth2:\n  clientId:  # <oauth2-client-id>\n  clientSecret:  # <oauth2-client-secret>\n  clientTokenUri:  # <oauth2-token-uri>\n  jwkSetUri:  # <oauth2-jwkset-uri>\nportal:\n  oauth2:\n    clientId:  # <portal-client-id>\n    clientSecret:  # <portal-client-secret>\nedc:\n  controlplane:\n    endpoint:\n      data: ""  # <edc-controlplane-endpoint-data>\n      catalog: /v2/catalog/request  # EDC consumer controlplane catalog path\n      contractnegotiation: /v2/contractnegotiations  # EDC consumer controlplane contract negotiation path\n      transferprocess: /v2/transferprocesses  # EDC consumer controlplane transfer process path\n      statesuffix: /state  # Path of the state suffix for contract negotiation and transfer process\n    request:\n      ttl: PT10M  # Requests to controlplane will time out after this duration (see https://en.wikipedia.org/wiki/ISO_8601#Durations)\n    provider:\n      suffix: /api/v1/dsp\n    catalog:\n      limit: 1000  # Max number of catalog items to retrieve from the controlplane\n      pagesize: 50  # Number of catalog items to retrieve on one page for pagination\n    apikey:\n      header: "X-Api-Key"  # Name of the EDC api key header field\n      secret: ""  # <edc-api-key>\n  callbackurl:\n  submodel:\n    request:\n      ttl: PT10M  # Requests to dataplane will time out after this duration (see https://en.wikipedia.org/wiki/ISO_8601#Durations)\n    urnprefix: /urn\n  catalog:\n    # IRS will only negotiate contracts for offers with a policy as defined in the allowedNames list.\n    # If a requested asset does not provide one of these policies, a tombstone will be created and this node will not be processed.\n    acceptedPolicies:\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: "ID 3.0 Trace"\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: "ID 3.1 Trace"\n      - leftOperand: "PURPOSE"\n        operator: "eq"\n        rightOperand: R2_Traceability\n      - leftOperand: "FrameworkAgreement.traceability"\n        operator: "eq"\n        rightOperand: "active"\n      - leftOperand: "Membership"\n        operator: "eq"\n        rightOperand: "active"\n  connectorEndpointService:\n    cacheTTL: PT24H  # Time to live for ConnectorEndpointService for fetchConnectorEndpoints method cache\ndiscovery:\n  oAuthClientId: portal  # ID of the OAuth2 client registration to use, see config spring.security.oauth2.client\n\ness:\n  edc:\n    host:  # EDC base URL - used for creation of EDC assets for ESS notifications and as sender EDC for sent notifications\n  mockEdcResult:  # Map of BPNs and YES/NO strings - this configures the ESS mock response in case it called to investigate a BPN\n  mockRecursiveEdcAsset:  # List of BPNs for which the special, mocked notification asset should be used\n  assetsPath: /management/v3/assets  # EDC management API "assets" path - used for notification asset creation\n  policydefinitionsPath: /management/v2/policydefinitions  # EDC management API "policydefinitions" path - used for notification policy definition creation\n  contractdefinitionsPath: /management/v2/contractdefinitions  # EDC management API "contractdefinitions" path - used for notification contract definitions creation\n\noauth:\n  resourceClaim: "resource_access"  # Name of the JWT claim for roles\n  irsNamespace: "Cl20-CX-IRS"  # Namespace for the IRS roles\n  roles: "roles"  # Name of the list of roles within the IRS namespace\n\nconfig:\n  # If true, the config provided below will completely replace the configmap.\n  # In this case, you need to provide all required config values defined above yourself!\n  # If false, the custom config will just be appended to the configmap.\n  override: false\n  # Provide your custom configuration here (overrides IRS Spring application.yaml)\n  content:\n\n\nenv: []  # You can provide your own environment variables for the IRS here.\n#  - name: JAVA_TOOL_OPTIONS\n#    value: -Dhttps.proxyHost=1.2.3.4\n\n\n#######################\n# Minio Configuration #\n#######################\nminio:\n  enabled: true\n  mode: standalone\n  persistence:\n    size: 1Gi\n  resources:\n    limits:\n      cpu: 1\n      memory: 4Gi\n    requests:\n      cpu: 0.25\n      memory: 4Gi\n  rootUser: "minio"  # <minio-username>\n  rootPassword: "minioPass"  # <minio-password>\n  securityContext:\n    enabled: true  # Enable to run containers as non-root. NOTE: if persistence.enabled=false then securityContext will be automatically disabled\n    runAsUser: 1000  # User id of the user for the container\n    runAsGroup: 3000  # Group id of the user for the container\n    fsGroup: 2000  # Group id of the persistent volume mount for the container\n\n  environment:\n    MINIO_PROMETHEUS_JOB_ID: minio-actuator\n    MINIO_PROMETHEUS_URL: http://prometheus:9090\n\n\n############################\n# Prometheus Configuration #\n############################\nprometheus:\n  enabled: false  # \u2460\n  rbac:\n    create: false\n  alertmanager:\n    enabled: false\n  prometheus-node-exporter:\n    enabled: false\n  kubeStateMetrics:\n    enabled: false\n  prometheus-pushgateway:\n    enabled: false\n  configmapReload:\n    prometheus:\n      enabled: false\n\n  extraScrapeConfigs: |\n    - job_name: \'spring-actuator\'\n      metrics_path: \'/actuator/prometheus\'\n      scrape_interval: 5s\n      static_configs:\n')),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use this to enable or disable the monitoring components")),(0,o.kt)("h4",{id:"values-explained"},"Values explained"),(0,o.kt)("h5",{id:"irs-url"},"irs-url"),(0,o.kt)("p",null,"The hostname where the IRS will be made available."),(0,o.kt)("h4",{id:"ingress"},"ingress"),(0,o.kt)("p",null,"To expose the IRS service, you need to add an ingress for the default port 8080.\nYou can do this by adding this to ingress:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'ingress:\n  enabled: true\n  className: "nginx"\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-passthrough: "false"\n    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\n  hosts:\n    - host: "public.irs.hostname"\n      paths:\n        - path: /\n          pathType: Prefix\n          port: 8080\n  tls:\n    - hosts:\n      - "public.irs.hostname"\n      secretName: tls-secret\n')),(0,o.kt)("h5",{id:"digital-twin-registry-url"},"digital-twin-registry-url"),(0,o.kt)("p",null,"The URL of the Digital Twin Registry. The IRS uses this service to fetch AAS shells."),(0,o.kt)("h5",{id:"discovery-finder-url"},"discovery-finder-url"),(0,o.kt)("p",null,"The URL of the Discovery Finder. The IRS uses this service to discover EDC to a particular BPN."),(0,o.kt)("h5",{id:"semantics-hub-url"},"semantics-hub-url"),(0,o.kt)("p",null,"The URL of the SemanticsHub. The IRS uses this service to fetch aspect schemas for payload validation."),(0,o.kt)("h5",{id:"bpdm-url"},"bpdm-url"),(0,o.kt)("p",null,"The URL of the BPDM service. The IRS uses this service to fetch business partner information based on BPNs."),(0,o.kt)("h5",{id:"oauth2-token-uri"},"oauth2-token-uri"),(0,o.kt)("p",null,"The URL of the OAuth2 token API. Used by the IRS for token creation to authenticate with other services."),(0,o.kt)("h5",{id:"oauth2-jwkset-uri"},"oauth2-jwkset-uri"),(0,o.kt)("p",null,"The URL of the OAuth2 JWK Set. Used by the IRS to validate tokens when the IRS API is called."),(0,o.kt)("h5",{id:"grafana-url"},"grafana-url"),(0,o.kt)("p",null,"The hostname where Grafana will be made available."),(0,o.kt)("h5",{id:"edc-controlplane-endpoint-data"},"edc-controlplane-endpoint-data"),(0,o.kt)("p",null,"The EDC consumer controlplane endpoint URL for data management, including the protocol.\nIf left empty, this defaults to the internal endpoint of the controlplane provided by the irs-edc-consumer Helm chart."),(0,o.kt)("h5",{id:"connectorendpointservicecachettl"},"connectorEndpointService.cacheTTL"),(0,o.kt)("p",null,"When IRS calls EDC Discovery Service to fetch endpoints for BPNL\u2019s there is a cache mechanism between them, to improve performance.\nThis parameter define how long cache is maintained before it is cleared. Data is in ISO 8601."),(0,o.kt)("h3",{id:"oauth2-configuration"},"OAuth2 Configuration"),(0,o.kt)("p",null,"OAuth2 protocol is used by IRS to protect the APIs and other resources. This means it is possible to configure and use any identity and access management tool that provides OAuth 2.0 functionality."),(0,o.kt)("h4",{id:"semantic-model-provisioning"},"Semantic Model Provisioning"),(0,o.kt)("p",null,"The IRS can retrieve semantic models in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"via the Semantic Hub, if you provide the URL"),(0,o.kt)("li",{parentName:"ol"},"via local schema files")),(0,o.kt)("p",null,"If you activate both features, IRS will first try to resolve the models via the Hub and use the\nlocal models as a fallback."),(0,o.kt)("p",null,"If you want to use local schema files, you need to provide them directly in the ",(0,o.kt)("inlineCode",{parentName:"p"},"values.yaml")," file. Use the param ",(0,o.kt)("inlineCode",{parentName:"p"},"semanticsHub.localModels")," to specify a map of all the local schemas.\nThe ",(0,o.kt)("strong",{parentName:"p"},"key")," of each entry is the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base64")," encoded URN of the model. The ",(0,o.kt)("strong",{parentName:"p"},"value")," is the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base64")," encoded content of the schema file itself. The entries will then be mounted into the IRS container and used on demand. For reference, see the example comment in the default ",(0,o.kt)("inlineCode",{parentName:"p"},"values.yaml"),"."),(0,o.kt)("h4",{id:"policy-store-configuration"},"Policy store configuration"),(0,o.kt)("p",null,"The IRS is exposing REST API to store Policies definitions.\nStorage details can be configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"application.yml")," file with below fields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'policystore:\n  persistence:\n    endpoint: "${MINIO_URL}" # S3 compatible API endpoint (e.g. Minio)\n    accessKey: "${MINIO_ACCESS_KEY}" # S3 access key\n    secretKey: "${MINIO_SECRET_KEY}" # S3 secret key\n    bucketName: irs-policy-bucket # the name of the S3 bucket to be created / used by the policy store\n    daysToLive: -1 # number of days to keep policies in the store, use -1 to disable cleanup\n')),(0,o.kt)("p",null,"If no custom policies are registered via REST API, IRS will use the default one configured with ",(0,o.kt)("inlineCode",{parentName:"p"},"irs-edc-client.catalog.acceptedPolicies")," property. IRS will only negotiate contracts for offers with policies found in Policy Store."),(0,o.kt)("h3",{id:"use-existing-edc-consumer"},"Use existing EDC consumer"),(0,o.kt)("p",null,"If you want to use an existing EDC as consumer, you need to add the management endpoint URL of this edc to ",(0,o.kt)("inlineCode",{parentName:"p"},"edc.controlplane.endpoint.data"),".\nYou also have to add an ingress for the IRS EDC EDR Token callback endpoint (default port: 8181):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'ingress:\n  enabled: true\n  className: "nginx"\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-passthrough: "false"\n    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\n  hosts:\n    - host: "public.irs.hostname"\n      paths:\n        - path: /\n          pathType: Prefix\n          port: 8080\n        - path: /internal\n          port: 8181\n          pathType: Prefix\n  tls:\n    - hosts:\n      - "public.irs.hostname"\n      secretName: tls-secret\n')),(0,o.kt)("h3",{id:"edc-consumer-configuration"},"EDC consumer configuration"),(0,o.kt)("p",null,"If you want to provide your own EDC consumer, add the EDC Helm Chart as dependency to your Chart.yaml. The helm chart and documentation can be found here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-tractusx/tractusx-edc/tree/main/charts/tractusx-connector"},"tractusx-connector")),(0,o.kt)("h3",{id:"secrets"},"Secrets"),(0,o.kt)("p",null,"This is a list of all secrets used in the deployment."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u26a0\ufe0f WARNING"),"\\\nKeep the values for these settings safe and do not publish them!"),(0,o.kt)("h4",{id:"common-client-id"},"common-client-id"),(0,o.kt)("p",null,"Client ID for OAuth2 provider. Request this from your OAuth2 operator."),(0,o.kt)("h4",{id:"common-client-secret"},"common-client-secret"),(0,o.kt)("p",null,"Client secret for OAuth2 provider. Request this from your OAuth2 operator."),(0,o.kt)("h4",{id:"minio-username"},"minio-username"),(0,o.kt)("p",null,"Login username for Minio. To be defined by you."),(0,o.kt)("h4",{id:"minio-password"},"minio-password"),(0,o.kt)("p",null,"Login password for Minio. To be defined by you."),(0,o.kt)("h4",{id:"edc-api-key"},"edc-api-key"),(0,o.kt)("p",null,"An API key for the EDC API. To be defined by you."),(0,o.kt)("h4",{id:"vault-token"},"vault-token"),(0,o.kt)("p",null,"The access token for the HashiCorp Vault API."),(0,o.kt)("h4",{id:"grafana-username"},"grafana-username"),(0,o.kt)("p",null,"Login username for Grafana. To be defined by you."),(0,o.kt)("h4",{id:"grafana-password"},"grafana-password"),(0,o.kt)("p",null,"Login password for Grafana. To be defined by you."),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("h3",{id:"proxy-support"},"Proxy support"),(0,o.kt)("p",null,"If you are using an HTTP(S) proxy for outgoing connections, you need to configure the IRS to use it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"JAVA_TOOL_OPTIONS=-Dhttps.proxyHost=X.X.X.X -Dhttps.proxyPort=XXXX\n")),(0,o.kt)("p",null,"You might need to specify both ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"https")," options, depending on your configuration."),(0,o.kt)("p",null,"If your proxy is requiring authentication, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},".proxyUser")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".proxyPassword")," properties in addition."),(0,o.kt)("h3",{id:"troubleshooting-faq"},"Troubleshooting FAQ"),(0,o.kt)("h4",{id:"minio"},"Minio"),(0,o.kt)("h5",{id:"error-the-specified-bucket-does-not-exist"},'Error: "The specified bucket does not exist"'),(0,o.kt)("p",null,"IRS tries to read data from or write to the Minio storage, but no bucket exists. This can happen if Minio is running without a persistent volume and restarts, thus losing all data.\nIt can also happen if the persistent volume claim is deleted / recreated."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Proposed solution steps:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Make sure Minio is configured and running correctly."),(0,o.kt)("li",{parentName:"ol"},"Restart the IRS - this will recreate the missing bucket automatically.")),(0,o.kt)("h4",{id:"different-job-model-versions-maintenance"},"Different Job model versions maintenance"),(0,o.kt)("p",null,"Currently, the IRS only supports one version of the Job model at a time. This means that if the Job model is changed in a newer IRS version, old models stored in minio will no longer be supported and returned from IRS endpoints. The IRS application will work as usual, old versions of Job can stay in Minio and don\u2019t need to be removed - the IRS will simply ignore them. If you want to clear the minio from old models, the only way to achieve that is to delete them all and register new Jobs."))}u.isMDXComponent=!0},62870:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/DataChainKitIcon-9d971977caa3b7d5d469e64e2ee02dc7.png"}}]);