"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[89792],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},99358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"kits/knowledge-agents-kit/software-development-view/api","title":"API","description":"\x3c!--","source":"@site/docs-kits/kits/knowledge-agents-kit/software-development-view/api.md","sourceDirName":"kits/knowledge-agents-kit/software-development-view","slug":"/kits/knowledge-agents-kit/software-development-view/api","permalink":"/docs-kits/next/kits/knowledge-agents-kit/software-development-view/api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"API"},"sidebar":"kits","previous":{"title":"Reference Implementation","permalink":"/docs-kits/next/kits/knowledge-agents-kit/software-development-view/reference"},"next":{"title":"Invoke a Skill or Query (Simple)","permalink":"/docs-kits/next/kits/knowledge-agents-kit/software-development-view/api/agent/agent-get"}}');var i=t(74848),o=t(28453);const s={sidebar_position:1,title:"API"},r=void 0,l={},d=[{value:"Examples",id:"examples",level:2},{value:"Invoke a Locally-Stored Parameterized Skill (Simple)",id:"invoke-a-locally-stored-parameterized-skill-simple",level:3},{value:"Invoke a Dataspace-Stored Parameterized Skill (Flexible)",id:"invoke-a-dataspace-stored-parameterized-skill-flexible",level:3},{value:"Register a Parameterized Skill",id:"register-a-parameterized-skill",level:3},{value:"Return a Skill",id:"return-a-skill",level:3},{value:"Invoke an Ad-hoc Query",id:"invoke-an-ad-hoc-query",level:3},{value:"Upload Graph Data (Only Matchmaking Agent Standalone)",id:"upload-graph-data-only-matchmaking-agent-standalone",level:3},{value:"Delete Graph Data (Only Matchmaking Agent Standalone)",id:"delete-graph-data-only-matchmaking-agent-standalone",level:3}];function c(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The Agent API is designed along the ",(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/sparql11-query/",children:"W3C SPARQL 1.1"}),"\nspecification. It represents the core interface of the ",(0,i.jsx)(n.a,{href:"architecture",children:"Catena-X Knowledge Agents (CX KA)\nArchitecture"})," to enable federated (i.e. distributed, but independent) and sovereign\n(i.e. collaborative, but controlled and secured) data processing over GAIA-X/IDS dataspaces."]}),"\n",(0,i.jsx)(n.p,{children:"For that purpose, this API is used in three different functions/building\nblocks of CX KA:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"As a Consumer-facing entrypoint into the dataspace (the so-called\nMatchmaking Agent)."}),"\n",(0,i.jsx)(n.li,{children:"As a Provider-facing callback from the dataspace into the backend\n(the so-called Binding Agent)."}),"\n",(0,i.jsxs)(n.li,{children:['As an intermediate Transfer protocol between "Sinks" representing SPARQL Remote',(0,i.jsx)(n.br,{}),"\n",'Service Contexts (=sub queries/routines) and the\ncorresponding "Sources" representing backend-bound SPARQL Graph Contexts.\nThese Sinks and Sources are to be implemented using the\nEDC (Eclipse Dataspace Components) framework.']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'For each of these three functions, a particular "profile" of this API\n(here: a fragment or variant of the full-blown SPARQL 1.1 specification)\nis employed:'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The KA-MATCH profile allows to call federated SPARQL logic as stored procedures\n(so-called Skills) based on a rich set of meta-data (ontology)"}),"\n",(0,i.jsx)(n.li,{children:"The KA-BIND profile allows to delegate non-federated and data-focussed SPARQL sub-queries by compiling them into native backend API calls (e.g. in SQL or REST)."}),"\n",(0,i.jsx)(n.li,{children:"The KA-TRANSFER profile allows to wrap (and unwrap) well-defined header and\nprotocol information from SPARQL into the generic payload of the EDC Http transfer."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This API is already designed with alternative query protocols (such as GRAPHQL\nor Federated SQL) in mind."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"invoke-a-locally-stored-parameterized-skill-simple",children:"Invoke a Locally-Stored Parameterized Skill (Simple)"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/agent/getAgent",children:"AGENT GET"})," method specification"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"curl --location '${KA-MATCH}/agent?asset=urn%3Acx%3ASkill%3Aconsumer%3ALifetime&(vin=WBAAL31029PZ00001&troubleCode=P0746&troubleCode=P0745)&(vin=WBAAL31029PZ00002&troubleCode=P0744)&(vin=WBAAL31029PZ00003&troubleCode=P0743)' \\\n--header 'Authorization: Basic ${UuencodedUsernameColonPassword}'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"invoke-a-dataspace-stored-parameterized-skill-flexible",children:"Invoke a Dataspace-Stored Parameterized Skill (Flexible)"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/agent/postAgent",children:"AGENT POST"})," method specification"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:'curl --location \'${KA-MATCH}/agent?asset=${EDC-BUSINESSPARTNER}%23urn%3Acx%3ASkill%3Aconsumer%3ALifetime\' \\\n--header \'Content-Type: application/sparql-results+json\' \\\n--header \'Authorization: Basic ${UuencodedUsernameColonPassword}\' \\\n--data \'{\n    "head": {\n        "vars": [\n            "vin",\n            "troubleCode"\n        ]\n    },\n    "results": {\n        "bindings": [\n            {\n                "vin": {\n                    "type": "literal",\n                    "value": "WBAAL31029PZ00001"\n                },\n                "troubleCode": {\n                    "type": "literal",\n                    "value": "P0746"\n                }\n            },\n            {\n                "vin": {\n                    "type": "literal",\n                    "value": "WBAAL31029PZ00001"\n                },\n                "troubleCode": {\n                    "type": "literal",\n                    "value": "P0745"\n                }\n            },\n            {\n                "vin": {\n                    "type": "literal",\n                    "value": "WBAAL31029PZ00002"\n                },\n                "troubleCode": {\n                    "type": "literal",\n                    "value": "P0744"\n                }\n            }\n        ]\n    }\n}\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"register-a-parameterized-skill",children:"Register a Parameterized Skill"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/agent/skill/postSkill",children:"AGENT SKILL POST"})," method specification"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"curl --location '${KA-MATCH}/agent/skill?asset=urn%3Acx%3ASkill%3Aconsumer%3ALifetime' \\\n--header 'Content-Type: application/sparql-query' \\\n--header 'Authorization: Basic ${UuencodedUsernameColonPassword}' \\\n--data-raw 'PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://w3id.org/catenax/ontology#>\n\n############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill           \n#                         Realizes a 5-Step Business Process                          \n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"      \n############################################################################################\n# Preconditions:                                                                    \n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                 \n#   - VIN-VAN Conversion                                                            \n#   - DTC Analysis/Resolution (including the READING of PartType and Description)   \n#   - Serial Part & SUPPLIER Lookup                                                   \n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                              \n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                     \n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)        \n############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?description ?affectedPart ?distanceKm ?timeDays ?vin WHERE {\n\n####\n# 1. The CONSUMER detects a trouble code on a car in his fleet\n####\nVALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n\n####\n# 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n#    using the Federated Data Catalogue  (Catalogue=Default Graph)\n####\n?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n        cx:hasConnector ?oemConnector.\n\n?oemConnector cx:offersAsset ?diagnoseAsset.\n?diagnoseAsset rdf:type <https://w3id.org/catenax/taxonomy#GraphAsset>;\n                rdfs:isDefinedBy <https://w3id.org/catenax/ontology/reliability>.\n\n####\n# 3. The CONSUMER delegates the following logic to the OEM (connector)\n####\nSERVICE ?oemConnector { \n\n    ####\n    # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n    #.    and gets some master data with it \n    ####\n    ?van cx:isAnonymousVehicle ?vin;\n        cx:hasRegistration ?registration.\n\n    ####\n    # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n    ####\n    GRAPH ?diagnoseAsset {\n\n    ?Dtc rdf:type cx:DTC; \n        cx:Code ?troubleCode;\n        cx:affects [ cx:EnDenomination ?partType ]; \n        cx:Description ?description.\n    \n    } # OEM#Diagnosis context\n\n    ####\n    # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n    #     focussed to the problematic partType (Telematics Graph) \n    ####\n    ?van cx:latestMileageReceived ?mileage;\n        cx:latestDetailReceived ?telematicsDetail.\n    ?telematicsDetail cx:hasPartType ?partType;\n                    cx:hasLoadSpectrum ?loadSpectrum.\n\n    ####\n    # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n    #     and the supplier address in the dataspace\n    ####\n    ?serializedPart cx:isComponentOf+ ?van;\n                    cx:hasPartType ?partType;\n                    cx:hasName ?affectedPart;\n                    cx:hasSupplier [\n                        cx:hasConnector ?tieraConnector\n                    ].           \n\n    ?tieraConnector cx:offersAsset ?prognosisAsset.\n    ?prognosisAsset rdfs:isDefinedBy <https://w3id.org/catenax/ontology/behaviour>.\n\n    ####\n    # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n    #    which means that load spectrum data etc is only exchanged using their\n    #    contract and between their connectors.\n    ####\n    SERVICE ?tieraConnector { \n\n    ####\n    # 4.1 The SUPPLIER adds additional measurement information\n    ####\n    ?telematicsDetail cx:hasFile ?loadSpectrumFile;\n                        cx:hasHeader ?loadSpectrumHeader.\n\n    ####\n    # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n    ####\n    GRAPH ?prognosisAsset {\n\n        ?invocation rdf:type cx:LifetimePrognosis;\n            \n            # <--General vehicle info\n            cx:loadCollectiveMileage ?mileage;\n            cx:loadCollectiveRegistrationDate ?registration;\n\n            # <--Part Info from the OEM\n            cx:loadCollectiveComponent ?affectedPart;\n            cx:loadCollectiveBody ?loadSpectrum;\n            \n            # <--Additional info from the SUPPLIER\n            cx:loadCollectiveFile ?loadSpectrumFile;\n            cx:loadCollectiveHeader ?loadSpectrumHeader; \n            \n            # --\x3ethe actual prognosis output\n            cx:remainingDistance ?distanceKm; \n            cx:remainingTime ?timeDays.\n    \n    } # SUPPLIER#Prognosis context\n\n    } # SUPPLIER context\n\n} # OEM context\n\n    # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"return-a-skill",children:"Return a Skill"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/agent/skill/getSkill",children:"SKILL GET"})," method specification"]}),"\n",(0,i.jsx)(n.h3,{id:"invoke-an-ad-hoc-query",children:"Invoke an Ad-hoc Query"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/agent/postAgent",children:"AGENT POST"})," method specification"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"curl --location '${KA-BIND}/agent' \\\n--header 'Content-Type: application/sparql-query' \\\n--header 'Authorization: Basic ${UuencodedUsernameColonPassword}' \\\n--data-raw 'PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://w3id.org/catenax/ontology#>\n\n# Sample Graph Context that is Delegated/Instantiated to a Binding Agent Call\nSELECT ?partType ?description WHERE {\n    VALUES (?troubleCode) { (\"P0745\"^^xsd:string) (\"P0746\"^^xsd:string) }.\n\n    ?Dtc rdf:type cx:DTC; \n        cx:Code ?troubleCode;\n        cx:affects [ cx:EnDenomination ?partType ]; \n        cx:Description ?description.\n        \n} \n"})}),"\n",(0,i.jsx)(n.h3,{id:"upload-graph-data-only-matchmaking-agent-standalone",children:"Upload Graph Data (Only Matchmaking Agent Standalone)"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/graph/postGraph",children:"GRAPH POST"})," method specification"]}),"\n",(0,i.jsx)(n.h3,{id:"delete-graph-data-only-matchmaking-agent-standalone",children:"Delete Graph Data (Only Matchmaking Agent Standalone)"}),"\n",(0,i.jsxs)(n.p,{children:["see the ",(0,i.jsx)(n.a,{href:"api/graph/deleteGraph",children:"GRAPH DELETE"})," method specification"]}),"\n",(0,i.jsx)("sub",{children:(0,i.jsx)("sup",{children:"(C) 2021 Contributors to the Eclipse Foundation. SPDX-License-Identifier: CC-BY-4.0"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);