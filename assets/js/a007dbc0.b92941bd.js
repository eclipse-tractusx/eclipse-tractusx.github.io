"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[24737],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=l,k=u["".concat(o,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},59902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const r={id:"postSkill",title:"Register a Skill",slug:"agent-skill-post"},i=void 0,s={unversionedId:"kits/knowledge-agents/development-view/api/agent/skill/postSkill",id:"kits/knowledge-agents/development-view/api/agent/skill/postSkill",title:"Register a Skill",description:"\x3c!--",source:"@site/docs-kits/kits/knowledge-agents/development-view/api/agent/skill/post.mdx",sourceDirName:"kits/knowledge-agents/development-view/api/agent/skill",slug:"/kits/knowledge-agents/development-view/api/agent/skill/agent-skill-post",permalink:"/docs-kits/next/kits/knowledge-agents/development-view/api/agent/skill/agent-skill-post",draft:!1,tags:[],version:"current",frontMatter:{id:"postSkill",title:"Register a Skill",slug:"agent-skill-post"},sidebar:"kits",previous:{title:"Invoke a Skill or Query (Flexible)",permalink:"/docs-kits/next/kits/knowledge-agents/development-view/api/agent/agent-post"},next:{title:"Returns a Skill",permalink:"/docs-kits/next/kits/knowledge-agents/development-view/api/agent/skill/skill-get"}},o={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Code Snippets",id:"code-snippets",level:2},{value:"Responses",id:"responses",level:2},{value:"200",id:"200",level:3},{value:"204",id:"204",level:3},{value:"400",id:"400",level:3},{value:"500",id:"500",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"POST /agent/skill\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Register a Skill: ")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"in"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"asset"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"The Asset Id of the Skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"assetName"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The Asset Name of the Skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"assetDescription"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The Asset Description of the Skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"assetVersion"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The Asset Version of the Skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"distributionMode"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The distribution mode under which to publish the skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"contract"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The contract under which the skill should be published")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isFederated"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the skill should be visible in the Federated Catalogue")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ontology"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Multiple references to ontologies which are referenced in the skill")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"allowServicePattern"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"A regex indicating which external SERVICE Iris are allowed during execution.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"denyServicePattern"),(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"A regex indicating which external SERVICE Iris are forbidden during execution.")))),(0,l.kt)("h2",{id:"request-body"},"Request Body"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Headers"),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"content-type"),(0,l.kt)("td",{parentName:"tr",align:null},"application/sparql-query")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sparql",metastring:'title="Example request"',title:'"Example','request"':!0},'SELECT DISTINCT ?luogo ?indirizzo ?comune WHERE {\n  ?x a cis:CulturalInstituteOrSite ;\n  cis:institutionalCISName ?luogo ;\n  cis:hasSite ?site .\n  ?site cis:siteAddress ?address .\n  ?address clvapit:fullAddress ?indirizzo ;\n          clvapit:hasCity [rdfs:label ?comune] .\n  FILTER regex(str(?comune), "Vinci", "i")\n}  ORDER BY ?luogo LIMIT 100\n')),(0,l.kt)("h2",{id:"code-snippets"},"Code Snippets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Shell + Curl"',title:'"Shell',"+":!0,'Curl"':!0},'curl --request POST \\\n  --url \'https://knowledge.dev.demo.catena-x.net/consumer-edc-data/BPNL00000003CQI9/api/agent/skill?asset=SkillAsset%3Fconsumer%3DDataspace&assetName=Sample%20Skill&assetVersion=1.0.5&assetDescription=Performs%20some%20sample%20operations.&distributionMode=ALL&contract=Contract%3Fconsumer%3DSkill&isFederated=true&allowedServicePattern=edcs%3F%3A%2F%2F.*\' \\\n  --header \'content-type: application/sparql-query\' \\\n  --data \'PREFIX cx-common: <https://w3id.org/catenax/ontology/common#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \nPREFIX sh: <http://www.w3.org/ns/shacl#> \n\nSELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n       ?type\n       (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=",") AS ?contentType) \n       ?protocol\n       (CONCAT("<",GROUP_CONCAT(?aontology;SEPARATOR=">,<"),">") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector cx-common:offers ?asset. \n     ?asset cx-common:contentType ?acontentType; \n            cx-common:name ?name; \n            rdf:type ?type; \n            rdfs:isDefinedBy ?aontology; \n            cx-common:version ?aversion; \n            cx-common:description ?adescription;\n            cx-common:implementsProtocol ?protocol. \n\n    OPTIONAL {\n        ?asset sh:shapesGraph ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type ?protocol\n\'\n')),(0,l.kt)("h2",{id:"responses"},"Responses"),(0,l.kt)("h3",{id:"200"},"200"),(0,l.kt)("p",null,"Skill has been registered"),(0,l.kt)("h3",{id:"204"},"204"),(0,l.kt)("p",null,"Skill has been updated"),(0,l.kt)("h3",{id:"400"},"400"),(0,l.kt)("p",null,"Bad request or malformed SPARQL"),(0,l.kt)("h3",{id:"500"},"500"),(0,l.kt)("p",null,"Fatal error"),(0,l.kt)("sub",null,(0,l.kt)("sup",null,"(C) 2021,2024 Contributors to the Eclipse Foundation. SPDX-License-Identifier: CC-BY-4.0")))}u.isMDXComponent=!0}}]);