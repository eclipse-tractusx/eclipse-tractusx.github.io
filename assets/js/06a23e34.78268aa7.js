"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[90040],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=i,h=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},40184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const a={title:"TRG 8.03 - TruffleHog"},o=void 0,l={unversionedId:"release/trg-8/trg-8-03",id:"release/trg-8/trg-8-03",title:"TRG 8.03 - TruffleHog",description:"| Status | Created     | Post-History                                                  |",source:"@site/docs/release/trg-8/trg-8-03.md",sourceDirName:"release/trg-8",slug:"/release/trg-8/trg-8-03",permalink:"/docs/release/trg-8/trg-8-03",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/release/trg-8/trg-8-03.md",tags:[],version:"current",frontMatter:{title:"TRG 8.03 - TruffleHog"},sidebar:"docs",previous:{title:"TRG 8.02 - KICS",permalink:"/docs/release/trg-8/trg-8-02"},next:{title:"TRG 8.04 - Trivy",permalink:"/docs/release/trg-8/trg-8-04"}},s={},u=[{value:"Why",id:"why",level:2},{value:"Description",id:"description",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Status"),(0,i.kt)("th",{parentName:"tr",align:null},"Created"),(0,i.kt)("th",{parentName:"tr",align:null},"Post-History"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Update"),(0,i.kt)("td",{parentName:"tr",align:null},"27-Jun-2024"),(0,i.kt)("td",{parentName:"tr",align:null},"Switching to TruffleHog due to GitGuardian licence expiration")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Active"),(0,i.kt)("td",{parentName:"tr",align:null},"26-Mar-2024"),(0,i.kt)("td",{parentName:"tr",align:null},"Initial release")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Draft"),(0,i.kt)("td",{parentName:"tr",align:null},"04-Mar-2024"),(0,i.kt)("td",{parentName:"tr",align:null},"Draft release")))),(0,i.kt)("h2",{id:"why"},"Why"),(0,i.kt)("p",null,"TruffleHog is an open source tool designed to identify sensitive information, such as API keys, passwords, and other credentials, that may have been inadvertently committed to your code repository. This tool is expected to be used in parallel to the native GitHub Secret Scanning tool."),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Detecting and removing these secrets is crucial for maintaining the security of your application and infrastructure. TruffleHog performs a thorough search by checking the entire repository history, not just the latest commits. This means it can find secrets that were committed in the past and might still pose a security risk."),(0,i.kt)("p",null,"Configure your GitHub Actions to include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workflow dispatch"),": Manual workflow execution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schedule"),": Schedule the workflow to run at least once a week with ",(0,i.kt)("inlineCode",{parentName:"li"},"0 0 * * 0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"push")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pull_request"),": Activate the workflow on both push and pull request events targeting the branch that contains the code for the currently supported version, which may not necessarily be the main branch. This is the branch from which new releases will be made.")),(0,i.kt)("p",null,"Note: ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_args: --filter-entropy=4 --results=verified,unknown --only-verified")),(0,i.kt)("p",null,"Including ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_args: --filter-entropy=4 --results=verified,unknown --only-verified")," in the GitHub Actions workflow ensures that TruffleHog focuses on detecting high-entropy strings, which are more likely to be sensitive information such as passwords or API keys. This setup also instructs TruffleHog to report both verified secrets and potential but unverified secrets, providing a comprehensive security scan that helps identify and address all possible vulnerabilities in the code. The ",(0,i.kt)("inlineCode",{parentName:"p"},"--only-verified")," flag reduces the appearance of false positives, because only the verified secrets will appear."),(0,i.kt)("p",null,"Including ",(0,i.kt)("inlineCode",{parentName:"p"},"run: exit 1")," in a step of a GitHub Actions workflow, as demonstrated below, commands the workflow to halt execution. This ensures that should TruffleHog uncover any secrets during its scan, the workflow promptly terminates in failure."),(0,i.kt)("p",null,"GitHub Actions allows you to define workflows to automatically run TruffleHog scans on your code. You'll see the output that triggered the failure directly in the logs."),(0,i.kt)("p",null,"To comply with this TRG, simply create a file under the path: ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows/trufflehog.yaml")," with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'###############################################################\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License, Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n###############################################################\n\nname: "TruffleHog"\n\non:\n  push:\n    branches: ["main"]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: ["main"]\n  schedule:\n    - cron: "0 0 * * *" # Once a day\n  workflow_dispatch:\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n  id-token: write\n  issues: write\n\njobs:\n  ScanSecrets:\n    name: Scan secrets\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Ensure full clone for pull request workflows\n\n      - name: TruffleHog OSS\n        id: trufflehog\n        uses: trufflesecurity/trufflehog@7e78ca385fb82c19568c7a4b341c97d57d9aa5e1\n        continue-on-error: true\n        with:\n          path: ./  # Scan the entire repository\n          base: "${{ github.event.repository.default_branch }}"  # Set base branch for comparison (pull requests)\n          extra_args: --filter-entropy=4 --results=verified,unknown --debug --only-verified\n\n      - name: Scan Results Status\n        if: steps.trufflehog.outcome == \'failure\'\n        run: exit 1  # Set workflow run to failure if TruffleHog finds secrets \n')))}p.isMDXComponent=!0}}]);