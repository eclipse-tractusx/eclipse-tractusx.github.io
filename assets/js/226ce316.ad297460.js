"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[419,95978,13161],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>m});var a=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(i),h=n,m=p["".concat(l,".").concat(h)]||p[h]||c[h]||r;return i?a.createElement(m,o(o({ref:t},u),{},{components:i})):a.createElement(m,o({ref:t},u))}));function m(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var d=2;d<r;d++)o[d]=i[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}h.displayName="MDXCreateElement"},82048:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var a=i(87462),n=(i(67294),i(3905)),r=i(57168),o=i(22347);const s={id:"Digital Twins Development View Industry Core Kit",title:"Digital Twins",description:"Industry Core KIT",sidebar_position:1},l=void 0,d={unversionedId:"kits/Industry Core Kit/Software Development View/Digital Twins Development View Industry Core Kit",id:"kits/Industry Core Kit/Software Development View/Digital Twins Development View Industry Core Kit",title:"Digital Twins",description:"Industry Core KIT",source:"@site/docs-kits/kits/Industry Core Kit/Software Development View/page_digital-twins.mdx",sourceDirName:"kits/Industry Core Kit/Software Development View",slug:"/kits/Industry Core Kit/Software Development View/Digital Twins Development View Industry Core Kit",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/Digital Twins Development View Industry Core Kit",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"Digital Twins Development View Industry Core Kit",title:"Digital Twins",description:"Industry Core KIT",sidebar_position:1},sidebar:"kits",previous:{title:"Operation View",permalink:"/docs-kits/next/kits/Industry Core Kit/Operation View Industry Core Kit"},next:{title:"Aspect Models",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/Aspect Models Development View Industry Core Kit"}},u={},p=[{value:"Register Digital Twins",id:"register-digital-twins",level:3},{value:"Property specificAssetIds",id:"property-specificassetids",level:5},{value:"Authorization: Visbility of Specific Asset IDs in the DTR",id:"authorization-visbility-of-specific-asset-ids-in-the-dtr",level:5},{value:"Submodel Descriptors",id:"submodel-descriptors",level:5},{value:"Option 1: Same EDC Asset Structure as in Release 3.1",id:"option-1-same-edc-asset-structure-as-in-release-31",level:6},{value:"Option 2: EDC Asset Structure on Catalog Part Level",id:"option-2-edc-asset-structure-on-catalog-part-level",level:6},{value:"Data Consumption with AAS Submodel Descriptor Endpoints",id:"data-consumption-with-aas-submodel-descriptor-endpoints",level:6},{value:"Lookup in the Digital Twin Registry",id:"lookup-in-the-digital-twin-registry",level:3},{value:"Lookup up a Digital Twin with Local IDs",id:"lookup-up-a-digital-twin-with-local-ids",level:5},{value:"Unique ID Push",id:"unique-id-push",level:6},{value:"Query a Digital Twin Registry to find the digital twin for this built-in part",id:"query-a-digital-twin-registry-to-find-the-digital-twin-for-this-built-in-part",level:6},{value:"Publish Traceability Data Offers at EDC",id:"publish-traceability-data-offers-at-edc",level:4},{value:"Data Provider Tasks",id:"data-provider-tasks",level:5}],c={toc:p};function h(e){let{components:t,...s}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Industry Core kit banner",src:i(28596).Z,width:"280",height:"247"})),(0,n.kt)("p",null,"Industry Core uses digital twins to make a company's data available to other Catena-X partners. Basics about digital twins with which you should be familiar to understand this section are described in the ",(0,n.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs-kits/category/digital-twin-kit"},"Digital Twin KIT"),"."),(0,n.kt)("h3",{id:"register-digital-twins"},"Register Digital Twins"),(0,n.kt)("p",null,"In Industry Core, different types of parts, e. g. serialized parts, batches, JIS parts or catalog part, are registered in a company's DTR as digital twins."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u270b ",(0,n.kt)("strong",{parentName:"p"},"Unique ID Push"),"\nOnce a digital twin was registered (initially created), optionally a Unique ID Push notification can be send from the manufacturer (creator of the digital twin) to the customer of the part to inform it that a new digital twin is available.")),(0,n.kt)("p",null,"The following general conventions apply for all these digital twins:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"id: The AAS ID must be a UUIDv4 in URN format: ",(0,n.kt)("inlineCode",{parentName:"li"},"urn:uuid:<UUIDv4>"),";"),(0,n.kt)("li",{parentName:"ul"},"globalAssetId: the Unique ID of the real-world part for which a digital twin is created.")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f The AAS ID is not the same id as the Catena-X Unique ID, although they have the same format (UUID) and therefore look the same. A Unique ID identifies real-world parts, whereas a AAS ID identifies a digital twin of such a part. So, don't use the same value for Unique ID and AAS ID.")),(0,n.kt)("h5",{id:"property-specificassetids"},"Property specificAssetIds"),(0,n.kt)("p",null,"Specific asset IDs are used to identify digital twins when looking up or searching for these digital twins. This is a required step by a customer of a part to connect the digital twins of their parts with the digital twins of the suppliers' child parts. To a customer, only the information printed on a real-world part is available and can be used for the lookup. Mandatory specific asset IDs ensure that at least this information is available for the digital twin."),(0,n.kt)("p",null,"The following conventions for specific asset IDs apply to all digital twins:"),(0,n.kt)("table",null,(0,n.kt)("tr",null,(0,n.kt)("th",null," Key ")," ",(0,n.kt)("th",null," Availability ")," ",(0,n.kt)("th",null," Description ")," ",(0,n.kt)("th",null," Type ")),(0,n.kt)("tr",null,(0,n.kt)("td",null," manufacturerId "),(0,n.kt)("td",null," Mandatory "),(0,n.kt)("td",null," The Business Partner Number (BPNL) of the manufacturer of the part. "),(0,n.kt)("td",null," BPNL ")),(0,n.kt)("tr",null,(0,n.kt)("td",null," manufacturerPartId "),(0,n.kt)("td",null," Mandatory "),(0,n.kt)("td",null," The ID of the type/catalog part from the ",(0,n.kt)("em",null,"manufacturer"),". "),(0,n.kt)("td",null," String ")),(0,n.kt)("tr",null,(0,n.kt)("td",null," customerPartId "),(0,n.kt)("td",null," Optional "),(0,n.kt)("td",null," The ID of the type/catalog part from the ",(0,n.kt)("em",null,"customer"),".",(0,n.kt)("br",null),"The main reason why this propertiy is optional is that it cannot be guaranteed that every manufacturer knows the customerPartId for their parts. In case the manufacturer knows the customer and the corresponding CustomerPartID of its part though, it is ",(0,n.kt)("em",null,"required")," to add this information for easier lookup and to enable further processes.",(0,n.kt)("br",null)),(0,n.kt)("td",null," String ")),(0,n.kt)("tr",null,(0,n.kt)("td",null," digitalTwinType "),(0,n.kt)("td",null," Optional (for DT As-Built)",(0,n.kt)("br",null),"Mandatory (for DT As-Planned) "),(0,n.kt)("td",null,"The type of the digital twin:",(0,n.kt)("ul",null,(0,n.kt)("li",null,'"PartInstance" for serialized parts, batches, and JIS parts'),(0,n.kt)("li",null,'"PartType" for catalog parts')),"digitalTwinType was added to allow data consumers to search for all digital twins of a particular type, e.g, only for catalog parts by using ",(0,n.kt)("code",null,'digitalTwinType="PartType"')," as filter. Without this filter, a search for a particular  manufacturer part ID would not only return the digital twin of the catalog part, but also all digital twins of instances of this catalog part, i.e., of the corresponding serial parts."),(0,n.kt)("td",null," Enum "))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"For serialized parts, additionally the following conventions apply:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Availability"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partInstanceId"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mandatory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The serial number of the part from the manufacturer."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"van"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Only for vehicles:")," The pseudonymized vehicle identification number (VIN) of the vehicle."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"For batches, additionally the following conventions apply:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Availability"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"batchId"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The number of the batch from the manufacturer."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partInstanceId"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mandatory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Also the number of the batch from the manufacturer.",(0,n.kt)("br",null),(0,n.kt)("br",null),"Currently, we also use the batch number as partInstanceId. This makes looking up digital twins for serialized parts and batches easier as a data consumer only has to specify the partInstanceId no matter if they are looking up a serialized part or a batch. Otherwise, the data consumer would need to know for what type of digital twin it is looking for or it would have to look for both until a match is found."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"For just-in-sequence (JIS) parts, additionally the following conventions apply:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Availability"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"parentOrderNumber"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A number identifying the just-in-sequence- part's destination parent part. The parent part is typically known upfront to the supplier for just-in-sequence parts."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"jisNumber"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mandatory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A number that is used to identify the call-off that can be assumed unique within the specific just-in-sequence process. This is typically not the sequence number, but the call-off number."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"jisCallDate"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Optional"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The date of the just-in-sequence call-off as stated on the call-off document itself. ",(0,n.kt)("br",null),"The value must be compliant to ISO 8601: ",(0,n.kt)("inlineCode",{parentName:"td"},"YYYY-MM-DD")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"YYYY-MM-DDThh:mm:ss")," or ",(0,n.kt)("inlineCode",{parentName:"td"},"YYYY-MM-DDThh:mm:ss\xb1hh:mm")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Date")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partInstanceId"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mandatory"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A composition of ",(0,n.kt)("inlineCode",{parentName:"td"},"jisNumber"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"parentOrderNumber")," (if available), ",(0,n.kt)("inlineCode",{parentName:"td"},"jisCallDate")," (ifavailable). This information is typically known upfront to the supplier ",(0,n.kt)("inlineCode",{parentName:"td"},"jisNumber"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"partOrderNumber")," and ",(0,n.kt)("inlineCode",{parentName:"td"},"jisCallDate")," for just-in-sequence parts."),(0,n.kt)("td",{parentName:"tr",align:"left"},"String")))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u270b ",(0,n.kt)("strong",{parentName:"p"},"Lookup of Digital Twins"),"\nThe lookup for parts can use the customerPartId or the manufacturerPartId. Both, manufacturer and customer must agree upon what part id will be used for the lookup. Otherwise, when the customer would use the customerPartId for the lookup, but the manufacturer would only provide the manufacturerPartId in its digital twins, the lookup would fail every time. ",(0,n.kt)("strong",{parentName:"p"},"This is decision that a customer must agree upon with each of their suppliers individually."))),(0,n.kt)("h5",{id:"authorization-visbility-of-specific-asset-ids-in-the-dtr"},"Authorization: Visbility of Specific Asset IDs in the DTR"),(0,n.kt)("p",null,"To enforce a strict need-to-know (and prevent data from being exposed to non-authorized parties), the visibility of entries in the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},"specificAssetIds")," must be protected, i.e.,their visibility must be restricted to authorized parties only. For that, the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},"externalSubjectId")," must be used. Detailed information about this can be found in the ",(0,n.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs-kits/category/digital-twin-kit"},"Digital Twin KIT"),"."),(0,n.kt)("h5",{id:"submodel-descriptors"},"Submodel Descriptors"),(0,n.kt)("p",null,"Here, we extend the ",(0,n.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs-kits/category/digital-twin-kit"},"Digital Twin KIT")," standard with some additional conventions."),(0,n.kt)("p",null,"Submodel descriptors MUST be compliant to the following additional conventions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"id"),': The submodel ID must be a UUIDv4 in URN format: "urn:uuid:',"<","UUIDv4",">",'";'),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"idShort"),': the name of the aspect model in camel case, e.g. for aspect SerialPart: "serialPart".')),(0,n.kt)("p",null,"The actual access information for the EDC is part of the endpoint attribute in the submodel descriptor."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "interface": "SUBMODEL-3.0",\n    "protocolInformation": {\n        "href": "https://edc.data.plane/public/{path}/submodel",\n        "endpointProtocol": "HTTP",\n        "endpointProtocolVersion": ["1.1"],\n        "subprotocol": "DSP",\n        "subprotocolBody": "id=123;dspEndpoint=http://edc.control.plane/",\n        "subprotocolBodyEncoding": "plain",\n        "securityAttributes": [ \n          { "type": "NONE", "key": "NONE", "value": "NONE" }\n        ]\n    }\n}\n')),(0,n.kt)("p",null,"The following conventions apply for the endpoint:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"interface"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"endpointProtocol"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"endpointProtocolVersion"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"subprotocol"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"subprotocolBodyEncoding"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"securityAttributes")," are set as defined in the CX-0002 standard."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"href"),": The endpoint address for the logical operation GetSubmodel that is invoked by a data consumer to get the submodel. It must have the following format:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"https://edc.data.plane/public"),": Address of the EDC data plane that is providing the submodel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"{path}"),": This ",(0,n.kt)("inlineCode",{parentName:"li"},"{path}")," string is forwarded to the backend data service by the EDC data plane. Together with the EDC asset information (see below) it must contain all information for the backend data service to return the requested submodel. The actual path depends on the type of backend data service that the data provider uses to handle the request. More details follow below."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/submodel"),": This ",(0,n.kt)("inlineCode",{parentName:"li"},"/submodel")," string is also forwarded to the backend data service. As AAS Profile SSP-003 of the Submodel Service Specification is mandatory for release 3.2, ",(0,n.kt)("inlineCode",{parentName:"li"},"href"),' must have the suffix "/submodel" representing the invokation of the GetSubmodel operation.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"subprotocolBody"),": a semicolon-separated list of parameters used to negotiate the required contract agreement.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"id=123"),": The ID of the EDC asset for which a contract negitiation should be intiated. This ID is also called dataset ID as it is stored as ",(0,n.kt)("inlineCode",{parentName:"li"},"https://www.w3.org/ns/dcat/dataset.@id")," in a catalog entry. This ID must be set by the data provider when creating the asset. Do not confuse this EDC asset ID (dataset ID) with other IDs that might be defined additionally for an EDC asset, e.g., ",(0,n.kt)("inlineCode",{parentName:"li"},"https://w3id.org/edc/v0.0.1/ns/id")," (often refered to as ",(0,n.kt)("inlineCode",{parentName:"li"},"edc:id"),")."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dspEndpoint"),": Server and port of the EDC control plane used for contract negotiation.")))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u270b ",(0,n.kt)("strong",{parentName:"p"},"Backend Data Service for Submodels"),"\nAccording to CX-0002, the backend data service identified via ",(0,n.kt)("inlineCode",{parentName:"p"},"href"),"and the filter criteria in ",(0,n.kt)("inlineCode",{parentName:"p"},"subprotocolBody"),' MUST be conformant to the Asset Administration Shell Profile SSP-003 of the Submodel Service Specification and must at least support the logical operation GetSubmodel. In release 3.2, only the logical parameter Content=Value must be supported via path suffix "/submodel/$value". This might change in later Catena-X releases.')),(0,n.kt)("p",null,'With this approach, the EDC asset structure must no longer follow the "one EDC asset per submodel" rule (as in Release 3.1 and before), but gives data providers more flexibility how to create EDC assets for their digital twins and submodels based on how they use ',(0,n.kt)("inlineCode",{parentName:"p"},"{path}"),"."),(0,n.kt)("h6",{id:"option-1-same-edc-asset-structure-as-in-release-31"},"Option 1: Same EDC Asset Structure as in Release 3.1"),(0,n.kt)("p",null,"Submodels of digital twins are registered in the EDC the same way as for release 3.1: One EDC asset is created for every submodel of a digital twin."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"href")," must have the following format: ",(0,n.kt)("inlineCode",{parentName:"li"},"https://edc.data.plane/public/submodel")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"subprotocolBody")," must have the following format: ",(0,n.kt)("inlineCode",{parentName:"li"},"id={edcAssetId};dspEndpoint=http://edc.control.plane")),(0,n.kt)("li",{parentName:"ul"},'edcAssetId is the id of the EDC asset for the submodel. It must have the following format "{aasIdentifier}-{submodelIdentifier}" with',(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"aasIdentifier: the id of the digital twin (id property in the AAS descriptor)"),(0,n.kt)("li",{parentName:"ul"},"submodelIdentifier: the id of the submodel (id property in the submodel descriptor)")))),(0,n.kt)("p",null,"Here's an example how such a submodel descriptor could look like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'"submodelDescriptors": [\n  {\n    "idShort": "serialPart",\n    "id": "urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0",\n    "semanticId": {\n      "type": "ExternalReference", \n      "keys": [\n        {\n          "type": "GlobalReference", \n          "value": "urn:samm:io.catenax.serial_part:1.0.1#SerialPart"\n        }\n      ]\n    },\n    "endpoints": [\n      {\n        "interface": "SUBMODEL-3.0",\n        "protocolInformation": {\n          "href": "https://edc.data.plane/public/submodel",\n        "endpointProtocol": "HTTP",\n        "endpointProtocolVersion": ["1.1"],\n          "subprotocol": "DSP",\n          "subprotocolBody": "id=urn:uuid:75e98d67-e09e-4388-b2f6-ea0a0a642bfe-urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0;dspEndpoint=http://edc.control.plane/",\n          "subprotocolBodyEncoding": "plain",\n          "securityAttributes": [ \n            { "type": "NONE", "key": "NONE", "value": "NONE" }\n          ]\n        }\n      }\n    ]\n  }\n]\n')),(0,n.kt)("p",null,"In this example, the ",(0,n.kt)("inlineCode",{parentName:"p"},"path")," part in the ",(0,n.kt)("inlineCode",{parentName:"p"},"href")," is empty, as the EDC asset referenced in ",(0,n.kt)("inlineCode",{parentName:"p"},"subprotocolBody")," directly points to a service returning the correct submodel (set up correctly with its dataAddress in the data provider's EDC)."),(0,n.kt)("h6",{id:"option-2-edc-asset-structure-on-catalog-part-level"},"Option 2: EDC Asset Structure on Catalog Part Level"),(0,n.kt)("p",null,"A data provider can link several submodel endpoints to the same EDC asset (referenced by its id). This allows to create only one EDC asset (per aspect model) for a catalog part and link all submodels (of the same aspect model) for serialized parts of the catalog part to the same EDC asset. The data provider would still need to create separate EDC assets per aspect model as in most cases different usage policies are used for aspect models."),(0,n.kt)("p",null,"If a data provider no longer creates EDC assets on the level of submodels, the EDC can no longer authorize a request on a submodel-level. For example: If EDC assets are created per catalog part, the EDC can only authorize if the requestor is allowed to see parts of these type in general; if the requestor is allowed to see a actual serialized part, must be authorized by the backend data service executing the request."),(0,n.kt)("p",null,"Here's an example how such a submodel descriptor could look like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'"submodelDescriptors": [\n  {\n    "idShort": "serialPart",\n    "id": "urn:uuid:7effd7f4-6353-4401-9547-c54b420a22a0",\n    "semanticId": {\n      "type": "ExternalReference", \n      "keys": [\n        {\n          "type": "GlobalReference", \n          "value": "urn:samm:io.catenax.serial_part:1.0.1#SerialPart"\n        }\n      ]\n    },\n    "endpoints": [\n      {\n        "interface": "SUBMODEL-3.0",\n        "protocolInformation": {\n          "href": "https://edc.data.plane/public/urn%3Auuid%3A75e98d67-e09e-4388-b2f6-ea0a0a642bfe-urn%3Auuid%3A7effd7f4-6353-4401-9547-c54b420a22a0/submodel",\n          "endpointProtocol": "HTTP",\n          "endpointProtocolVersion": ["1.1"],\n          "subprotocol": "DSP",\n          "subprotocolBody": "id=urn:uuid:1475f313-0a83-4e2b-b705-a100eebcb7d7;dspEndpoint=http://control-plane.edc.catena-x.net/",\n          "subprotocolBodyEncoding": "plain",\n          "securityAttributes": [ \n            { "type": "NONE", "key": "NONE", "value": "NONE" }\n          ]\n        }\n      }\n    ]\n  }\n]\n')),(0,n.kt)("p",null,"The path part of the ",(0,n.kt)("inlineCode",{parentName:"p"},"href")," property contains the information for the backend data service which digital twin's submodel to return while the EDC asset ID is used for several endpoints. The path part here is just an example as it depends on the type of backend data service the data provider uses."),(0,n.kt)("p",null,"The above options are only two examples how a submodel's endpoint can be created. As long as it's compliant with the above conventions (including CX-0002) a data provider can also use any other EDC asset structure."),(0,n.kt)("h6",{id:"data-consumption-with-aas-submodel-descriptor-endpoints"},"Data Consumption with AAS Submodel Descriptor Endpoints"),(0,n.kt)("p",null,"The endpoint ",(0,n.kt)("inlineCode",{parentName:"p"},"href")," in the submodel descriptor cannot be used directly to contact an EDC and access the data in Catena-X."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A data consumer must first identify the protocol that must be used to retrieve the submodel data based on the ",(0,n.kt)("inlineCode",{parentName:"li"},"subprotocol"),'. For data transfers in Catena-X, this is "DSP"'),(0,n.kt)("li",{parentName:"ul"},"With ",(0,n.kt)("inlineCode",{parentName:"li"},"href"),', the data consumer calls the local operation GetSubmodel as specified by the suffix "/submodel". As only the logical parameter "Content" must be supported in release 3.2, "/$value" must be appended to ',(0,n.kt)("inlineCode",{parentName:"li"},"href")," by the data consumer.\nIf the ",(0,n.kt)("inlineCode",{parentName:"li"},"href"),' endpoint is called with operations or parameter values not yet supported, the error response 501 "Not Implemented" must be returned according to CX-0002.'),(0,n.kt)("li",{parentName:"ul"},"Then, the data consumer must use the information in the ",(0,n.kt)("inlineCode",{parentName:"li"},"subprotocolBody")," to perform a contract negotiation for the EDC asset referenced by ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," with the EDC control plane of the data provider specified by ",(0,n.kt)("inlineCode",{parentName:"li"},"dspEndpoint"),"."),(0,n.kt)("li",{parentName:"ul"},"Finally, using the id from the contract agreement with the control plane, the data consumer initiates the data transfer with the EDC data plane of the data provider referenced in the ",(0,n.kt)("inlineCode",{parentName:"li"},"href"),". The enriched path part of the ",(0,n.kt)("inlineCode",{parentName:"li"},"href")," (see bullet point 2) is passed to data provider data plane by the data consumer as a parameter for the backend data service that actually executes the request and returns the submodel.")),(0,n.kt)("p",null,"All these steps must be handled by the data consumer that want to retrieve the submodel data of a digital twin."),(0,n.kt)("h3",{id:"lookup-in-the-digital-twin-registry"},"Lookup in the Digital Twin Registry"),(0,n.kt)("p",null,"For a data provider, there are currently the following steps where they have to lookup digital twins of other partners in the Catena-X network."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The data provider must use the local IDs for a serialized part or batch (manufacturer, part number, serial or batch number) and for a just-in-sequence part (manufacturer, parentOrderNumber, jisNumber, jisCallDate) to lookup the AAS ID of the digital twin of this serialized part, batch or just-in-sequence part. The AAS descriptor with this ID contains the Unique ID of the serialized part, batch or just-in-sequence (as globalAssetId) that is used to create SingleLevelBomAsBuilt submodel.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The data provider must use the local IDs for a catalog part (manufacturer, part number) to lookup the AAS ID of the digital twin of this catalog part. The AAS descriptor with this ID contains the Unique ID of the catalog part (as globalAssetId) that is used to create the SingleLevelBoMAsPlanned submodel."))),(0,n.kt)("p",null,"For a data consumer, there are currently the following steps where they have to lookup digital twins of other partners in the Catena-X network."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The data consumer in the Traceability use case in most cases will use the Unique ID of a part to lookup the digital twin (more precisely, its AAS ID) of this part."),(0,n.kt)("li",{parentName:"ul"},"The data consumer from another use case (e.g., Circular Economy), might either use the Unique ID of a part (if known) or the local IDs of a part to lookup the part's digital twin (AAS ID) depending on what is available in the use case.")),(0,n.kt)("h5",{id:"lookup-up-a-digital-twin-with-local-ids"},"Lookup up a Digital Twin with Local IDs"),(0,n.kt)("p",null,"The local IDs of a serialized part (manufacturer, part number, serial number) are stored as specific asset IDs in the AAS descriptor of the digital twin. From the Digital Twin Registry API, the following function can be used for this lookup ",(0,n.kt)("inlineCode",{parentName:"p"},"GET /lookup/shells"),"."),(0,n.kt)("p",null,"All Asset identifier key-value-pairs used as parameter to this lookup function are combined using AND. An example query would look like this: ",(0,n.kt)("inlineCode",{parentName:"p"},"https://URL/registry/lookup/shells?assetIds=%5B%7B%22key%22%3A%20%22manufacturerId%22,%22value%22%3A%20%22BPNL7588787849VQ%22%7D,%7B%22key%22%3A%20%22manufacturerPartId%22,%22value%22%3A%20%2295657362-83%22%7D,%7B%22key%22%3A%20%22partInstanceId%22,%22value%22%3A%20%22NO-574868639429552535768526%22%7D%5D")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The assetIds value looks like this unencoded (but with additional spaces and linebreaks):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "key": "manufacturerId",\n    "value": "BPNL7588787849VQ"\n  },\n  {\n    "key": "manufacturerPartId",\n    "value": "95657362-83"\n  },\n  {\n    "key": "partInstanceId",\n    "value": "NO-574868639429552535768526"\n  }\n]\n')),(0,n.kt)("p",null,"The lookup (for serialized parts/batches as well as catalog parts) can use the customer or the manufacturer part id (manufacturerPartId or manufacturerPartId)."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For a digital twin, adding the customer part id to the specific asset IDs is optional. The main reason for this is that it cannot be guaranteed that every manufacturer knows the customer part id for their parts. But, if they know it, it is recommended to always add the customer part id to the specifiAssetId property for easier lookup (by customers)."),(0,n.kt)("li",{parentName:"ul"},"A customer that wants to do a lookup for a supplier's digital twin, must first decide what id they want to use for the lookup. This depends on the information that is available to them.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If the customer knows the manufacturer part id, they should use the manufacturer part id for the lookup as the manufacturer part id is guaranteed to be available in the digital twin (as the manufacturer part id is a mandatory property)."),(0,n.kt)("li",{parentName:"ul"},"If the customer does not know the manufacturer part id, they must use the customer part id (i.e., their own part id). In that case they must make sure that their suppliers register their digital twins with this information (as the customer part id is optional) as part of the specific asset IDs. This is decision that a customer must agree upon with each of their suppliers individually.")))),(0,n.kt)("p",null,"As a result, the AAS ID of the digital twin with this local IDs is returned. The AAS ID can then be used to retrieve details about the digital twin, i.e. the digital twin's AAS descriptor including submodel descriptors."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example result for looking up a digital twin with local IDs:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'["urn:uuid:c227a880-b82b-40f7-846c-3942ddf26c29"]\n')),(0,n.kt)("p",null,"Note that this query can return more than one AAS ID depending on the local IDs uniquely identifying a digital twin or not."),(0,n.kt)("p",null,"Currently, even if more than one digital twin is returned in a lookup, these digital twins should have different submodels assigned to them. These submodels should be disjunct and not overlap. This means that you can use the submodel to filter out the correct digital twin."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If there are returned more than one digital twin with the same submodel (based on their semanticId), this is considered an error. Processing should be canceled and an error message should be reported.")),(0,n.kt)("p",null,"The next section describes to modify the lookup to additionally restrict the results to digital twins with a specific submodel type based on it's semanticId."),(0,n.kt)("h6",{id:"unique-id-push"},"Unique ID Push"),(0,n.kt)("p",null,"Once the digital twin was created, optionally a Unique ID Push notification can be send by the manufacturer of the part to the customer of the serialized part of batch to inform the customer that information about a serialized part or batch is available as a digital twin. This is an optional process and both, the manufacturer of a part as well as the customer of the part must support Unique ID Push notifications."),(0,n.kt)("p",null,"For more information, see ",(0,n.kt)("a",{parentName:"p",href:"#unique-id-push-notifications"},"Unique ID Push Notifications")),(0,n.kt)("h6",{id:"query-a-digital-twin-registry-to-find-the-digital-twin-for-this-built-in-part"},"Query a Digital Twin Registry to find the digital twin for this built-in part"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Querying digital twins is described in ",(0,n.kt)("a",{parentName:"li",href:"#lookup-for-digital-twins-in-the-digital-twin-registry"},"Lookup for Digital Twins in the Digital Twin Registry"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Note that the query parameters differ depending on what type of digital twin is looked up.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Currently though, no matter if you want to lookup serialized parts or batches, you can use partInstanceId (using the serial number or the batch number as search parameter value)."),(0,n.kt)("li",{parentName:"ul"},"For Batch digital twins, the key batchId might be provided optionally. As this key is not mandatory currently, you cannot rely on this key being available when looking for Batch digital twins."))),(0,n.kt)("li",{parentName:"ul"},"To understand why, take a look at how these digital twins are created, especially their specific asset IDs: ",(0,n.kt)("a",{parentName:"li",href:"#creating-submodels-for-digital-twins"},"Creating Submodels for Digital Twins")),(0,n.kt)("li",{parentName:"ul"},"The result of this query will be the AAS ID of the digital twin."))),(0,n.kt)("li",{parentName:"ul"},"Use this AAS ID to get the AAS Descriptor including all Submodel Descriptors of this digital twin. The AAS Descriptor contains the Submodel Descriptor SerialPart or Batch (depending on the digital twin type)."),(0,n.kt)("li",{parentName:"ul"},"Fetch the submodel SerialPart or Batch (depending on the digital twin type) from the EDC that is referenced in the corresponding Submodel Descriptor."),(0,n.kt)("li",{parentName:"ul"},"The submodel then contains the Unique ID of the built-in part in its catenaXId attribute.")),(0,n.kt)("p",null,"These steps have to be repeated for all built-in parts by the manufacturer. After that, the manufacturer has all information to create the SingleLevelBomAsBuilt."),(0,n.kt)("h4",{id:"publish-traceability-data-offers-at-edc"},"Publish Traceability Data Offers at EDC"),(0,n.kt)("p",null,"With the changes of Release 3.2 regarding the submodel endpoints in the DTR, the actual EDC asset structure for submodels is no longer restricted by use case conventions and can be decided by the data provider."),(0,n.kt)("h5",{id:"data-provider-tasks"},"Data Provider Tasks"),(0,n.kt)("p",null,"Basically, as a data provider you have to do the following"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Implement a Backend Data Service (BDS) for every asset that is provided via the EDC. It does not have to be a different BDS for each asset - you can use the same BDS for several assets (to be verified)."),(0,n.kt)("li",{parentName:"ul"},"The BDS must support the Asset Administration Shell Profile SSP-003 of the Submodel Service Specification (see standard CX-0002 for more details)."),(0,n.kt)("li",{parentName:"ul"},"The BDS must use the REST API data plan for data transmission."),(0,n.kt)("li",{parentName:"ul"},"The BDS must verify that it only returns data to the data consumer that is compliant to the EDC asset and data offer for which data is queried and authorize the request accordingly.")),(0,n.kt)(o.default,{components:s.components,mdxType:"UniqueIDPush"}),(0,n.kt)(r.default,{components:s.components,mdxType:"Notice"}))}h.isMDXComponent=!0},22347:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=i(87462),n=(i(67294),i(3905));const r={sidebar_class_name:"hidden"},o=void 0,s={unversionedId:"kits/Industry Core Kit/Software Development View/part_uniqueidpush",id:"kits/Industry Core Kit/Software Development View/part_uniqueidpush",title:"part_uniqueidpush",description:"\x3c!--",source:"@site/docs-kits/kits/Industry Core Kit/Software Development View/part_uniqueidpush.mdx",sourceDirName:"kits/Industry Core Kit/Software Development View",slug:"/kits/Industry Core Kit/Software Development View/part_uniqueidpush",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/part_uniqueidpush",draft:!1,tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden"},sidebar:"kits",previous:{title:"part_aspect-model-overview",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/part_aspect-model-overview"},next:{title:"part_notice",permalink:"/docs-kits/next/kits/Industry Core Kit/part_notice"}},l={},d=[{value:"Unique ID Push",id:"unique-id-push",level:3},{value:"Prerequisites and Constraints",id:"prerequisites-and-constraints",level:4},{value:"Unique ID Push Process Overview",id:"unique-id-push-process-overview",level:4},{value:"Schema of Unique ID Push Notifications",id:"schema-of-unique-id-push-notifications",level:4},{value:"Notification Receiver (Customer)",id:"notification-receiver-customer",level:4},{value:"EDC Asset",id:"edc-asset",level:5},{value:"EDC Policies",id:"edc-policies",level:5},{value:"Backend Data Service to Process Unique ID Push Notifications",id:"backend-data-service-to-process-unique-id-push-notifications",level:5},{value:"Notification Sender (Manufacturer, Supplier)",id:"notification-sender-manufacturer-supplier",level:4},{value:"Mapping BPN to EDC URL with Discovery Service API",id:"mapping-bpn-to-edc-url-with-discovery-service-api",level:5}],u={toc:d};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"unique-id-push"},"Unique ID Push"),(0,n.kt)("p",null,"Unique ID Push notifications are a way for a manufacturer to notify a customer as soon as possible when a new digital twin for a part is available."),(0,n.kt)("p",null,"The solution is based on notification assets in the EDC (which is the same approach that is used for quality alerts & investigations). The customer creates a notification asset in the EDC and the customer's suppliers send their notifications (with the Unique Id) to this notification asset. As this notification asset is a general EDC asset - as for all EDC assets - access policies, usage policies and contract definitions must be created."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u270b It is important to understand that the customer (receiver) creates EDC asset and policies, and thus, the supplier (sender) of the Unique ID push notification must check during the EDC negotiation process if the conditions the receiver offers are acceptable for the sender.")),(0,n.kt)("h4",{id:"prerequisites-and-constraints"},"Prerequisites and Constraints"),(0,n.kt)("p",null,"In order to be able to push Unique ID(s) of part(s) to the correct partner, it is required that the data provider (manufacturer) pushing the Unique IDs is aware of the BPN of the actual receiver of the part (i.e., the customer) or has enough data in its context to use BPDM functions to determine the BPN Number of the receiver."),(0,n.kt)("p",null,"For actively pushing Unique IDs, an EDC is required and the data provider needs to be enabled to execute the complete process including EDC communication and HTTP Push (i.e., HTTP POST) of the payload."),(0,n.kt)("p",null,"Secondly, EDCs are being used for the exchange and it is currently required to offer a HTTP POST API to receive the Unique IDs push at the receiver's side. This API needs to be registered in the EDC Catalog as a data offer and requires specific properties to be set to standardized values, as this allows discover-ability. Details still tbd."),(0,n.kt)("h4",{id:"unique-id-push-process-overview"},"Unique ID Push Process Overview"),(0,n.kt)("p",null,"How the actual process is triggered is application specific. It is recommended to trigger the push of Unique IDs towards the customer after the Goods Issue has been booked, since commonly at that point the serial numbers/batch numbers of the parts being delivered are fixed in the logistics process and shall be contained in delivery documents, EDI Messages and/or any internal representation of the received items (non-Catena-X communication)."),(0,n.kt)("p",null,"The Unique ID push is initiated by the supplier (acting as sender) towards their customer (acting as receiver). Since the Unique ID of the asset (i.e., serial unit / batch) is unknown in the logistics process, the message needs to include local identifiers to be matched towards the information from the delivery documents and furthermore the internal data of the recipient's traceability solution."),(0,n.kt)("p",null,"Upon receipt of the message, the customer needs to match the local identifiers with its internal traceability records and attach each Unique ID to the respective data set. How this is done is depending on the customer's internal systems:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If there is an object for incoming deliveries, this event could be updated.\nAlternatively, if only production events are tracked, the data could be integrated at this point into the data provisioning pipeline's data structure for consumed materials."),(0,n.kt)("li",{parentName:"ul"},"In the end this enables the customer to integrate the child parts into the SingleLevelBomAsBuilt aspect.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Unique ID Push Process",src:i(21513).Z,width:"1310",height:"562"})),(0,n.kt)("h4",{id:"schema-of-unique-id-push-notifications"},"Schema of Unique ID Push Notifications"),(0,n.kt)("p",null,"The notifications send to inform a customer about the creating of a new digital twin for one of the parts they received have a standardized format."),(0,n.kt)("p",null,"All endpoints as well as the schema of the notification below are described in detail in the ",(0,n.kt)("a",{parentName:"p",href:"Unique%20ID%20Push%20API/unique-id-push-notification-api"},"Unique ID Push API documentation"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Adding the customer part id to the notification is optional. The main reason for this is that it cannot be guaranteed that every manufacturer knows the customer part id for their parts. But, in case the manufacturer knows the customer and the corresponding customer part id of its part though, it is required to always add the customer part id to the notification.")),(0,n.kt)("h4",{id:"notification-receiver-customer"},"Notification Receiver (Customer)"),(0,n.kt)("p",null,"Here is a short overview what the receiver has to do when they want to support Unique Id Push notifications. This is an optional feature."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The receiver in this scenario is the customer of a part."),(0,n.kt)("li",{parentName:"ul"},"The receiver must create a EDC asset in their EDC that works as the endpoint for receiving notifications. Also, access & usage policies as described below must be configured."),(0,n.kt)("li",{parentName:"ul"},"The EDC in which the notification EDC asset was created must be registered at the Discovery Service (so that the sender can find the partner's EDC which should receive notifications)"),(0,n.kt)("li",{parentName:"ul"},"When the Receiver receives a Unique Id Push notification, it must process this notification after it was received by the EDC (in a Backend Data Service)"),(0,n.kt)("li",{parentName:"ul"},"How the Receiver processes the notification is up to them, but the following steps are recommended:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Verify the correctness of the data in the notification (i.e., the receiver is actually the customer of this part)."),(0,n.kt)("li",{parentName:"ul"},"Store the notification data for later."),(0,n.kt)("li",{parentName:"ul"},"Use this data when the digital twin for the part into which the delivered part is built into is created instead of doing a lookup to a supplier's Digital Twin Registry.")))),(0,n.kt)("h5",{id:"edc-asset"},"EDC Asset"),(0,n.kt)("p",null,"For the EDC asset for receiving Unique ID Push notifications, the following conventions apply: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'The asset ID  must be "uniqueidpushnnotification-receipt".')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The following properties must be set for this asset:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@context": {\n    "edc": "https://w3id.org/edc/v0.0.1/ns/",\n    "cx-common": "https://w3id.org/catenax/ontology/common#",\n    "cx-taxo": "https://w3id.org/catenax/taxonomy#",\n    "dct": "https://purl.org/dc/terms/"\n  },\n  "@id": "{{ _.assetId }}",\n  "properties": {\n    "dct:type": { "@id": "cx-taxo:ReceiveUniqueIdPushNotification" },\n    "cx-common:version": "1.0",\n    "asset:prop:id": "uniqueidpushnnotification-receipt",\n    "asset:prop:type": "notification.trace.uniqueidpush",\n    "asset:prop:notificationtype": "uniqueidpush",\n    "asset:prop:notificationmethod": "receive"\n  },\n  "privateProperties": {},\n  "dataAddress": {}\n}\n')),(0,n.kt)("p",{parentName:"li"},'Properties "asset:prop:*" must still be added to be backward compatible with previous releases. Properties "dct:type" and "cx-common:version" are used to classify the asset and are explained in the ',(0,n.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs-kits/kits/Digital%20Twin%20Kit/Software%20Development%20View/Specification%20Digital%20Twin%20KIT#registration-at-edc"},"Digital Twin KIT")," in more detail. "))),(0,n.kt)("h5",{id:"edc-policies"},"EDC Policies"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Access Policies"),"\nA data provider can decide on its own what access policies they want to define for their notification asset. Based on the purpose of the asset, all suppliers of the data provider should in general be allowed to send notifications to this asset. Therefore, either a public access policy or a BPN-based access policy (allowing all suppliers) should be used."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Usage Policies"),"\nIn general, a data provider is free to decide which usage policies to define for its assets. For notifications, though, the data provider is actually the receiver of notifications, i.e., the usage policy here has the purpose to define what the data provider does or is allowed to do with the notifications. It's something the sender of the notification has to rely on and accept when sending its notification."),(0,n.kt)("p",null,"Keep in mind that usage policies currently aren't technically enforced by the EDC or other components."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\u270b ",(0,n.kt)("strong",{parentName:"p"},"Usage Policy for Unique ID Push"),'\nThe Unique ID push notification endpoints are protected with a purpose-based usage policy and "purpose.trace.v1.aspects" as purpose.')),(0,n.kt)("h5",{id:"backend-data-service-to-process-unique-id-push-notifications"},"Backend Data Service to Process Unique ID Push Notifications"),(0,n.kt)("p",null,"The receiver must setup a backend data service that provides an HTTP Endpoint for notifications. All endpoints as well as the schema of the notification below are described in detail in the ",(0,n.kt)("a",{parentName:"p",href:"Unique%20ID%20Push%20API/unique-id-push-notification-api"},"Unique ID Push API documentation"),"."),(0,n.kt)("h4",{id:"notification-sender-manufacturer-supplier"},"Notification Sender (Manufacturer, Supplier)"),(0,n.kt)("p",null,"Here is a short overview what the sender has to do when they want to support Unique Id Push notifications. This is an optional feature."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The Sender in this scenario is the manufacturer or supplier of a part."),(0,n.kt)("li",{parentName:"ul"},"When a new digital twin for a part was created, the manufacturer is responsible to send a Unique Id Push notification for this twin to the customer of this part."),(0,n.kt)("li",{parentName:"ul"},"It is recommended to send this notification as soon as possible, i.e., directly after the digital twin was created.")),(0,n.kt)("h5",{id:"mapping-bpn-to-edc-url-with-discovery-service-api"},"Mapping BPN to EDC URL with Discovery Service API"),(0,n.kt)("p",null,"The sender must first find the EDC of the customer to which the notification should be sent to. For this, the BPN of the customer is required. With this, the Discovery Service can be used to query for all EDCs of the customer. After that, the data catalog of each of these EDCs must be queried for the notification EDC asset as described above. If this notification EDC asset is found in one of these EDCs, the notification can be sent."),(0,n.kt)("p",null,"There should only be one EDC which provides the notification EDC asset for Unique Id Push. If more than one EDC (for the same BPN/partner) are found, this is considered a misconfiguration of the corresponding partner."))}p.isMDXComponent=!0},57168:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=i(87462),n=(i(67294),i(3905));const r={sidebar_class_name:"hidden"},o=void 0,s={unversionedId:"kits/Industry Core Kit/part_notice",id:"kits/Industry Core Kit/part_notice",title:"part_notice",description:"\x3c!--",source:"@site/docs-kits/kits/Industry Core Kit/part_notice.mdx",sourceDirName:"kits/Industry Core Kit",slug:"/kits/Industry Core Kit/part_notice",permalink:"/docs-kits/next/kits/Industry Core Kit/part_notice",draft:!1,tags:[],version:"current",frontMatter:{sidebar_class_name:"hidden"},sidebar:"kits",previous:{title:"part_uniqueidpush",permalink:"/docs-kits/next/kits/Industry Core Kit/Software Development View/part_uniqueidpush"},next:{title:"Model Based Development and Data Processing (MDP) KIT",permalink:"/docs-kits/next/category/model-based-development-and-data-processing-mdp-kit"}},l={},d=[{value:"NOTICE",id:"notice",level:2}],u={toc:d};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"notice"},"NOTICE"),(0,n.kt)("p",null,"This work is licensed under the ",(0,n.kt)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by/4.0/legalcode"},"CC-BY-4.0"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"SPDX-License-Identifier: CC-BY-4.0"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 BASF SE"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. (represented by Fraunhofer ISST & Fraunhofer IML)"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 German Edge Cloud GmbH & Co. KG"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Mercedes Benz AG"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Robert Bosch Manufacturing Solutions GmbH"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 SAP SE"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Siemens AG"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 T-Systems International GmbH"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 ZF Friedrichshafen AG"),(0,n.kt)("li",{parentName:"ul"},"SPDX-FileCopyrightText: 2023 Contributors to the Eclipse Foundation"),(0,n.kt)("li",{parentName:"ul"},"Source URL: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs-kits/kits/Industry%20Core%20Kit"},"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs-kits/kits/Industry%20Core%20Kit")," (latest version)")))}p.isMDXComponent=!0},21513:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/unique_id_push_process-f39f701d98ca8a7046544c95e1dc6d14.png"},28596:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/doc-industry-core_header-minified-195d13835ba445ab30bae293bf78c4a9.png"}}]);