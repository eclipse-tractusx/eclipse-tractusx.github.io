"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[32429],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return a?r.createElement(g,i(i({ref:t},c),{},{components:a})):r.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},29256:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const l={title:"TRG 3.02 - Persist Data"},i=void 0,o={unversionedId:"release/trg-3/trg-3-2",id:"release/trg-3/trg-3-2",title:"TRG 3.02 - Persist Data",description:"| Status | Created     | Post-History      |",source:"@site/docs/release/trg-3/trg-3-2.md",sourceDirName:"release/trg-3",slug:"/release/trg-3/trg-3-2",permalink:"/docs/release/trg-3/trg-3-2",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/release/trg-3/trg-3-2.md",tags:[],version:"current",frontMatter:{title:"TRG 3.02 - Persist Data"},sidebar:"docs",previous:{title:"TRG 2.05 - Repository metafile",permalink:"/docs/release/trg-2/trg-2-5"},next:{title:"TRG 4.01 - Image tagging",permalink:"/docs/release/trg-4/trg-4-01"}},s={},p=[{value:"Why",id:"why",level:2},{value:"Description",id:"description",level:2},{value:"How",id:"how",level:2},{value:"How to expand volume in Kubernetes with ArgoCD",id:"how-to-expand-volume-in-kubernetes-with-argocd",level:3}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Status"),(0,n.kt)("th",{parentName:"tr",align:null},"Created"),(0,n.kt)("th",{parentName:"tr",align:null},"Post-History"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Draft"),(0,n.kt)("td",{parentName:"tr",align:null},"17-Jul-2023"),(0,n.kt)("td",{parentName:"tr",align:null},"'loos' typo fix")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Active"),(0,n.kt)("td",{parentName:"tr",align:null},"07-Mar-2023"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Draft"),(0,n.kt)("td",{parentName:"tr",align:null},"02-Jan-2023"),(0,n.kt)("td",{parentName:"tr",align:null},"n/a")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Moved"),(0,n.kt)("td",{parentName:"tr",align:null},"02-Jan-2023"),(0,n.kt)("td",{parentName:"tr",align:null},"content moved")))),(0,n.kt)("h2",{id:"why"},"Why"),(0,n.kt)("p",null,"In cases where data has to be persisted (database, uploaded files etc.), Kubernetes ",(0,n.kt)("strong",{parentName:"p"},"must")," be configured to create Persistent Volume that is attached to an underlying disk where data remains even after the deletion of the application. Otherwise, an incidental deletion will delete all state."),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"Using stateful data requires additional caution to not lose data by accident. Therefore, when a pod/deployment/statefulset resource is removed, data will still be available on the StorageClass's disk that was used."),(0,n.kt)("h2",{id:"how"},"How"),(0,n.kt)("p",null,"Example PersistentVolumeClaim:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# pvc.yaml\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: pvc-persistent-tmp-demo\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Mi\n")),(0,n.kt)("p",null,"This can be referenced in the volumes section of a Pod/Deployment/StatefulSet resource:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# deployment.yaml\n#...\n      volumes:\n        - name: pv-tmp-demo\n          persistentVolumeClaim:\n            claimName: pvc-persistent-tmp-demo\n#...\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"It is not recommended to directly request the claim in a StatefulSet! Rather create the PVC separately and reference that as an existing claim. See the example in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/main/bitnami/postgresql"},"Bitnami's Postgresql chart")," where an existing claim can be referenced for the primary database at the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/main/bitnami/postgresql#postgresql-primary-parameters"},"primary.persistence.existingClaim property"),".")),(0,n.kt)("h3",{id:"how-to-expand-volume-in-kubernetes-with-argocd"},"How to expand volume in Kubernetes with ArgoCD"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open ",(0,n.kt)("strong",{parentName:"p"},"ArgoCD")," in the desired environment and find the application")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Delete all Pod's that are attached to the volume. This also can be achieved by ",(0,n.kt)("strong",{parentName:"p"},"scaling a StatefulSet to 0 replicas"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Find the desired PersistenceVolumeClaim resource, click on it and press ",(0,n.kt)("strong",{parentName:"p"},"Edit"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Change the ",(0,n.kt)("strong",{parentName:"p"},"spec.resource.requests.storage")," property's value to the desired size")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Save the changes and wait for them to take effect.\nThis can be found in the PVC's status section:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"status:\n  accessModes:\n    - ReadWriteOnce\n  capacity:\n    storage: 16Gi # DESIRED SIZE\n  phase: Bound\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Scale back the StatefulSet to the original replica count"))))}m.isMDXComponent=!0}}]);