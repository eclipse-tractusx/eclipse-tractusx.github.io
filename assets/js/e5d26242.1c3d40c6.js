"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[93600],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=i,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},88810:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const a={title:"TRG 8.04 - Trivy"},o=void 0,l={unversionedId:"release/trg-8/trg-8-04",id:"release/trg-8/trg-8-04",title:"TRG 8.04 - Trivy",description:"| Status | Created     | Post-History    |",source:"@site/docs/release/trg-8/trg-8-04.md",sourceDirName:"release/trg-8",slug:"/release/trg-8/trg-8-04",permalink:"/docs/release/trg-8/trg-8-04",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/release/trg-8/trg-8-04.md",tags:[],version:"current",frontMatter:{title:"TRG 8.04 - Trivy"},sidebar:"docs",previous:{title:"TRG 8.03 - GitGuardian",permalink:"/docs/release/trg-8/trg-8-03"},next:{title:"Website Overview",permalink:"/docs/website-guidelines/wiki"}},s={},u=[{value:"Why",id:"why",level:2},{value:"Description",id:"description",level:2}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Status"),(0,i.kt)("th",{parentName:"tr",align:null},"Created"),(0,i.kt)("th",{parentName:"tr",align:null},"Post-History"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Active"),(0,i.kt)("td",{parentName:"tr",align:null},"26-Mar-2024"),(0,i.kt)("td",{parentName:"tr",align:null},"Initial release")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Draft"),(0,i.kt)("td",{parentName:"tr",align:null},"04-Mar-2024"),(0,i.kt)("td",{parentName:"tr",align:null},"Draft release")))),(0,i.kt)("h2",{id:"why"},"Why"),(0,i.kt)("p",null,"Trivy scans our Docker containers to accurately identify and remediate vulnerabilities in OS packages and application dependencies, ensuring our environment remains secure."),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Trivy should be used if your project or repository builds containers and publishes them to Docker Hub."),(0,i.kt)("p",null,"Configure your GitHub Actions to include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workflow_dispatch"),": Manual workflow execution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schedule"),": Schedule the workflow to run at least once a week with ",(0,i.kt)("inlineCode",{parentName:"li"},"0 0 * * 0"),".")),(0,i.kt)("p",null,"Because Trivy scans the published image on Docker Hub, running it on a ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," suffices, removing the necessity to execute it on every push and pull request. Optionally, the local build in the pipeline run can be scanned, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pull_request")," triggers for these scans."),(0,i.kt)("p",null,"In the Trivy workflow, the Docker Hub image scanned must be the currently supported version, not necessarily the ",(0,i.kt)("inlineCode",{parentName:"p"},"latest")," image."),(0,i.kt)("p",null,"If multiple Docker images, such as frontend and backend, are published from the repository, configure a scan for each image either by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"matrix")," option or by duplicating the necessary steps from the example workflow."),(0,i.kt)("p",null,"Findings appear in the GitHub Advanced Security Dashboard. Dismiss high/error findings as non-exploitable or false positives with required justification in the vulnerability alert."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Address high severity findings; it is recommended to also address medium severity findings."),(0,i.kt)("p",{parentName:"admonition"},"Due to IP considerations, base images with findings must not be updated arbitrarily, as outlined in ",(0,i.kt)("a",{parentName:"p",href:"https://eclipse-tractusx.github.io/docs/release/trg-4/trg-4-02"},"TRG4"),".")),(0,i.kt)("p",null,"You can tailor the failure conditions (",(0,i.kt)("inlineCode",{parentName:"p"},"exit-code"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"severity"),") for high severity issues in the workflow to suit your team's preferences."),(0,i.kt)("p",null,"Example Trivy workflow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'name: "Trivy"\n\non:\n  schedule:\n    - cron: "0 0 * * 0"\n  workflow_dispatch:\n\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@0.18.0\n        with:\n          image-ref: "tractusx/<your-image>:<version>" # Pull image from Docker Hub and run Trivy vulnerability scanner\n          format: "sarif"\n          output: "trivy-results.sarif"\n          exit-code: "1" # Trivy exits with code 1 if vulnerabilities are found, causing the workflow step to fail.\n          severity: "CRITICAL,HIGH" # While vulnerabilities of all severities are reported in the SARIF output, the exit code and workflow failure are triggered only by these specified severities (CRITICAL or HIGH).\n          hide-progress: false\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v3\n        if: always()\n        with:\n          sarif_file: "trivy-results.sarif"\n')))}p.isMDXComponent=!0}}]);