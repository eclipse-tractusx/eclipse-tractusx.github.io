"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[51950],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},90613:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"website-guidelines/understanding-multi-instance_versioning","title":"Understanding our multi instance and versioning behaviour","description":"Like mentioned in the important to know! section, In this guideline page we want to talk a bit about the structure, documentation instances, versioning and conditional rendering (non official) solution for the versions dropdown menu.","source":"@site/docs/website-guidelines/understanding-multi-instance_versioning.md","sourceDirName":"website-guidelines","slug":"/website-guidelines/understanding-multi-instance_versioning","permalink":"/docs/website-guidelines/understanding-multi-instance_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/website-guidelines/understanding-multi-instance_versioning.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Understanding our multi instance and versioning behaviour","sidebar_position":6},"sidebar":"docs","previous":{"title":"Creating an open API documentation","permalink":"/docs/website-guidelines/create-open-api-doc"},"next":{"title":"How to update and integrate React components?","permalink":"/docs/website-guidelines/update-and-integrate-react-components"}}');var t=i(74848),o=i(28453);const r={title:"Understanding our multi instance and versioning behaviour",sidebar_position:6},d=void 0,c={},a=[{value:"Our multi-instance structure",id:"our-multi-instance-structure",level:2},{value:"Creating new versions",id:"creating-new-versions",level:2},{value:"Versions dropdown menu",id:"versions-dropdown-menu",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Like mentioned in the ",(0,t.jsx)(n.a,{href:"/docs/kit-process/processes/create_KIT_page#important-to-know",children:"important to know!"})," section, In this ",(0,t.jsx)(n.code,{children:"guideline"})," page we want to talk a bit about the structure, documentation instances, versioning and conditional rendering (non official) solution for the ",(0,t.jsx)(n.code,{children:"versions dropdown"})," menu."]}),"\n",(0,t.jsx)(n.h2,{id:"our-multi-instance-structure",children:"Our multi-instance structure"}),"\n",(0,t.jsx)(n.p,{children:"We have structured our documentation i a way that it's divided in 3 instances/folders:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"./docs"})," -> dedicated to the ",(0,t.jsx)(n.code,{children:"Developer Hub"})," content (not versioned)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"./docs-kits"})," -> dedicated to the ",(0,t.jsx)(n.code,{children:"KITs"})," content (versioned)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["With this structure we are able to have a better control and organisation of the code, and also allow us to have separated versions for each ",(0,t.jsx)(n.code,{children:"instance"})," if needed."]}),"\n",(0,t.jsx)(n.p,{children:"Each instance/folder's sidebar is also defined in a separate file, like follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"./docs"})," -> ",(0,t.jsx)(n.code,{children:"sidebars.js"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"./docs-kits"})," -> ",(0,t.jsx)(n.code,{children:"sidebarsDocskits.js"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To understand and know more about the multi-instance ",(0,t.jsx)(n.a,{href:"https://docusaurus.io/docs/2.2.0/docs-multi-instance#setup",children:"setup"})," check the official documentation."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-new-versions",children:"Creating new versions"}),"\n",(0,t.jsxs)(n.p,{children:["The creation/tagging of a new version will follow a scheduled period of time, through the CLI is very easy to do it as it's indicated in ",(0,t.jsx)(n.a,{href:"https://docusaurus.io/docs/2.2.0/docs-multi-instance#tagging-new-versions",children:"here"}),", it is only needed to run the following command to tag a new version of the ",(0,t.jsx)(n.code,{children:"docs-kits"})," instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run docusaurus docs:version:docs-kits 1.0.0\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This ",(0,t.jsx)(n.code,{children:"command"})," will freeze (create a copy) all the documentation included in the ",(0,t.jsx)(n.code,{children:"./docs-kits"})," folder at the moment of the creation and storage said copy in the ",(0,t.jsx)(n.code,{children:"./docs-kits-versioned_docs"})," folder. At the same time, it will create a copy of the ",(0,t.jsx)(n.code,{children:"sidebarsDocsKits.js"})," file and it will storage it in the ",(0,t.jsx)(n.code,{children:"./docs-kits_versioned_sidebars"})," folder."]}),"\n",(0,t.jsxs)(n.p,{children:["That way ",(0,t.jsx)(n.code,{children:"docusaurus"})," handles the different versions and is the reason why the ",(0,t.jsx)(n.code,{children:"./docs-kits"})," folder is pointing always to the ",(0,t.jsx)(n.code,{children:"Next"})," version."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"IMPORTANT"})})," do not tag a new version unless is explicitly requested by the ",(0,t.jsx)(n.code,{children:"eclipse-tractusx"})," repository's committers."]}),"\n",(0,t.jsx)(n.h2,{id:"versions-dropdown-menu",children:"Versions dropdown menu"}),"\n",(0,t.jsxs)(n.p,{children:["Following the ",(0,t.jsx)(n.a,{href:"https://docusaurus.io/docs/2.2.0/api/themes/configuration#navbar-docs-version-dropdown",children:"Navbar docs version dropdown"})," documentation, our ",(0,t.jsx)(n.code,{children:"versions dropdown"})," menu is defined here:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"themeConfig:\n    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */\n    ({\n      // ...\n      navbar: {\n        title: 'Eclipse Tractus-X',\n        logo: {\n          alt: 'Eclipse Tractus-X logo',\n          src: 'img/logo_tractus-x.svg',\n        },\n        items: [\n          // ...\n          {\n            type: 'docsVersionDropdown',\n            docsPluginId: 'docs-kits',\n            position: 'right'\n          },\n          // ...\n        ]\n      }\n      // ...\n    })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This last declaration will include automatically all the created versions from the ",(0,t.jsx)(n.code,{children:"./docs-kits"})," instance, but it will be displayed at all time. This is a behaviour that we wanted to avoid, because it could create a misunderstanding for the user and raised questions like: what documentation does that ",(0,t.jsx)(n.code,{children:"version dropdown menu"})," is pointing at? what if other instance needs to be versioned as well? ",(0,t.jsx)(n.code,{children:"Docusaurus"})," doesn't provided an official solution for this scenario, but the community provided a good one that you can check at the end of this ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/docusaurus/issues/4389",children:"tread"}),", it required to ",(0,t.jsx)(n.a,{href:"https://docusaurus.io/docs/2.2.0/swizzling",children:"swizzle"})," the ",(0,t.jsx)(n.code,{children:"DocsVersionDropdownNavbarItem"})," to make the conditional rendering of it depending on the navigation location in the page."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);