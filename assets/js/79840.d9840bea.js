"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([["79840"],{2419:function(e,t,n){n.d(t,{M:()=>d});var r=n(83792),i=n(23149),a=n(26506);function d(e){var t,n,d={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:(t=e,a.A(t.nodes(),function(e){var n=t.node(e),i=t.parent(e),a={v:e};return r.A(n)||(a.value=n),r.A(i)||(a.parent=i),a})),edges:(n=e,a.A(n.edges(),function(e){var t=n.edge(e),i={v:e.v,w:e.w};return r.A(e.name)||(i.name=e.name),r.A(t)||(i.value=t),i}))};return r.A(e.graph())||(d.value=i.A(e.graph())),d}n(64877)},23149:function(e,t,n){n.d(t,{A:()=>i});var r=n(8391);let i=function(e){return(0,r.A)(e,4)}},79299:function(e,t,n){n.r(t),n.d(t,{render:()=>x});var r=n(73285);n(57127);var i=n(16719),a=n(27627);n(69630),n(46808),n(58155);var d=n(13724),o=n(4059),s=n(2419),l=n(48481),g=new Map,c=new Map,f=new Map,h=(0,d.K2)(()=>{c.clear(),f.clear(),g.clear()},"clear"),u=(0,d.K2)((e,t)=>{let n=c.get(t)||[];return d.Rm.trace("In isDescendant",t," ",e," = ",n.includes(e)),n.includes(e)},"isDescendant"),p=(0,d.K2)((e,t)=>{let n=c.get(t)||[];return d.Rm.info("Descendants of ",t," is ",n),d.Rm.info("Edge is ",e),e.v!==t&&e.w!==t&&(n?n.includes(e.v)||u(e.v,t)||u(e.w,t)||n.includes(e.w):(d.Rm.debug("Tilt, ",t,",not in descendants"),!1))},"edgeInCluster"),m=(0,d.K2)((e,t,n,r)=>{d.Rm.warn("Copying children of ",e,"root",r,"data",t.node(e),r);let i=t.children(e)||[];e!==r&&i.push(e),d.Rm.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach(i=>{if(t.children(i).length>0)m(i,t,n,r);else{let a=t.node(i);d.Rm.info("cp ",i," to ",r," with parent ",e),n.setNode(i,a),r!==t.parent(i)&&(d.Rm.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(d.Rm.debug("Setting parent",i,e),n.setParent(i,e)):(d.Rm.info("In copy ",e,"root",r,"data",t.node(e),r),d.Rm.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));let o=t.edges(i);d.Rm.debug("Copying Edges",o),o.forEach(i=>{d.Rm.info("Edge",i);let a=t.edge(i.v,i.w,i.name);d.Rm.info("Edge data",a,r);try{p(i,r)?(d.Rm.info("Copying as ",i.v,i.w,a,i.name),n.setEdge(i.v,i.w,a,i.name),d.Rm.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):d.Rm.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(e){d.Rm.error(e)}})}d.Rm.debug("Removing node",i),t.removeNode(i)})},"copy"),w=(0,d.K2)((e,t)=>{let n=t.children(e),r=[...n];for(let i of n)f.set(i,e),r=[...r,...w(i,t)];return r},"extractDescendants"),R=(0,d.K2)((e,t,n)=>{let r=e.edges().filter(e=>e.v===t||e.w===t),i=e.edges().filter(e=>e.v===n||e.w===n),a=r.map(e=>({v:e.v===t?n:e.v,w:e.w===t?t:e.w})),d=i.map(e=>({v:e.v,w:e.w}));return a.filter(e=>d.some(t=>e.v===t.v&&e.w===t.w))},"findCommonEdges"),v=(0,d.K2)((e,t,n)=>{let r,i=t.children(e);if(d.Rm.trace("Searching children of id ",e,i),i.length<1)return e;for(let e of i){let i=v(e,t,n),a=R(t,n,i);if(i)if(!(a.length>0))return i;else r=i}return r},"findNonClusterChild"),y=(0,d.K2)(e=>g.has(e)&&g.get(e).externalConnections&&g.has(e)?g.get(e).id:e,"getAnchorId"),X=(0,d.K2)((e,t)=>{if(!e||t>10)return void d.Rm.debug("Opting out, no graph ");for(let t of(d.Rm.debug("Opting in, graph "),e.nodes().forEach(function(t){e.children(t).length>0&&(d.Rm.warn("Cluster identified",t," Replacement id in edges: ",v(t,e,t)),c.set(t,w(t,e)),g.set(t,{id:v(t,e,t),clusterData:e.node(t)}))}),e.nodes().forEach(function(t){let n=e.children(t),r=e.edges();n.length>0?(d.Rm.debug("Cluster identified",t,c),r.forEach(e=>{u(e.v,t)^u(e.w,t)&&(d.Rm.warn("Edge: ",e," leaves cluster ",t),d.Rm.warn("Descendants of XXX ",t,": ",c.get(t)),g.get(t).externalConnections=!0)})):d.Rm.debug("Not a cluster ",t,c)}),g.keys())){let n=g.get(t).id,r=e.parent(n);r!==t&&g.has(r)&&!g.get(r).externalConnections&&(g.get(t).id=r)}e.edges().forEach(function(t){let n=e.edge(t);d.Rm.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),d.Rm.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(d.Rm.warn("Fix XXX",g,"ids:",t.v,t.w,"Translating: ",g.get(t.v)," --- ",g.get(t.w)),g.get(t.v)||g.get(t.w)){if(d.Rm.warn("Fixing and trying - removing XXX",t.v,t.w,t.name),r=y(t.v),i=y(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v){let i=e.parent(r);g.get(i).externalConnections=!0,n.fromCluster=t.v}if(i!==t.w){let r=e.parent(i);g.get(r).externalConnections=!0,n.toCluster=t.w}d.Rm.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name)}}),d.Rm.warn("Adjusted Graph",s.M(e)),b(e,0),d.Rm.trace(g)},"adjustClustersAndEdges"),b=(0,d.K2)((e,t)=>{if(d.Rm.warn("extractor - ",t,s.M(e),e.children("D")),t>10)return void d.Rm.error("Bailing out");let n=e.nodes(),r=!1;for(let t of n){let n=e.children(t);r=r||n.length>0}if(!r)return void d.Rm.debug("Done, no node has children",e.nodes());for(let r of(d.Rm.debug("Nodes = ",n,t),n))if(d.Rm.debug("Extracting node",r,g,g.has(r)&&!g.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),g.has(r))if(!g.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){d.Rm.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";g.get(r)?.clusterData?.dir&&(n=g.get(r).clusterData.dir,d.Rm.warn("Fixing dir",g.get(r).clusterData.dir,n));let i=new l.T({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});d.Rm.warn("Old graph before copy",s.M(e)),m(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:g.get(r).clusterData,label:g.get(r).label,graph:i}),d.Rm.warn("New graph after copy node: (",r,")",s.M(i)),d.Rm.debug("Old graph after copy",s.M(e))}else d.Rm.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!g.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),d.Rm.debug(g);else d.Rm.debug("Not a cluster",r,t);for(let r of(n=e.nodes(),d.Rm.warn("New list of nodes",n),n)){let n=e.node(r);d.Rm.warn(" Now next level",r,n),n?.clusterNode&&b(n.graph,t+1)}},"extractor"),E=(0,d.K2)((e,t)=>{if(0===t.length)return[];let n=Object.assign([],t);return t.forEach(t=>{let r=e.children(t),i=E(e,r);n=[...n,...i]}),n},"sorter"),N=(0,d.K2)(e=>E(e,e.children()),"sortNodesByHierarchy"),C=(0,d.K2)(async(e,t,n,l,c,f)=>{d.Rm.warn("Graph in recursive render:XAX",s.M(t),c);let h=t.graph().rankdir;d.Rm.trace("Dir in recursive render - dir:",h);let u=e.insert("g").attr("class","root");t.nodes()?d.Rm.info("Recursive render XXX",t.nodes()):d.Rm.info("No nodes found for",t),t.edges().length>0&&d.Rm.info("Recursive edges",t.edge(t.edges()[0]));let p=u.insert("g").attr("class","clusters"),m=u.insert("g").attr("class","edgePaths"),w=u.insert("g").attr("class","edgeLabels"),R=u.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(e){let r=t.node(e);if(void 0!==c){let n=JSON.parse(JSON.stringify(c.clusterData));d.Rm.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",n.height,"\nParent cluster",c.height),t.setNode(c.id,n),t.parent(e)||(d.Rm.trace("Setting parent",e,c.id),t.setParent(e,c.id,n))}if(d.Rm.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),r?.clusterNode){d.Rm.info("Cluster identified XBX",e,r.width,t.node(e));let{ranksep:a,nodesep:o}=t.graph();r.graph.setGraph({...r.graph.graph(),ranksep:a+25,nodesep:o});let s=await C(R,r.graph,n,l,t.node(e),f),g=s.elem;(0,i.lC)(r,g),r.diff=s.diff||0,d.Rm.info("New compound node after recursive render XAX",e,"width",r.width,"height",r.height),(0,i.U7)(g,r)}else t.children(e).length>0?(d.Rm.trace("Cluster - the non recursive path XBX",e,r.id,r,r.width,"Graph:",t),d.Rm.trace(v(r.id,t)),g.set(r.id,{id:v(r.id,t),node:r})):(d.Rm.trace("Node - the non recursive path XAX",e,R,t.node(e),h),await (0,i.on)(R,t.node(e),{config:f,dir:h}))}));let y=(0,d.K2)(async()=>{let e=t.edges().map(async function(e){let n=t.edge(e.v,e.w,e.name);d.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),d.Rm.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),d.Rm.info("Fix",g,"ids:",e.v,e.w,"Translating: ",g.get(e.v),g.get(e.w)),await (0,r.jP)(w,n)});await Promise.all(e)},"processEdges");await y(),d.Rm.info("Graph before layout:",JSON.stringify(s.M(t))),d.Rm.info("############################################# XXX"),d.Rm.info("###                Layout                 ### XXX"),d.Rm.info("############################################# XXX"),(0,o.Zp)(t),d.Rm.info("Graph after layout:",JSON.stringify(s.M(t)));let X=0,{subGraphTitleTotalMargin:b}=(0,a.O)(f);return await Promise.all(N(t).map(async function(e){let n=t.node(e);if(d.Rm.info("Position XBX => "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n?.clusterNode)n.y+=b,d.Rm.info("A tainted cluster node XBX1",e,n.id,n.width,n.height,n.x,n.y,t.parent(e)),g.get(n.id).node=n,(0,i.U_)(n);else if(t.children(e).length>0){d.Rm.info("A pure cluster node XBX1",e,n.id,n.x,n.y,n.width,n.height,t.parent(e)),n.height+=b,t.node(n.parentId);let r=n?.padding/2||0,a=n?.labelBBox?.height||0;d.Rm.debug("OffsetY",a-r||0,"labelHeight",a,"halfPadding",r),await (0,i.U)(p,n),g.get(n.id).node=n}else{let e=t.node(n.parentId);n.y+=b/2,d.Rm.info("A regular node XBX1 - using the padding",n.id,"parent",n.parentId,n.width,n.height,n.x,n.y,"offsetY",n.offsetY,"parent",e,e?.offsetY,n),(0,i.U_)(n)}})),t.edges().forEach(function(e){let i=t.edge(e);d.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i),i.points.forEach(e=>e.y+=b/2);let a=t.node(e.v);var o=t.node(e.w);let s=(0,r.Jo)(m,i,g,n,a,o,l);(0,r.T_)(i,s)}),t.nodes().forEach(function(e){let n=t.node(e);d.Rm.info(e,n.type,n.diff),n.isGroup&&(X=n.diff)}),d.Rm.warn("Returning from recursive render XAX",u,X),{elem:u,diff:X}},"recursiveRender"),x=(0,d.K2)(async(e,t)=>{let n=new l.T({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),a=t.select("g");(0,r.g0)(a,e.markers,e.type,e.diagramId),(0,i.gh)(),(0,r.IU)(),(0,i.IU)(),h(),e.nodes.forEach(e=>{n.setNode(e.id,{...e}),e.parentId&&n.setParent(e.id,e.parentId)}),d.Rm.debug("Edges:",e.edges),e.edges.forEach(e=>{if(e.start===e.end){let t=e.start,r=t+"---"+t+"---1",i=t+"---"+t+"---2",a=n.node(t);n.setNode(r,{domId:r,id:r,parentId:a.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),n.setParent(r,a.parentId),n.setNode(i,{domId:i,id:i,parentId:a.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),n.setParent(i,a.parentId);let d=structuredClone(e),o=structuredClone(e),s=structuredClone(e);d.label="",d.arrowTypeEnd="none",d.id=t+"-cyclic-special-1",o.arrowTypeStart="none",o.arrowTypeEnd="none",o.id=t+"-cyclic-special-mid",s.label="",a.isGroup&&(d.fromCluster=t,s.toCluster=t),s.id=t+"-cyclic-special-2",s.arrowTypeStart="none",n.setEdge(t,r,d,t+"-cyclic-special-0"),n.setEdge(r,i,o,t+"-cyclic-special-1"),n.setEdge(i,t,s,t+"-cyc<lic-special-2")}else n.setEdge(e.start,e.end,{...e},e.id)}),d.Rm.warn("Graph at first:",JSON.stringify(s.M(n))),X(n),d.Rm.warn("Graph after XAX:",JSON.stringify(s.M(n)));let o=(0,d.D7)();await C(a,n,e.type,e.diagramId,void 0,o)},"render")}}]);