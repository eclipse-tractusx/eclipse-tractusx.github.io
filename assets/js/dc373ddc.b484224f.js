"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[77227],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?o.createElement(f,a(a({ref:t},p),{},{components:n})):o.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={title:"Recommended Tooling for Open Source Development",sidebar_position:41},a=void 0,s={unversionedId:"oss/tooling",id:"oss/tooling",title:"Recommended Tooling for Open Source Development",description:"Effective open source development depends on selecting tools that align with the community's principles and project requirements. Below are key considerations when choosing such tools.",source:"@site/docs/oss/tooling.md",sourceDirName:"oss",slug:"/oss/tooling",permalink:"/docs/oss/tooling",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/oss/tooling.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{title:"Recommended Tooling for Open Source Development",sidebar_position:41},sidebar:"docs",previous:{title:"Issue Tracker",permalink:"/docs/oss/issues"},next:{title:"Release Guidelines",permalink:"/docs/release"}},l={},c=[{value:"Bruno \u2013 A Git-Friendly Open Source API Client",id:"bruno--a-git-friendly-open-source-api-client",level:2},{value:"NOTICE",id:"notice",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Effective open source development depends on selecting tools that align with the community's principles and project requirements. Below are key considerations when choosing such tools.\nThis page should provide a list of recommended tools for open source development."),(0,r.kt)("admonition",{title:"Requirements for Tools in Open Source Development",type:"note"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Open Source Licensing")," - Tools should have licenses that permit free use, modification, and distribution, ensuring they align with open source principles."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Cross-Platform Compatibility")," - Tools should function across various operating systems, including Windows, macOS, and Linux, to accommodate diverse development environments."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Community Support")," - Active communities provide valuable resources, plugins, and extensions, enhancing tool functionality and fostering continuous improvement."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Integration Capabilities")," - Seamless integration with other development tools, such as version control systems and continuous integration servers, is essential for streamlined workflows."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Security Features")," - Tools should prioritize security, including regular updates and patches, to protect against vulnerabilities."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Documentation and Usability")," - Comprehensive documentation and an intuitive user interface facilitate ease of use and quick onboarding for new contributors."))),(0,r.kt)("h2",{id:"bruno--a-git-friendly-open-source-api-client"},"Bruno \u2013 A Git-Friendly Open Source API Client"),(0,r.kt)("p",null,"Bruno is an open source API client designed to simplify API development and testing. It offers a minimalist approach compared to traditional API clients, storing API requests and tests in plain text files,\nwhich enables seamless version control and collaboration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Advantages and Benefits:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Local-First and Offline Operation"),": Bruno operates entirely offline, storing all data locally. This enhances security and performance, addressing concerns associated with cloud-based API clients."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Git Integration"),": By storing collections as plain text files, Bruno allows for easy integration with Git. This design facilitates version control and collaboration, enabling developers to manage API requests alongside their codebase."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Minimalistic and User-Friendly Interface"),": Bruno offers a clean and intuitive interface, reducing complexity and focusing on essential features required for API development."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Open Source and Community-Driven"),": As an open source tool, Bruno encourages community contributions, fostering continuous improvement and transparency.")),(0,r.kt)("p",null,"For more information and to download Bruno, visit their ",(0,r.kt)("a",{parentName:"p",href:"https://www.usebruno.com/"},"official website")," or the ",(0,r.kt)("a",{parentName:"p",href:"https://www.usebruno.com/manifesto"},"manifesto")),(0,r.kt)("h2",{id:"notice"},"NOTICE"),(0,r.kt)("p",null,"This work is licensed under the ",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by/4.0/legalcode"},"CC-BY-4.0"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Copyright (c) 2025 Contributors to the Eclipse Foundation")))}u.isMDXComponent=!0}}]);